/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "DebugProtoTest_constants.h"

namespace thrift { namespace test { namespace debug {

const DebugProtoTestConstants g_DebugProtoTest_constants;

DebugProtoTestConstants::DebugProtoTestConstants() {
  std::set<double>  tmp635;
  tmp635.insert(0.1);
  tmp635.insert(0.2);
  tmp635.insert(0.3);

  COMPACT_TEST.double_set = tmp635;
  COMPACT_TEST.__isset.double_set = true;
  std::set<std::string>  tmp636;
  tmp636.insert("first");
  tmp636.insert("second");
  tmp636.insert("third");

  COMPACT_TEST.string_set = tmp636;
  COMPACT_TEST.__isset.string_set = true;
  std::set<bool>  tmp637;
  tmp637.insert(true);
  tmp637.insert(false);

  COMPACT_TEST.boolean_set = tmp637;
  COMPACT_TEST.__isset.boolean_set = true;
  std::set<Empty>  tmp638;
  Empty tmp639;

  tmp638.insert(tmp639);

  COMPACT_TEST.struct_set = tmp638;
  COMPACT_TEST.__isset.struct_set = true;
  std::map<int8_t, int8_t>  tmp640;
  tmp640.insert(std::make_pair(1, 2));

  COMPACT_TEST.byte_byte_map = tmp640;
  COMPACT_TEST.__isset.byte_byte_map = true;
  std::map<int16_t, int8_t>  tmp641;
  tmp641.insert(std::make_pair(1, 1));
  tmp641.insert(std::make_pair(-1, 1));
  tmp641.insert(std::make_pair(32767, 1));

  COMPACT_TEST.i16_byte_map = tmp641;
  COMPACT_TEST.__isset.i16_byte_map = true;
  std::map<int32_t, int8_t>  tmp642;
  tmp642.insert(std::make_pair(1, 1));
  tmp642.insert(std::make_pair(-1, 1));
  tmp642.insert(std::make_pair(2147483647, 1));

  COMPACT_TEST.i32_byte_map = tmp642;
  COMPACT_TEST.__isset.i32_byte_map = true;
  std::map<int64_t, int8_t>  tmp643;
  tmp643.insert(std::make_pair(0LL, 1));
  tmp643.insert(std::make_pair(1LL, 1));
  tmp643.insert(std::make_pair(-1LL, 1));
  tmp643.insert(std::make_pair(9223372036854775807LL, 1));

  COMPACT_TEST.i64_byte_map = tmp643;
  COMPACT_TEST.__isset.i64_byte_map = true;
  std::map<double, int8_t>  tmp644;
  tmp644.insert(std::make_pair(-1.1, 1));
  tmp644.insert(std::make_pair(1.1, 1));

  COMPACT_TEST.double_byte_map = tmp644;
  COMPACT_TEST.__isset.double_byte_map = true;
  std::map<std::string, int8_t>  tmp645;
  tmp645.insert(std::make_pair("first", 1));
  tmp645.insert(std::make_pair("second", 2));
  tmp645.insert(std::make_pair("third", 3));
  tmp645.insert(std::make_pair("", 0));

  COMPACT_TEST.string_byte_map = tmp645;
  COMPACT_TEST.__isset.string_byte_map = true;
  std::map<bool, int8_t>  tmp646;
  tmp646.insert(std::make_pair(true, 1));
  tmp646.insert(std::make_pair(false, 0));

  COMPACT_TEST.boolean_byte_map = tmp646;
  COMPACT_TEST.__isset.boolean_byte_map = true;
  std::map<int8_t, int16_t>  tmp647;
  tmp647.insert(std::make_pair(1, 1));
  tmp647.insert(std::make_pair(2, -1));
  tmp647.insert(std::make_pair(3, 32767));

  COMPACT_TEST.byte_i16_map = tmp647;
  COMPACT_TEST.__isset.byte_i16_map = true;
  std::map<int8_t, int32_t>  tmp648;
  tmp648.insert(std::make_pair(1, 1));
  tmp648.insert(std::make_pair(2, -1));
  tmp648.insert(std::make_pair(3, 2147483647));

  COMPACT_TEST.byte_i32_map = tmp648;
  COMPACT_TEST.__isset.byte_i32_map = true;
  std::map<int8_t, int64_t>  tmp649;
  tmp649.insert(std::make_pair(1, 1LL));
  tmp649.insert(std::make_pair(2, -1LL));
  tmp649.insert(std::make_pair(3, 9223372036854775807LL));

  COMPACT_TEST.byte_i64_map = tmp649;
  COMPACT_TEST.__isset.byte_i64_map = true;
  std::map<int8_t, double>  tmp650;
  tmp650.insert(std::make_pair(1, 0.1));
  tmp650.insert(std::make_pair(2, -0.1));
  tmp650.insert(std::make_pair(3, 1e+06));

  COMPACT_TEST.byte_double_map = tmp650;
  COMPACT_TEST.__isset.byte_double_map = true;
  std::map<int8_t, std::string>  tmp651;
  tmp651.insert(std::make_pair(1, ""));
  tmp651.insert(std::make_pair(2, "blah"));
  tmp651.insert(std::make_pair(3, "loooooooooooooong string"));

  COMPACT_TEST.byte_string_map = tmp651;
  COMPACT_TEST.__isset.byte_string_map = true;
  std::map<int8_t, bool>  tmp652;
  tmp652.insert(std::make_pair(1, true));
  tmp652.insert(std::make_pair(2, false));

  COMPACT_TEST.byte_boolean_map = tmp652;
  COMPACT_TEST.__isset.byte_boolean_map = true;
  std::map<std::vector<int8_t> , int8_t>  tmp653;
  std::vector<int8_t>  tmp654;
  tmp654.push_back(1);
  tmp654.push_back(2);
  tmp654.push_back(3);

  tmp653.insert(std::make_pair(tmp654, 1));
  std::vector<int8_t>  tmp655;
  tmp655.push_back(0);
  tmp655.push_back(1);

  tmp653.insert(std::make_pair(tmp655, 2));
  std::vector<int8_t>  tmp656;

  tmp653.insert(std::make_pair(tmp656, 0));

  COMPACT_TEST.list_byte_map = tmp653;
  COMPACT_TEST.__isset.list_byte_map = true;
  std::map<std::set<int8_t> , int8_t>  tmp657;
  std::set<int8_t>  tmp658;
  tmp658.insert(1);
  tmp658.insert(2);
  tmp658.insert(3);

  tmp657.insert(std::make_pair(tmp658, 1));
  std::set<int8_t>  tmp659;
  tmp659.insert(0);
  tmp659.insert(1);

  tmp657.insert(std::make_pair(tmp659, 2));
  std::set<int8_t>  tmp660;

  tmp657.insert(std::make_pair(tmp660, 0));

  COMPACT_TEST.set_byte_map = tmp657;
  COMPACT_TEST.__isset.set_byte_map = true;
  std::map<std::map<int8_t, int8_t> , int8_t>  tmp661;
  std::map<int8_t, int8_t>  tmp662;
  tmp662.insert(std::make_pair(1, 1));

  tmp661.insert(std::make_pair(tmp662, 1));
  std::map<int8_t, int8_t>  tmp663;
  tmp663.insert(std::make_pair(2, 2));

  tmp661.insert(std::make_pair(tmp663, 2));
  std::map<int8_t, int8_t>  tmp664;

  tmp661.insert(std::make_pair(tmp664, 0));

  COMPACT_TEST.map_byte_map = tmp661;
  COMPACT_TEST.__isset.map_byte_map = true;
  std::map<int8_t, std::map<int8_t, int8_t> >  tmp665;
  std::map<int8_t, int8_t>  tmp666;

  tmp665.insert(std::make_pair(0, tmp666));
  std::map<int8_t, int8_t>  tmp667;
  tmp667.insert(std::make_pair(1, 1));

  tmp665.insert(std::make_pair(1, tmp667));
  std::map<int8_t, int8_t>  tmp668;
  tmp668.insert(std::make_pair(1, 1));
  tmp668.insert(std::make_pair(2, 2));

  tmp665.insert(std::make_pair(2, tmp668));

  COMPACT_TEST.byte_map_map = tmp665;
  COMPACT_TEST.__isset.byte_map_map = true;
  std::map<int8_t, std::set<int8_t> >  tmp669;
  std::set<int8_t>  tmp670;

  tmp669.insert(std::make_pair(0, tmp670));
  std::set<int8_t>  tmp671;
  tmp671.insert(1);

  tmp669.insert(std::make_pair(1, tmp671));
  std::set<int8_t>  tmp672;
  tmp672.insert(1);
  tmp672.insert(2);

  tmp669.insert(std::make_pair(2, tmp672));

  COMPACT_TEST.byte_set_map = tmp669;
  COMPACT_TEST.__isset.byte_set_map = true;
  std::map<int8_t, std::vector<int8_t> >  tmp673;
  std::vector<int8_t>  tmp674;

  tmp673.insert(std::make_pair(0, tmp674));
  std::vector<int8_t>  tmp675;
  tmp675.push_back(1);

  tmp673.insert(std::make_pair(1, tmp675));
  std::vector<int8_t>  tmp676;
  tmp676.push_back(1);
  tmp676.push_back(2);

  tmp673.insert(std::make_pair(2, tmp676));

  COMPACT_TEST.byte_list_map = tmp673;
  COMPACT_TEST.__isset.byte_list_map = true;
  COMPACT_TEST.a_byte = 127;
  COMPACT_TEST.__isset.a_byte = true;
  COMPACT_TEST.a_i16 = 32000;
  COMPACT_TEST.__isset.a_i16 = true;
  COMPACT_TEST.a_i32 = 1000000000;
  COMPACT_TEST.__isset.a_i32 = true;
  COMPACT_TEST.a_i64 = 1099511627775LL;
  COMPACT_TEST.__isset.a_i64 = true;
  COMPACT_TEST.a_double = 5.6789;
  COMPACT_TEST.__isset.a_double = true;
  COMPACT_TEST.a_string = "my string";
  COMPACT_TEST.__isset.a_string = true;
  COMPACT_TEST.true_field = true;
  COMPACT_TEST.__isset.true_field = true;
  COMPACT_TEST.false_field = false;
  COMPACT_TEST.__isset.false_field = true;
  Empty tmp677;

  COMPACT_TEST.empty_struct_field = tmp677;
  COMPACT_TEST.__isset.empty_struct_field = true;
  std::vector<int8_t>  tmp678;
  tmp678.push_back(-127);
  tmp678.push_back(-1);
  tmp678.push_back(0);
  tmp678.push_back(1);
  tmp678.push_back(127);

  COMPACT_TEST.byte_list = tmp678;
  COMPACT_TEST.__isset.byte_list = true;
  std::vector<int16_t>  tmp679;
  tmp679.push_back(-1);
  tmp679.push_back(0);
  tmp679.push_back(1);
  tmp679.push_back(32767);

  COMPACT_TEST.i16_list = tmp679;
  COMPACT_TEST.__isset.i16_list = true;
  std::vector<int32_t>  tmp680;
  tmp680.push_back(-1);
  tmp680.push_back(0);
  tmp680.push_back(255);
  tmp680.push_back(65535);
  tmp680.push_back(16777215);
  tmp680.push_back(2147483647);

  COMPACT_TEST.i32_list = tmp680;
  COMPACT_TEST.__isset.i32_list = true;
  std::vector<int64_t>  tmp681;
  tmp681.push_back(-1LL);
  tmp681.push_back(0LL);
  tmp681.push_back(255LL);
  tmp681.push_back(65535LL);
  tmp681.push_back(16777215LL);
  tmp681.push_back(4294967295LL);
  tmp681.push_back(1099511627775LL);
  tmp681.push_back(281474976710655LL);
  tmp681.push_back(72057594037927935LL);
  tmp681.push_back(9223372036854775807LL);

  COMPACT_TEST.i64_list = tmp681;
  COMPACT_TEST.__isset.i64_list = true;
  std::vector<double>  tmp682;
  tmp682.push_back(0.1);
  tmp682.push_back(0.2);
  tmp682.push_back(0.3);

  COMPACT_TEST.double_list = tmp682;
  COMPACT_TEST.__isset.double_list = true;
  std::vector<std::string>  tmp683;
  tmp683.push_back("first");
  tmp683.push_back("second");
  tmp683.push_back("third");

  COMPACT_TEST.string_list = tmp683;
  COMPACT_TEST.__isset.string_list = true;
  std::vector<bool>  tmp684;
  tmp684.push_back(true);
  tmp684.push_back(true);
  tmp684.push_back(true);
  tmp684.push_back(false);
  tmp684.push_back(false);
  tmp684.push_back(false);

  COMPACT_TEST.boolean_list = tmp684;
  COMPACT_TEST.__isset.boolean_list = true;
  std::vector<Empty>  tmp685;
  Empty tmp686;

  tmp685.push_back(tmp686);
  Empty tmp687;

  tmp685.push_back(tmp687);

  COMPACT_TEST.struct_list = tmp685;
  COMPACT_TEST.__isset.struct_list = true;
  std::set<int8_t>  tmp688;
  tmp688.insert(-127);
  tmp688.insert(-1);
  tmp688.insert(0);
  tmp688.insert(1);
  tmp688.insert(127);

  COMPACT_TEST.byte_set = tmp688;
  COMPACT_TEST.__isset.byte_set = true;
  std::set<int16_t>  tmp689;
  tmp689.insert(-1);
  tmp689.insert(0);
  tmp689.insert(1);
  tmp689.insert(32767);

  COMPACT_TEST.i16_set = tmp689;
  COMPACT_TEST.__isset.i16_set = true;
  std::set<int32_t>  tmp690;
  tmp690.insert(1);
  tmp690.insert(2);
  tmp690.insert(3);

  COMPACT_TEST.i32_set = tmp690;
  COMPACT_TEST.__isset.i32_set = true;
  std::set<int64_t>  tmp691;
  tmp691.insert(-1LL);
  tmp691.insert(0LL);
  tmp691.insert(255LL);
  tmp691.insert(65535LL);
  tmp691.insert(16777215LL);
  tmp691.insert(4294967295LL);
  tmp691.insert(1099511627775LL);
  tmp691.insert(281474976710655LL);
  tmp691.insert(72057594037927935LL);
  tmp691.insert(9223372036854775807LL);

  COMPACT_TEST.i64_set = tmp691;
  COMPACT_TEST.__isset.i64_set = true;

  MYCONST = 2;

  MY_SOME_ENUM = (SomeEnum::type)1;

  MY_SOME_ENUM_1 = (SomeEnum::type)1;

  MY_ENUM_MAP.insert(std::make_pair((SomeEnum::type)1, (SomeEnum::type)2));

  StructWithSomeEnum tmp692;
  tmp692.blah = (SomeEnum::type)2;
  tmp692.__isset.blah = true;

  EXTRA_CRAZY_MAP.insert(std::make_pair((SomeEnum::type)1, tmp692));

}

}}} // namespace

