!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ADAPTIVE_INITIALIZER	concurrency/Mutex.cpp	/^void Mutex::ADAPTIVE_INITIALIZER(void* arg) {$/;"	f	class:apache::thrift::concurrency::Mutex
AF_LOCAL	server/TNonblockingServer.cpp	/^#define AF_LOCAL /;"	d	file:
AF_LOCAL	transport/TServerSocket.cpp	/^#define AF_LOCAL /;"	d	file:
ALIVE	gen-cpp-fb-s/facebooktest_types.h	/^    ALIVE = 2,$/;"	e	enum:facebook::fb303::fb_status::type
ALIVE	gen-cpp-fb/facebooktest_types.h	/^    ALIVE = 2,$/;"	e	enum:facebook::fb303::fb_status::type
ALLOW	transport/TSSLSocket.h	/^    ALLOW = 1  \/\/ allow access$/;"	e	enum:apache::thrift::transport::AccessManager::Decision
APP_CLOSE_CONNECTION	server/TNonblockingServer.cpp	/^  APP_CLOSE_CONNECTION$/;"	e	enum:apache::thrift::server::TAppState	file:
APP_INIT	server/TNonblockingServer.cpp	/^  APP_INIT,$/;"	e	enum:apache::thrift::server::TAppState	file:
APP_READ_FRAME_SIZE	server/TNonblockingServer.cpp	/^  APP_READ_FRAME_SIZE,$/;"	e	enum:apache::thrift::server::TAppState	file:
APP_READ_REQUEST	server/TNonblockingServer.cpp	/^  APP_READ_REQUEST,$/;"	e	enum:apache::thrift::server::TAppState	file:
APP_SEND_RESULT	server/TNonblockingServer.cpp	/^  APP_SEND_RESULT,$/;"	e	enum:apache::thrift::server::TAppState	file:
APP_WAIT_TASK	server/TNonblockingServer.cpp	/^  APP_WAIT_TASK,$/;"	e	enum:apache::thrift::server::TAppState	file:
ARITHMETIC_RIGHT_SHIFT	config.h	/^#define ARITHMETIC_RIGHT_SHIFT /;"	d
ARITHMETIC_RIGHT_SHIFT	windows/config.h	/^#define ARITHMETIC_RIGHT_SHIFT /;"	d
AUTOMAKE_VERSION	config.h	/^#define AUTOMAKE_VERSION /;"	d
AccessManager	transport/TSSLSocket.h	/^class AccessManager {$/;"	c	namespace:apache::thrift::transport
BAD_ARGS	transport/TTransportException.h	/^    BAD_ARGS = 5,$/;"	e	enum:apache::thrift::transport::TTransportException::TTransportExceptionType
BAD_SEQUENCE_ID	TApplicationException.h	/^    BAD_SEQUENCE_ID = 4,$/;"	e	enum:apache::thrift::TApplicationException::TApplicationExceptionType
BAD_VERSION	protocol/TProtocolException.h	/^    BAD_VERSION = 4,$/;"	e	enum:apache::thrift::protocol::TProtocolException::TProtocolExceptionType
BISON_USE_PARSER_H_EXTENSION	config.h	/^#define BISON_USE_PARSER_H_EXTENSION /;"	d
BISON_VERSION	config.h	/^#define BISON_VERSION /;"	d
Backtrace	VirtualProfiling.cpp	/^Backtrace::Backtrace(Backtrace const& bt) : numCallers_(bt.numCallers_), skip_(bt.skip_) {$/;"	f	class:apache::thrift::Backtrace
Backtrace	VirtualProfiling.cpp	/^Backtrace::Backtrace(int skip)$/;"	f	class:apache::thrift::Backtrace
Backtrace	VirtualProfiling.cpp	/^class Backtrace {$/;"	c	namespace:apache::thrift	file:
BacktraceMap	VirtualProfiling.cpp	/^typedef __gnu_cxx::hash_map<Key, size_t, Key::Hash> BacktraceMap;$/;"	t	namespace:apache::thrift	file:
BoolFunc	concurrency/FunctionRunner.h	/^  typedef apache::thrift::stdcxx::function<bool()> BoolFunc;$/;"	t	class:apache::thrift::concurrency::FunctionRunner
BoostThread	concurrency/BoostThreadFactory.cpp	/^  BoostThread(bool detached, shared_ptr<Runnable> runnable)$/;"	f	class:apache::thrift::concurrency::BoostThread
BoostThread	concurrency/BoostThreadFactory.cpp	/^class BoostThread : public Thread {$/;"	c	namespace:apache::thrift::concurrency	file:
BoostThreadFactory	concurrency/BoostThreadFactory.cpp	/^BoostThreadFactory::BoostThreadFactory(bool detached)$/;"	f	class:apache::thrift::concurrency::BoostThreadFactory
BoostThreadFactory	concurrency/BoostThreadFactory.h	/^class BoostThreadFactory : public ThreadFactory {$/;"	c	namespace:apache::thrift::concurrency
CANCELIO	windows/OverlappedSubmissionThread.h	/^    CANCELIO,$/;"	e	enum:apache::thrift::transport::TOverlappedWorkItem::action_t
CANCELLED	concurrency/ThreadManager.cpp	/^  enum STATE { WAITING, EXECUTING, CANCELLED, COMPLETE };$/;"	e	enum:apache::thrift::concurrency::ThreadManager::Task::STATE	file:
CANCELLED	concurrency/TimerManager.cpp	/^  enum STATE { WAITING, EXECUTING, CANCELLED, COMPLETE };$/;"	e	enum:apache::thrift::concurrency::TimerManager::Task::STATE	file:
CLOSE_ON_DESTROY	transport/TFDTransport.h	/^  enum ClosePolicy { NO_CLOSE_ON_DESTROY = 0, CLOSE_ON_DESTROY = 1 };$/;"	e	enum:apache::thrift::transport::TFDTransport::ClosePolicy
COMPLETE	concurrency/ThreadManager.cpp	/^  enum STATE { WAITING, EXECUTING, CANCELLED, COMPLETE };$/;"	e	enum:apache::thrift::concurrency::ThreadManager::Task::STATE	file:
COMPLETE	concurrency/TimerManager.cpp	/^  enum STATE { WAITING, EXECUTING, CANCELLED, COMPLETE };$/;"	e	enum:apache::thrift::concurrency::TimerManager::Task::STATE	file:
CONFIG_H	config.h	/^#define CONFIG_H$/;"	d
CONNECT	windows/OverlappedSubmissionThread.h	/^    CONNECT,$/;"	e	enum:apache::thrift::transport::TOverlappedWorkItem::action_t
CONNECTION_STACK_LIMIT	server/TNonblockingServer.h	/^  static const size_t CONNECTION_STACK_LIMIT = 1024;$/;"	m	class:apache::thrift::server::TNonblockingServer
COPY	transport/TBufferTransports.h	/^  enum MemoryPolicy { OBSERVE = 1, COPY = 2, TAKE_OWNERSHIP = 3 };$/;"	e	enum:apache::thrift::transport::TMemoryBuffer::MemoryPolicy
CORRUPTED_DATA	transport/TTransportException.h	/^    CORRUPTED_DATA = 6,$/;"	e	enum:apache::thrift::transport::TTransportException::TTransportExceptionType
CRLF	transport/THttpTransport.cpp	/^const char* THttpTransport::CRLF = "\\r\\n";$/;"	m	class:apache::thrift::transport::THttpTransport	file:
CRLF	transport/THttpTransport.h	/^  static const char* CRLF;$/;"	m	class:apache::thrift::transport::THttpTransport
CRLF_LEN	transport/THttpTransport.cpp	/^const int THttpTransport::CRLF_LEN = 2;$/;"	m	class:apache::thrift::transport::THttpTransport	file:
CRLF_LEN	transport/THttpTransport.h	/^  static const int CRLF_LEN;$/;"	m	class:apache::thrift::transport::THttpTransport
CRYPTO_dynlock_value	transport/TSSLSocket.cpp	/^struct CRYPTO_dynlock_value {$/;"	s	file:
CT_BINARY	protocol/TCompactProtocol.tcc	/^  CT_BINARY         = 0x08,$/;"	e	enum:apache::thrift::protocol::detail::compact::Types	file:
CT_BOOLEAN_FALSE	protocol/TCompactProtocol.tcc	/^  CT_BOOLEAN_FALSE  = 0x02,$/;"	e	enum:apache::thrift::protocol::detail::compact::Types	file:
CT_BOOLEAN_TRUE	protocol/TCompactProtocol.tcc	/^  CT_BOOLEAN_TRUE   = 0x01,$/;"	e	enum:apache::thrift::protocol::detail::compact::Types	file:
CT_BYTE	protocol/TCompactProtocol.tcc	/^  CT_BYTE           = 0x03,$/;"	e	enum:apache::thrift::protocol::detail::compact::Types	file:
CT_DOUBLE	protocol/TCompactProtocol.tcc	/^  CT_DOUBLE         = 0x07,$/;"	e	enum:apache::thrift::protocol::detail::compact::Types	file:
CT_I16	protocol/TCompactProtocol.tcc	/^  CT_I16            = 0x04,$/;"	e	enum:apache::thrift::protocol::detail::compact::Types	file:
CT_I32	protocol/TCompactProtocol.tcc	/^  CT_I32            = 0x05,$/;"	e	enum:apache::thrift::protocol::detail::compact::Types	file:
CT_I64	protocol/TCompactProtocol.tcc	/^  CT_I64            = 0x06,$/;"	e	enum:apache::thrift::protocol::detail::compact::Types	file:
CT_LIST	protocol/TCompactProtocol.tcc	/^  CT_LIST           = 0x09,$/;"	e	enum:apache::thrift::protocol::detail::compact::Types	file:
CT_MAP	protocol/TCompactProtocol.tcc	/^  CT_MAP            = 0x0B,$/;"	e	enum:apache::thrift::protocol::detail::compact::Types	file:
CT_SET	protocol/TCompactProtocol.tcc	/^  CT_SET            = 0x0A,$/;"	e	enum:apache::thrift::protocol::detail::compact::Types	file:
CT_STOP	protocol/TCompactProtocol.tcc	/^  CT_STOP           = 0x00,$/;"	e	enum:apache::thrift::protocol::detail::compact::Types	file:
CT_STRUCT	protocol/TCompactProtocol.tcc	/^  CT_STRUCT         = 0x0C$/;"	e	enum:apache::thrift::protocol::detail::compact::Types	file:
ClientAnonRead_	transport/TPipeServer.cpp	/^  TAutoHandle ClientAnonRead_;$/;"	m	class:apache::thrift::transport::TAnonPipeServer	file:
ClientAnonWrite_	transport/TPipeServer.cpp	/^  TAutoHandle ClientAnonWrite_;$/;"	m	class:apache::thrift::transport::TAnonPipeServer	file:
ClosePolicy	transport/TFDTransport.h	/^  enum ClosePolicy { NO_CLOSE_ON_DESTROY = 0, CLOSE_ON_DESTROY = 1 };$/;"	g	class:apache::thrift::transport::TFDTransport
ConnectionContext	qt/TQTcpServer.cpp	/^  explicit ConnectionContext(shared_ptr<QTcpSocket> connection,$/;"	f	struct:apache::thrift::async::TQTcpServer::ConnectionContext
ConnectionContext	qt/TQTcpServer.cpp	/^struct TQTcpServer::ConnectionContext {$/;"	s	class:apache::thrift::async::TQTcpServer	file:
CountGreater	VirtualProfiling.cpp	/^class CountGreater {$/;"	c	namespace:apache::thrift	file:
DEAD	gen-cpp-fb-s/facebooktest_types.h	/^    DEAD = 0,$/;"	e	enum:facebook::fb303::fb_status::type
DEAD	gen-cpp-fb/facebooktest_types.h	/^    DEAD = 0,$/;"	e	enum:facebook::fb303::fb_status::type
DECREMENT	concurrency/PosixThreadFactory.h	/^    DECREMENT = 8$/;"	e	enum:apache::thrift::concurrency::PosixThreadFactory::PRIORITY
DEFAULT_BACKLOG	transport/TServerSocket.h	/^  const static int DEFAULT_BACKLOG = 1024;$/;"	m	class:apache::thrift::transport::TServerSocket
DEFAULT_BUFFER_SIZE	transport/TBufferTransports.h	/^  static const int DEFAULT_BUFFER_SIZE = 512;   \/\/缓存的大小默认是512字节$/;"	m	class:apache::thrift::transport::TBufferedTransport
DEFAULT_BUFFER_SIZE	transport/TBufferTransports.h	/^  static const int DEFAULT_BUFFER_SIZE = 512; $/;"	m	class:apache::thrift::transport::TFramedTransport
DEFAULT_CHUNK_SIZE	transport/TFileTransport.h	/^  static const uint32_t DEFAULT_CHUNK_SIZE = 16 * 1024 * 1024;$/;"	m	class:apache::thrift::transport::TFileTransport
DEFAULT_CORRUPTED_SLEEP_TIME_US	transport/TFileTransport.h	/^  static const uint32_t DEFAULT_CORRUPTED_SLEEP_TIME_US = 1 * 1000 * 1000;$/;"	m	class:apache::thrift::transport::TFileTransport
DEFAULT_CRBUF_SIZE	transport/TZlibTransport.h	/^  static const int DEFAULT_CRBUF_SIZE = 1024;$/;"	m	class:apache::thrift::transport::TZlibTransport
DEFAULT_CWBUF_SIZE	transport/TZlibTransport.h	/^  static const int DEFAULT_CWBUF_SIZE = 1024;$/;"	m	class:apache::thrift::transport::TZlibTransport
DEFAULT_EOF_SLEEP_TIME_US	transport/TFileTransport.h	/^  static const uint32_t DEFAULT_EOF_SLEEP_TIME_US = 500 * 1000;$/;"	m	class:apache::thrift::transport::TFileTransport
DEFAULT_EVENT_BUFFER_SIZE	transport/TFileTransport.h	/^  static const uint32_t DEFAULT_EVENT_BUFFER_SIZE = 10000;$/;"	m	class:apache::thrift::transport::TFileTransport
DEFAULT_FLUSH_MAX_BYTES	transport/TFileTransport.h	/^  static const uint32_t DEFAULT_FLUSH_MAX_BYTES = 1000 * 1024;$/;"	m	class:apache::thrift::transport::TFileTransport
DEFAULT_FLUSH_MAX_US	transport/TFileTransport.h	/^  static const uint32_t DEFAULT_FLUSH_MAX_US = 3000000;$/;"	m	class:apache::thrift::transport::TFileTransport
DEFAULT_INITIALIZER	concurrency/BoostMutex.cpp	/^void Mutex::DEFAULT_INITIALIZER(void* arg) {$/;"	f	class:apache::thrift::concurrency::Mutex
DEFAULT_INITIALIZER	concurrency/Mutex.cpp	/^void Mutex::DEFAULT_INITIALIZER(void* arg) {$/;"	f	class:apache::thrift::concurrency::Mutex
DEFAULT_INITIALIZER	concurrency/StdMutex.cpp	/^void Mutex::DEFAULT_INITIALIZER(void* arg) {$/;"	f	class:apache::thrift::concurrency::Mutex
DEFAULT_IO_THREADS	server/TNonblockingServer.h	/^  static const int DEFAULT_IO_THREADS = 1;$/;"	m	class:apache::thrift::server::TNonblockingServer
DEFAULT_MAX_CORRUPTED_EVENTS	transport/TFileTransport.h	/^  static const uint32_t DEFAULT_MAX_CORRUPTED_EVENTS = 0;$/;"	m	class:apache::thrift::transport::TFileTransport
DEFAULT_MAX_EVENT_SIZE	transport/TFileTransport.h	/^  static const uint32_t DEFAULT_MAX_EVENT_SIZE = 0;$/;"	m	class:apache::thrift::transport::TFileTransport
DEFAULT_MAX_FRAME_SIZE	transport/TBufferTransports.h	/^  static const int DEFAULT_MAX_FRAME_SIZE = 256 * 1024 * 1024;$/;"	m	class:apache::thrift::transport::TFramedTransport
DEFAULT_READ_BUFF_SIZE	transport/TFileTransport.h	/^  static const uint32_t DEFAULT_READ_BUFF_SIZE = 1 * 1024 * 1024;$/;"	m	class:apache::thrift::transport::TFileTransport
DEFAULT_READ_TIMEOUT_MS	transport/TFileTransport.h	/^  static const int32_t DEFAULT_READ_TIMEOUT_MS = 200;$/;"	m	class:apache::thrift::transport::TFileTransport
DEFAULT_RECURSION_LIMIT	protocol/TProtocol.h	/^static const uint32_t DEFAULT_RECURSION_LIMIT = 64;$/;"	m	namespace:apache::thrift::protocol
DEFAULT_STRING_LIMIT	protocol/TDebugProtocol.h	/^  static const int32_t DEFAULT_STRING_LIMIT = 256;$/;"	m	class:apache::thrift::protocol::TDebugProtocol
DEFAULT_STRING_PREFIX_SIZE	protocol/TDebugProtocol.h	/^  static const int32_t DEFAULT_STRING_PREFIX_SIZE = 16;$/;"	m	class:apache::thrift::protocol::TDebugProtocol
DEFAULT_URBUF_SIZE	transport/TZlibTransport.h	/^  static const int DEFAULT_URBUF_SIZE = 128;$/;"	m	class:apache::thrift::transport::TZlibTransport
DEFAULT_UWBUF_SIZE	transport/TZlibTransport.h	/^  static const int DEFAULT_UWBUF_SIZE = 128;$/;"	m	class:apache::thrift::transport::TZlibTransport
DEFAULT_WRITER_THREAD_SLEEP_TIME_US	transport/TFileTransport.h	/^  static const uint32_t DEFAULT_WRITER_THREAD_SLEEP_TIME_US = 60 * 1000 * 1000;$/;"	m	class:apache::thrift::transport::TFileTransport
DELTA_EPOCH_IN_MICROSECS	windows/GetTimeOfDay.cpp	/^#define DELTA_EPOCH_IN_MICROSECS /;"	d	file:
DENY	transport/TSSLSocket.h	/^    DENY = -1, \/\/ deny access$/;"	e	enum:apache::thrift::transport::AccessManager::Decision
DEPTH_LIMIT	protocol/TProtocolException.h	/^    DEPTH_LIMIT = 6$/;"	e	enum:apache::thrift::protocol::TProtocolException::TProtocolExceptionType
Decision	transport/TSSLSocket.h	/^  enum Decision {$/;"	g	class:apache::thrift::transport::AccessManager
Decision	transport/TSSLSocket.h	/^typedef AccessManager::Decision Decision;$/;"	t	namespace:apache::thrift::transport
DefaultClientAccessManager	transport/TSSLSocket.h	/^class DefaultClientAccessManager : public AccessManager {$/;"	c	namespace:apache::thrift::transport
Dispatcher	concurrency/TimerManager.cpp	/^  Dispatcher(TimerManager* manager) : manager_(manager) {}$/;"	f	class:apache::thrift::concurrency::TimerManager::Dispatcher
Dispatcher	concurrency/TimerManager.cpp	/^class TimerManager::Dispatcher : public Runnable {$/;"	c	class:apache::thrift::concurrency::TimerManager	file:
END_OF_FILE	transport/TTransportException.h	/^    END_OF_FILE = 3,$/;"	e	enum:apache::thrift::transport::TTransportException::TTransportExceptionType
EXECUTING	concurrency/ThreadManager.cpp	/^  enum STATE { WAITING, EXECUTING, CANCELLED, COMPLETE };$/;"	e	enum:apache::thrift::concurrency::ThreadManager::Task::STATE	file:
EXECUTING	concurrency/TimerManager.cpp	/^  enum STATE { WAITING, EXECUTING, CANCELLED, COMPLETE };$/;"	e	enum:apache::thrift::concurrency::TimerManager::Task::STATE	file:
ExpireCallback	concurrency/ThreadManager.h	/^  typedef apache::thrift::stdcxx::function<void(boost::shared_ptr<Runnable>)> ExpireCallback;$/;"	t	class:apache::thrift::concurrency::ThreadManager
FIFO	concurrency/PosixThreadFactory.h	/^  enum POLICY { OTHER, FIFO, ROUND_ROBIN };$/;"	e	enum:apache::thrift::concurrency::PosixThreadFactory::POLICY
FacebookServiceClient	gen-cpp-fb-s/FacebookService.h	/^  FacebookServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {$/;"	f	class:facebook::fb303::FacebookServiceClient
FacebookServiceClient	gen-cpp-fb-s/FacebookService.h	/^  FacebookServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {$/;"	f	class:facebook::fb303::FacebookServiceClient
FacebookServiceClient	gen-cpp-fb-s/FacebookService.h	/^class FacebookServiceClient : virtual public FacebookServiceIf {$/;"	c	namespace:facebook::fb303
FacebookServiceClient	gen-cpp-fb/FacebookService.h	/^  FacebookServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {$/;"	f	class:facebook::fb303::FacebookServiceClient
FacebookServiceClient	gen-cpp-fb/FacebookService.h	/^  FacebookServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {$/;"	f	class:facebook::fb303::FacebookServiceClient
FacebookServiceClient	gen-cpp-fb/FacebookService.h	/^class FacebookServiceClient : virtual public FacebookServiceIf {$/;"	c	namespace:facebook::fb303
FacebookServiceConcurrentClient	gen-cpp-fb-s/FacebookService.h	/^  FacebookServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
FacebookServiceConcurrentClient	gen-cpp-fb-s/FacebookService.h	/^  FacebookServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
FacebookServiceConcurrentClient	gen-cpp-fb-s/FacebookService.h	/^class FacebookServiceConcurrentClient : virtual public FacebookServiceIf {$/;"	c	namespace:facebook::fb303
FacebookServiceConcurrentClient	gen-cpp-fb/FacebookService.h	/^  FacebookServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
FacebookServiceConcurrentClient	gen-cpp-fb/FacebookService.h	/^  FacebookServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
FacebookServiceConcurrentClient	gen-cpp-fb/FacebookService.h	/^class FacebookServiceConcurrentClient : virtual public FacebookServiceIf {$/;"	c	namespace:facebook::fb303
FacebookServiceHandler	gen-cpp-fb-s/FacebookService_server.skeleton.cpp	/^  FacebookServiceHandler() {$/;"	f	class:FacebookServiceHandler
FacebookServiceHandler	gen-cpp-fb-s/FacebookService_server.skeleton.cpp	/^class FacebookServiceHandler : virtual public FacebookServiceIf {$/;"	c	file:
FacebookServiceHandler	gen-cpp-fb/FacebookService_server.skeleton.cpp	/^  FacebookServiceHandler() {$/;"	f	class:FacebookServiceHandler
FacebookServiceHandler	gen-cpp-fb/FacebookService_server.skeleton.cpp	/^class FacebookServiceHandler : virtual public FacebookServiceIf {$/;"	c	file:
FacebookServiceIf	gen-cpp-fb-s/FacebookService.h	/^class FacebookServiceIf {$/;"	c	namespace:facebook::fb303
FacebookServiceIf	gen-cpp-fb/FacebookService.h	/^class FacebookServiceIf {$/;"	c	namespace:facebook::fb303
FacebookServiceIfFactory	gen-cpp-fb-s/FacebookService.h	/^class FacebookServiceIfFactory {$/;"	c	namespace:facebook::fb303
FacebookServiceIfFactory	gen-cpp-fb/FacebookService.h	/^class FacebookServiceIfFactory {$/;"	c	namespace:facebook::fb303
FacebookServiceIfSingletonFactory	gen-cpp-fb-s/FacebookService.h	/^  FacebookServiceIfSingletonFactory(const boost::shared_ptr<FacebookServiceIf>& iface) : iface_(iface) {}$/;"	f	class:facebook::fb303::FacebookServiceIfSingletonFactory
FacebookServiceIfSingletonFactory	gen-cpp-fb-s/FacebookService.h	/^class FacebookServiceIfSingletonFactory : virtual public FacebookServiceIfFactory {$/;"	c	namespace:facebook::fb303
FacebookServiceIfSingletonFactory	gen-cpp-fb/FacebookService.h	/^  FacebookServiceIfSingletonFactory(const boost::shared_ptr<FacebookServiceIf>& iface) : iface_(iface) {}$/;"	f	class:facebook::fb303::FacebookServiceIfSingletonFactory
FacebookServiceIfSingletonFactory	gen-cpp-fb/FacebookService.h	/^class FacebookServiceIfSingletonFactory : virtual public FacebookServiceIfFactory {$/;"	c	namespace:facebook::fb303
FacebookServiceMultiface	gen-cpp-fb-s/FacebookService.h	/^  FacebookServiceMultiface() {}$/;"	f	class:facebook::fb303::FacebookServiceMultiface
FacebookServiceMultiface	gen-cpp-fb-s/FacebookService.h	/^  FacebookServiceMultiface(std::vector<boost::shared_ptr<FacebookServiceIf> >& ifaces) : ifaces_(ifaces) {$/;"	f	class:facebook::fb303::FacebookServiceMultiface
FacebookServiceMultiface	gen-cpp-fb-s/FacebookService.h	/^class FacebookServiceMultiface : virtual public FacebookServiceIf {$/;"	c	namespace:facebook::fb303
FacebookServiceMultiface	gen-cpp-fb/FacebookService.h	/^  FacebookServiceMultiface() {}$/;"	f	class:facebook::fb303::FacebookServiceMultiface
FacebookServiceMultiface	gen-cpp-fb/FacebookService.h	/^  FacebookServiceMultiface(std::vector<boost::shared_ptr<FacebookServiceIf> >& ifaces) : ifaces_(ifaces) {$/;"	f	class:facebook::fb303::FacebookServiceMultiface
FacebookServiceMultiface	gen-cpp-fb/FacebookService.h	/^class FacebookServiceMultiface : virtual public FacebookServiceIf {$/;"	c	namespace:facebook::fb303
FacebookServiceNull	gen-cpp-fb-s/FacebookService.h	/^class FacebookServiceNull : virtual public FacebookServiceIf {$/;"	c	namespace:facebook::fb303
FacebookServiceNull	gen-cpp-fb/FacebookService.h	/^class FacebookServiceNull : virtual public FacebookServiceIf {$/;"	c	namespace:facebook::fb303
FacebookServiceProcessor	gen-cpp-fb-s/FacebookService.h	/^  FacebookServiceProcessor(boost::shared_ptr<FacebookServiceIf> iface) :$/;"	f	class:facebook::fb303::FacebookServiceProcessor
FacebookServiceProcessor	gen-cpp-fb-s/FacebookService.h	/^class FacebookServiceProcessor : public ::apache::thrift::TDispatchProcessor {$/;"	c	namespace:facebook::fb303
FacebookServiceProcessor	gen-cpp-fb/FacebookService.h	/^  FacebookServiceProcessor(boost::shared_ptr<FacebookServiceIf> iface) :$/;"	f	class:facebook::fb303::FacebookServiceProcessor
FacebookServiceProcessor	gen-cpp-fb/FacebookService.h	/^class FacebookServiceProcessor : public ::apache::thrift::TDispatchProcessor {$/;"	c	namespace:facebook::fb303
FacebookServiceProcessorFactory	gen-cpp-fb-s/FacebookService.h	/^  FacebookServiceProcessorFactory(const ::boost::shared_ptr< FacebookServiceIfFactory >& handlerFactory) :$/;"	f	class:facebook::fb303::FacebookServiceProcessorFactory
FacebookServiceProcessorFactory	gen-cpp-fb-s/FacebookService.h	/^class FacebookServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {$/;"	c	namespace:facebook::fb303
FacebookServiceProcessorFactory	gen-cpp-fb/FacebookService.h	/^  FacebookServiceProcessorFactory(const ::boost::shared_ptr< FacebookServiceIfFactory >& handlerFactory) :$/;"	f	class:facebook::fb303::FacebookServiceProcessorFactory
FacebookServiceProcessorFactory	gen-cpp-fb/FacebookService.h	/^class FacebookServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {$/;"	c	namespace:facebook::fb303
FacebookService_H	gen-cpp-fb-s/FacebookService.h	/^#define FacebookService_H$/;"	d
FacebookService_H	gen-cpp-fb/FacebookService.h	/^#define FacebookService_H$/;"	d
FacebookService_aliveSince_args	gen-cpp-fb/FacebookService.h	/^  FacebookService_aliveSince_args() {$/;"	f	class:facebook::fb303::FacebookService_aliveSince_args
FacebookService_aliveSince_args	gen-cpp-fb/FacebookService.h	/^class FacebookService_aliveSince_args {$/;"	c	namespace:facebook::fb303
FacebookService_aliveSince_pargs	gen-cpp-fb/FacebookService.h	/^class FacebookService_aliveSince_pargs {$/;"	c	namespace:facebook::fb303
FacebookService_aliveSince_presult	gen-cpp-fb/FacebookService.h	/^class FacebookService_aliveSince_presult {$/;"	c	namespace:facebook::fb303
FacebookService_aliveSince_result	gen-cpp-fb/FacebookService.h	/^  FacebookService_aliveSince_result() : success(0) {$/;"	f	class:facebook::fb303::FacebookService_aliveSince_result
FacebookService_aliveSince_result	gen-cpp-fb/FacebookService.h	/^class FacebookService_aliveSince_result {$/;"	c	namespace:facebook::fb303
FacebookService_getCounter_args	gen-cpp-fb/FacebookService.h	/^  FacebookService_getCounter_args() : key() {$/;"	f	class:facebook::fb303::FacebookService_getCounter_args
FacebookService_getCounter_args	gen-cpp-fb/FacebookService.h	/^class FacebookService_getCounter_args {$/;"	c	namespace:facebook::fb303
FacebookService_getCounter_pargs	gen-cpp-fb/FacebookService.h	/^class FacebookService_getCounter_pargs {$/;"	c	namespace:facebook::fb303
FacebookService_getCounter_presult	gen-cpp-fb/FacebookService.h	/^class FacebookService_getCounter_presult {$/;"	c	namespace:facebook::fb303
FacebookService_getCounter_result	gen-cpp-fb/FacebookService.h	/^  FacebookService_getCounter_result() : success(0) {$/;"	f	class:facebook::fb303::FacebookService_getCounter_result
FacebookService_getCounter_result	gen-cpp-fb/FacebookService.h	/^class FacebookService_getCounter_result {$/;"	c	namespace:facebook::fb303
FacebookService_getCounters_args	gen-cpp-fb/FacebookService.h	/^  FacebookService_getCounters_args() {$/;"	f	class:facebook::fb303::FacebookService_getCounters_args
FacebookService_getCounters_args	gen-cpp-fb/FacebookService.h	/^class FacebookService_getCounters_args {$/;"	c	namespace:facebook::fb303
FacebookService_getCounters_pargs	gen-cpp-fb/FacebookService.h	/^class FacebookService_getCounters_pargs {$/;"	c	namespace:facebook::fb303
FacebookService_getCounters_presult	gen-cpp-fb/FacebookService.h	/^class FacebookService_getCounters_presult {$/;"	c	namespace:facebook::fb303
FacebookService_getCounters_result	gen-cpp-fb/FacebookService.h	/^  FacebookService_getCounters_result() {$/;"	f	class:facebook::fb303::FacebookService_getCounters_result
FacebookService_getCounters_result	gen-cpp-fb/FacebookService.h	/^class FacebookService_getCounters_result {$/;"	c	namespace:facebook::fb303
FacebookService_getCpuProfile_args	gen-cpp-fb/FacebookService.h	/^  FacebookService_getCpuProfile_args() : profileDurationInSec(0) {$/;"	f	class:facebook::fb303::FacebookService_getCpuProfile_args
FacebookService_getCpuProfile_args	gen-cpp-fb/FacebookService.h	/^class FacebookService_getCpuProfile_args {$/;"	c	namespace:facebook::fb303
FacebookService_getCpuProfile_pargs	gen-cpp-fb/FacebookService.h	/^class FacebookService_getCpuProfile_pargs {$/;"	c	namespace:facebook::fb303
FacebookService_getCpuProfile_presult	gen-cpp-fb/FacebookService.h	/^class FacebookService_getCpuProfile_presult {$/;"	c	namespace:facebook::fb303
FacebookService_getCpuProfile_result	gen-cpp-fb/FacebookService.h	/^  FacebookService_getCpuProfile_result() : success() {$/;"	f	class:facebook::fb303::FacebookService_getCpuProfile_result
FacebookService_getCpuProfile_result	gen-cpp-fb/FacebookService.h	/^class FacebookService_getCpuProfile_result {$/;"	c	namespace:facebook::fb303
FacebookService_getName_args	gen-cpp-fb-s/FacebookService.h	/^  FacebookService_getName_args() {$/;"	f	class:facebook::fb303::FacebookService_getName_args
FacebookService_getName_args	gen-cpp-fb-s/FacebookService.h	/^class FacebookService_getName_args {$/;"	c	namespace:facebook::fb303
FacebookService_getName_args	gen-cpp-fb/FacebookService.h	/^  FacebookService_getName_args() {$/;"	f	class:facebook::fb303::FacebookService_getName_args
FacebookService_getName_args	gen-cpp-fb/FacebookService.h	/^class FacebookService_getName_args {$/;"	c	namespace:facebook::fb303
FacebookService_getName_pargs	gen-cpp-fb-s/FacebookService.h	/^class FacebookService_getName_pargs {$/;"	c	namespace:facebook::fb303
FacebookService_getName_pargs	gen-cpp-fb/FacebookService.h	/^class FacebookService_getName_pargs {$/;"	c	namespace:facebook::fb303
FacebookService_getName_presult	gen-cpp-fb-s/FacebookService.h	/^class FacebookService_getName_presult {$/;"	c	namespace:facebook::fb303
FacebookService_getName_presult	gen-cpp-fb/FacebookService.h	/^class FacebookService_getName_presult {$/;"	c	namespace:facebook::fb303
FacebookService_getName_result	gen-cpp-fb-s/FacebookService.h	/^  FacebookService_getName_result() : success() {$/;"	f	class:facebook::fb303::FacebookService_getName_result
FacebookService_getName_result	gen-cpp-fb-s/FacebookService.h	/^class FacebookService_getName_result {$/;"	c	namespace:facebook::fb303
FacebookService_getName_result	gen-cpp-fb/FacebookService.h	/^  FacebookService_getName_result() : success() {$/;"	f	class:facebook::fb303::FacebookService_getName_result
FacebookService_getName_result	gen-cpp-fb/FacebookService.h	/^class FacebookService_getName_result {$/;"	c	namespace:facebook::fb303
FacebookService_getOption_args	gen-cpp-fb/FacebookService.h	/^  FacebookService_getOption_args() : key() {$/;"	f	class:facebook::fb303::FacebookService_getOption_args
FacebookService_getOption_args	gen-cpp-fb/FacebookService.h	/^class FacebookService_getOption_args {$/;"	c	namespace:facebook::fb303
FacebookService_getOption_pargs	gen-cpp-fb/FacebookService.h	/^class FacebookService_getOption_pargs {$/;"	c	namespace:facebook::fb303
FacebookService_getOption_presult	gen-cpp-fb/FacebookService.h	/^class FacebookService_getOption_presult {$/;"	c	namespace:facebook::fb303
FacebookService_getOption_result	gen-cpp-fb/FacebookService.h	/^  FacebookService_getOption_result() : success() {$/;"	f	class:facebook::fb303::FacebookService_getOption_result
FacebookService_getOption_result	gen-cpp-fb/FacebookService.h	/^class FacebookService_getOption_result {$/;"	c	namespace:facebook::fb303
FacebookService_getOptions_args	gen-cpp-fb/FacebookService.h	/^  FacebookService_getOptions_args() {$/;"	f	class:facebook::fb303::FacebookService_getOptions_args
FacebookService_getOptions_args	gen-cpp-fb/FacebookService.h	/^class FacebookService_getOptions_args {$/;"	c	namespace:facebook::fb303
FacebookService_getOptions_pargs	gen-cpp-fb/FacebookService.h	/^class FacebookService_getOptions_pargs {$/;"	c	namespace:facebook::fb303
FacebookService_getOptions_presult	gen-cpp-fb/FacebookService.h	/^class FacebookService_getOptions_presult {$/;"	c	namespace:facebook::fb303
FacebookService_getOptions_result	gen-cpp-fb/FacebookService.h	/^  FacebookService_getOptions_result() {$/;"	f	class:facebook::fb303::FacebookService_getOptions_result
FacebookService_getOptions_result	gen-cpp-fb/FacebookService.h	/^class FacebookService_getOptions_result {$/;"	c	namespace:facebook::fb303
FacebookService_getStatusDetails_args	gen-cpp-fb/FacebookService.h	/^  FacebookService_getStatusDetails_args() {$/;"	f	class:facebook::fb303::FacebookService_getStatusDetails_args
FacebookService_getStatusDetails_args	gen-cpp-fb/FacebookService.h	/^class FacebookService_getStatusDetails_args {$/;"	c	namespace:facebook::fb303
FacebookService_getStatusDetails_pargs	gen-cpp-fb/FacebookService.h	/^class FacebookService_getStatusDetails_pargs {$/;"	c	namespace:facebook::fb303
FacebookService_getStatusDetails_presult	gen-cpp-fb/FacebookService.h	/^class FacebookService_getStatusDetails_presult {$/;"	c	namespace:facebook::fb303
FacebookService_getStatusDetails_result	gen-cpp-fb/FacebookService.h	/^  FacebookService_getStatusDetails_result() : success() {$/;"	f	class:facebook::fb303::FacebookService_getStatusDetails_result
FacebookService_getStatusDetails_result	gen-cpp-fb/FacebookService.h	/^class FacebookService_getStatusDetails_result {$/;"	c	namespace:facebook::fb303
FacebookService_getStatus_args	gen-cpp-fb/FacebookService.h	/^  FacebookService_getStatus_args() {$/;"	f	class:facebook::fb303::FacebookService_getStatus_args
FacebookService_getStatus_args	gen-cpp-fb/FacebookService.h	/^class FacebookService_getStatus_args {$/;"	c	namespace:facebook::fb303
FacebookService_getStatus_pargs	gen-cpp-fb/FacebookService.h	/^class FacebookService_getStatus_pargs {$/;"	c	namespace:facebook::fb303
FacebookService_getStatus_presult	gen-cpp-fb/FacebookService.h	/^class FacebookService_getStatus_presult {$/;"	c	namespace:facebook::fb303
FacebookService_getStatus_result	gen-cpp-fb/FacebookService.h	/^  FacebookService_getStatus_result() : success((fb_status::type)0) {$/;"	f	class:facebook::fb303::FacebookService_getStatus_result
FacebookService_getStatus_result	gen-cpp-fb/FacebookService.h	/^class FacebookService_getStatus_result {$/;"	c	namespace:facebook::fb303
FacebookService_getVersion_args	gen-cpp-fb/FacebookService.h	/^  FacebookService_getVersion_args() {$/;"	f	class:facebook::fb303::FacebookService_getVersion_args
FacebookService_getVersion_args	gen-cpp-fb/FacebookService.h	/^class FacebookService_getVersion_args {$/;"	c	namespace:facebook::fb303
FacebookService_getVersion_pargs	gen-cpp-fb/FacebookService.h	/^class FacebookService_getVersion_pargs {$/;"	c	namespace:facebook::fb303
FacebookService_getVersion_presult	gen-cpp-fb/FacebookService.h	/^class FacebookService_getVersion_presult {$/;"	c	namespace:facebook::fb303
FacebookService_getVersion_result	gen-cpp-fb/FacebookService.h	/^  FacebookService_getVersion_result() : success() {$/;"	f	class:facebook::fb303::FacebookService_getVersion_result
FacebookService_getVersion_result	gen-cpp-fb/FacebookService.h	/^class FacebookService_getVersion_result {$/;"	c	namespace:facebook::fb303
FacebookService_reinitialize_args	gen-cpp-fb/FacebookService.h	/^  FacebookService_reinitialize_args() {$/;"	f	class:facebook::fb303::FacebookService_reinitialize_args
FacebookService_reinitialize_args	gen-cpp-fb/FacebookService.h	/^class FacebookService_reinitialize_args {$/;"	c	namespace:facebook::fb303
FacebookService_reinitialize_pargs	gen-cpp-fb/FacebookService.h	/^class FacebookService_reinitialize_pargs {$/;"	c	namespace:facebook::fb303
FacebookService_setOption_args	gen-cpp-fb-s/FacebookService.h	/^  FacebookService_setOption_args() : key(), value() {$/;"	f	class:facebook::fb303::FacebookService_setOption_args
FacebookService_setOption_args	gen-cpp-fb-s/FacebookService.h	/^class FacebookService_setOption_args {$/;"	c	namespace:facebook::fb303
FacebookService_setOption_args	gen-cpp-fb/FacebookService.h	/^  FacebookService_setOption_args() : key(), value() {$/;"	f	class:facebook::fb303::FacebookService_setOption_args
FacebookService_setOption_args	gen-cpp-fb/FacebookService.h	/^class FacebookService_setOption_args {$/;"	c	namespace:facebook::fb303
FacebookService_setOption_pargs	gen-cpp-fb-s/FacebookService.h	/^class FacebookService_setOption_pargs {$/;"	c	namespace:facebook::fb303
FacebookService_setOption_pargs	gen-cpp-fb/FacebookService.h	/^class FacebookService_setOption_pargs {$/;"	c	namespace:facebook::fb303
FacebookService_setOption_presult	gen-cpp-fb-s/FacebookService.h	/^class FacebookService_setOption_presult {$/;"	c	namespace:facebook::fb303
FacebookService_setOption_presult	gen-cpp-fb/FacebookService.h	/^class FacebookService_setOption_presult {$/;"	c	namespace:facebook::fb303
FacebookService_setOption_result	gen-cpp-fb-s/FacebookService.h	/^  FacebookService_setOption_result() {$/;"	f	class:facebook::fb303::FacebookService_setOption_result
FacebookService_setOption_result	gen-cpp-fb-s/FacebookService.h	/^class FacebookService_setOption_result {$/;"	c	namespace:facebook::fb303
FacebookService_setOption_result	gen-cpp-fb/FacebookService.h	/^  FacebookService_setOption_result() {$/;"	f	class:facebook::fb303::FacebookService_setOption_result
FacebookService_setOption_result	gen-cpp-fb/FacebookService.h	/^class FacebookService_setOption_result {$/;"	c	namespace:facebook::fb303
FacebookService_shutdown_args	gen-cpp-fb-s/FacebookService.h	/^  FacebookService_shutdown_args() {$/;"	f	class:facebook::fb303::FacebookService_shutdown_args
FacebookService_shutdown_args	gen-cpp-fb-s/FacebookService.h	/^class FacebookService_shutdown_args {$/;"	c	namespace:facebook::fb303
FacebookService_shutdown_args	gen-cpp-fb/FacebookService.h	/^  FacebookService_shutdown_args() {$/;"	f	class:facebook::fb303::FacebookService_shutdown_args
FacebookService_shutdown_args	gen-cpp-fb/FacebookService.h	/^class FacebookService_shutdown_args {$/;"	c	namespace:facebook::fb303
FacebookService_shutdown_pargs	gen-cpp-fb-s/FacebookService.h	/^class FacebookService_shutdown_pargs {$/;"	c	namespace:facebook::fb303
FacebookService_shutdown_pargs	gen-cpp-fb/FacebookService.h	/^class FacebookService_shutdown_pargs {$/;"	c	namespace:facebook::fb303
FunctionRunner	concurrency/FunctionRunner.h	/^  FunctionRunner(PthreadFuncPtr func, void* arg)$/;"	f	class:apache::thrift::concurrency::FunctionRunner
FunctionRunner	concurrency/FunctionRunner.h	/^  FunctionRunner(const BoolFunc& cob, int intervalMs) : repFunc_(cob), intervalMs_(intervalMs) {}$/;"	f	class:apache::thrift::concurrency::FunctionRunner
FunctionRunner	concurrency/FunctionRunner.h	/^  FunctionRunner(const VoidFunc& cob) : func_(cob) {}$/;"	f	class:apache::thrift::concurrency::FunctionRunner
FunctionRunner	concurrency/FunctionRunner.h	/^class FunctionRunner : public Runnable {$/;"	c	namespace:apache::thrift::concurrency
GlobalOutput	TOutput.cpp	/^TOutput GlobalOutput;$/;"	m	namespace:apache::thrift	file:
Guard	concurrency/Mutex.h	/^  Guard(const Mutex& value, int64_t timeout = 0) : mutex_(&value) {$/;"	f	class:apache::thrift::concurrency::Guard
Guard	concurrency/Mutex.h	/^class Guard : boost::noncopyable {$/;"	c	namespace:apache::thrift::concurrency
HAVE_ALARM	config.h	/^#define HAVE_ALARM /;"	d
HAVE_ALLOCA	config.h	/^#define HAVE_ALLOCA /;"	d
HAVE_ALLOCA_H	config.h	/^#define HAVE_ALLOCA_H /;"	d
HAVE_ARPA_INET_H	config.h	/^#define HAVE_ARPA_INET_H /;"	d
HAVE_BOOST	config.h	/^#define HAVE_BOOST /;"	d
HAVE_BZERO	config.h	/^#define HAVE_BZERO /;"	d
HAVE_CLOCK_GETTIME	config.h	/^#define HAVE_CLOCK_GETTIME /;"	d
HAVE_CXX11	config.h	/^#define HAVE_CXX11 /;"	d
HAVE_DECL_STRERROR_R	config.h	/^#define HAVE_DECL_STRERROR_R /;"	d
HAVE_DLFCN_H	config.h	/^#define HAVE_DLFCN_H /;"	d
HAVE_FCNTL_H	config.h	/^#define HAVE_FCNTL_H /;"	d
HAVE_FORK	config.h	/^#define HAVE_FORK /;"	d
HAVE_FTRUNCATE	config.h	/^#define HAVE_FTRUNCATE /;"	d
HAVE_GETHOSTBYNAME	config.h	/^#define HAVE_GETHOSTBYNAME /;"	d
HAVE_GETTIMEOFDAY	config.h	/^#define HAVE_GETTIMEOFDAY /;"	d
HAVE_GETTIMEOFDAY	windows/config.h	/^#define HAVE_GETTIMEOFDAY /;"	d
HAVE_INET_NTOA	config.h	/^#define HAVE_INET_NTOA /;"	d
HAVE_INTTYPES_H	config.h	/^#define HAVE_INTTYPES_H /;"	d
HAVE_LIBPTHREAD	config.h	/^#define HAVE_LIBPTHREAD /;"	d
HAVE_LIMITS_H	config.h	/^#define HAVE_LIMITS_H /;"	d
HAVE_MALLOC	config.h	/^#define HAVE_MALLOC /;"	d
HAVE_MEMMOVE	config.h	/^#define HAVE_MEMMOVE /;"	d
HAVE_MEMORY_H	config.h	/^#define HAVE_MEMORY_H /;"	d
HAVE_MEMSET	config.h	/^#define HAVE_MEMSET /;"	d
HAVE_MKDIR	config.h	/^#define HAVE_MKDIR /;"	d
HAVE_NETDB_H	config.h	/^#define HAVE_NETDB_H /;"	d
HAVE_NETINET_IN_H	config.h	/^#define HAVE_NETINET_IN_H /;"	d
HAVE_OPENSSL_RAND_H	config.h	/^#define HAVE_OPENSSL_RAND_H /;"	d
HAVE_OPENSSL_SSL_H	config.h	/^#define HAVE_OPENSSL_SSL_H /;"	d
HAVE_OPENSSL_X509V3_H	config.h	/^#define HAVE_OPENSSL_X509V3_H /;"	d
HAVE_POW	config.h	/^#define HAVE_POW /;"	d
HAVE_PTHREAD_H	config.h	/^#define HAVE_PTHREAD_H /;"	d
HAVE_PTRDIFF_T	config.h	/^#define HAVE_PTRDIFF_T /;"	d
HAVE_REALLOC	config.h	/^#define HAVE_REALLOC /;"	d
HAVE_REALPATH	config.h	/^#define HAVE_REALPATH /;"	d
HAVE_SCHED_GET_PRIORITY_MAX	config.h	/^#define HAVE_SCHED_GET_PRIORITY_MAX /;"	d
HAVE_SCHED_GET_PRIORITY_MIN	config.h	/^#define HAVE_SCHED_GET_PRIORITY_MIN /;"	d
HAVE_SCHED_H	config.h	/^#define HAVE_SCHED_H /;"	d
HAVE_SELECT	config.h	/^#define HAVE_SELECT /;"	d
HAVE_SETLOCALE	config.h	/^#define HAVE_SETLOCALE /;"	d
HAVE_SOCKET	config.h	/^#define HAVE_SOCKET /;"	d
HAVE_SQRT	config.h	/^#define HAVE_SQRT /;"	d
HAVE_STDDEF_H	config.h	/^#define HAVE_STDDEF_H /;"	d
HAVE_STDINT_H	config.h	/^#define HAVE_STDINT_H /;"	d
HAVE_STDLIB_H	config.h	/^#define HAVE_STDLIB_H /;"	d
HAVE_STRCHR	config.h	/^#define HAVE_STRCHR /;"	d
HAVE_STRDUP	config.h	/^#define HAVE_STRDUP /;"	d
HAVE_STRERROR	config.h	/^#define HAVE_STRERROR /;"	d
HAVE_STRERROR_R	config.h	/^#define HAVE_STRERROR_R /;"	d
HAVE_STRFTIME	config.h	/^#define HAVE_STRFTIME /;"	d
HAVE_STRINGS_H	config.h	/^#define HAVE_STRINGS_H /;"	d
HAVE_STRING_H	config.h	/^#define HAVE_STRING_H /;"	d
HAVE_STRSTR	config.h	/^#define HAVE_STRSTR /;"	d
HAVE_STRTOL	config.h	/^#define HAVE_STRTOL /;"	d
HAVE_STRTOUL	config.h	/^#define HAVE_STRTOUL /;"	d
HAVE_SYS_PARAM_H	config.h	/^#define HAVE_SYS_PARAM_H /;"	d
HAVE_SYS_POLL_H	config.h	/^#define HAVE_SYS_POLL_H /;"	d
HAVE_SYS_RESOURCE_H	config.h	/^#define HAVE_SYS_RESOURCE_H /;"	d
HAVE_SYS_SELECT_H	config.h	/^#define HAVE_SYS_SELECT_H /;"	d
HAVE_SYS_SOCKET_H	config.h	/^#define HAVE_SYS_SOCKET_H /;"	d
HAVE_SYS_STAT_H	config.h	/^#define HAVE_SYS_STAT_H /;"	d
HAVE_SYS_STAT_H	windows/config.h	/^#define HAVE_SYS_STAT_H /;"	d
HAVE_SYS_TIME_H	config.h	/^#define HAVE_SYS_TIME_H /;"	d
HAVE_SYS_TYPES_H	config.h	/^#define HAVE_SYS_TYPES_H /;"	d
HAVE_SYS_UN_H	config.h	/^#define HAVE_SYS_UN_H /;"	d
HAVE_SYS_WAIT_H	config.h	/^#define HAVE_SYS_WAIT_H /;"	d
HAVE_UNISTD_H	config.h	/^#define HAVE_UNISTD_H /;"	d
HAVE_VFORK	config.h	/^#define HAVE_VFORK /;"	d
HAVE_VPRINTF	config.h	/^#define HAVE_VPRINTF /;"	d
HAVE_WCHAR_H	config.h	/^#define HAVE_WCHAR_H /;"	d
HAVE_WORKING_FORK	config.h	/^#define HAVE_WORKING_FORK /;"	d
HAVE_WORKING_VFORK	config.h	/^#define HAVE_WORKING_VFORK /;"	d
HAVE_ZLIB	config.h	/^#define HAVE_ZLIB /;"	d
HIGH	concurrency/PosixThreadFactory.h	/^    HIGH = 4,$/;"	e	enum:apache::thrift::concurrency::PosixThreadFactory::PRIORITY
HIGHER	concurrency/PosixThreadFactory.h	/^    HIGHER = 5,$/;"	e	enum:apache::thrift::concurrency::PosixThreadFactory::PRIORITY
HIGHEST	concurrency/PosixThreadFactory.h	/^    HIGHEST = 6,$/;"	e	enum:apache::thrift::concurrency::PosixThreadFactory::PRIORITY
HTTP_INTERNAL	async/TEvhttpServer.cpp	/^#define HTTP_INTERNAL /;"	d	file:
Handler	gen-cpp-fb-s/FacebookService.h	/^  typedef FacebookServiceIf Handler;$/;"	t	class:facebook::fb303::FacebookServiceIfFactory
Handler	gen-cpp-fb/FacebookService.h	/^  typedef FacebookServiceIf Handler;$/;"	t	class:facebook::fb303::FacebookServiceIfFactory
Hash	VirtualProfiling.cpp	/^  class Hash {$/;"	c	class:apache::thrift::Key	file:
IDLE_READ_BUFFER_LIMIT	server/TNonblockingServer.h	/^  static const int IDLE_READ_BUFFER_LIMIT = 1024;$/;"	m	class:apache::thrift::server::TNonblockingServer
IDLE_WRITE_BUFFER_LIMIT	server/TNonblockingServer.h	/^  static const int IDLE_WRITE_BUFFER_LIMIT = 1024;$/;"	m	class:apache::thrift::server::TNonblockingServer
INCREMENT	concurrency/PosixThreadFactory.h	/^    INCREMENT = 7,$/;"	e	enum:apache::thrift::concurrency::PosixThreadFactory::PRIORITY
INTERNAL_ERROR	TApplicationException.h	/^    INTERNAL_ERROR = 6,$/;"	e	enum:apache::thrift::TApplicationException::TApplicationExceptionType
INTERNAL_ERROR	transport/TTransportException.h	/^    INTERNAL_ERROR = 7$/;"	e	enum:apache::thrift::transport::TTransportException::TTransportExceptionType
INTERRUPTED	transport/TTransportException.h	/^    INTERRUPTED = 4,$/;"	e	enum:apache::thrift::transport::TTransportException::TTransportExceptionType
INVALID_DATA	protocol/TProtocolException.h	/^    INVALID_DATA = 1,$/;"	e	enum:apache::thrift::protocol::TProtocolException::TProtocolExceptionType
INVALID_MESSAGE_TYPE	TApplicationException.h	/^    INVALID_MESSAGE_TYPE = 2,$/;"	e	enum:apache::thrift::TApplicationException::TApplicationExceptionType
INVALID_PROTOCOL	TApplicationException.h	/^    INVALID_PROTOCOL = 9,$/;"	e	enum:apache::thrift::TApplicationException::TApplicationExceptionType
INVALID_TRANSFORM	TApplicationException.h	/^    INVALID_TRANSFORM = 8,$/;"	e	enum:apache::thrift::TApplicationException::TApplicationExceptionType
IllegalStateException	concurrency/Exception.h	/^  IllegalStateException() {}$/;"	f	class:apache::thrift::concurrency::IllegalStateException
IllegalStateException	concurrency/Exception.h	/^  IllegalStateException(const std::string& message) : TException(message) {}$/;"	f	class:apache::thrift::concurrency::IllegalStateException
IllegalStateException	concurrency/Exception.h	/^class IllegalStateException : public apache::thrift::TException {$/;"	c	namespace:apache::thrift::concurrency
Impl	concurrency/BoostMonitor.cpp	/^  Impl() : ownedMutex_(new Mutex()), mutex_(NULL) { init(ownedMutex_.get()); }$/;"	f	class:apache::thrift::concurrency::Monitor::Impl
Impl	concurrency/BoostMonitor.cpp	/^  Impl(Monitor* monitor) : mutex_(NULL) { init(&(monitor->mutex())); }$/;"	f	class:apache::thrift::concurrency::Monitor::Impl
Impl	concurrency/BoostMonitor.cpp	/^  Impl(Mutex* mutex) : mutex_(NULL) { init(mutex); }$/;"	f	class:apache::thrift::concurrency::Monitor::Impl
Impl	concurrency/BoostMonitor.cpp	/^class Monitor::Impl : public boost::condition_variable_any {$/;"	c	class:apache::thrift::concurrency::Monitor	file:
Impl	concurrency/BoostThreadFactory.cpp	/^  Impl(bool detached) : detached_(detached) {}$/;"	f	class:apache::thrift::concurrency::BoostThreadFactory::Impl
Impl	concurrency/BoostThreadFactory.cpp	/^class BoostThreadFactory::Impl {$/;"	c	class:apache::thrift::concurrency::BoostThreadFactory	file:
Impl	concurrency/Monitor.cpp	/^  Impl() : ownedMutex_(new Mutex()), mutex_(NULL), condInitialized_(false) {$/;"	f	class:apache::thrift::concurrency::Monitor::Impl
Impl	concurrency/Monitor.cpp	/^  Impl(Monitor* monitor) : mutex_(NULL), condInitialized_(false) { init(&(monitor->mutex())); }$/;"	f	class:apache::thrift::concurrency::Monitor::Impl
Impl	concurrency/Monitor.cpp	/^  Impl(Mutex* mutex) : mutex_(NULL), condInitialized_(false) { init(mutex); }$/;"	f	class:apache::thrift::concurrency::Monitor::Impl
Impl	concurrency/Monitor.cpp	/^class Monitor::Impl {$/;"	c	class:apache::thrift::concurrency::Monitor	file:
Impl	concurrency/PosixThreadFactory.cpp	/^  Impl(POLICY policy, PRIORITY priority, int stackSize, bool detached)$/;"	f	class:apache::thrift::concurrency::PosixThreadFactory::Impl
Impl	concurrency/PosixThreadFactory.cpp	/^class PosixThreadFactory::Impl {$/;"	c	class:apache::thrift::concurrency::PosixThreadFactory	file:
Impl	concurrency/StdMonitor.cpp	/^  Impl() : ownedMutex_(new Mutex()), conditionVariable_(), mutex_(NULL) { init(ownedMutex_.get()); }$/;"	f	class:apache::thrift::concurrency::Monitor::Impl
Impl	concurrency/StdMonitor.cpp	/^  Impl(Monitor* monitor) : ownedMutex_(), conditionVariable_(), mutex_(NULL) {$/;"	f	class:apache::thrift::concurrency::Monitor::Impl
Impl	concurrency/StdMonitor.cpp	/^  Impl(Mutex* mutex) : ownedMutex_(), conditionVariable_(), mutex_(NULL) { init(mutex); }$/;"	f	class:apache::thrift::concurrency::Monitor::Impl
Impl	concurrency/StdMonitor.cpp	/^class Monitor::Impl {$/;"	c	class:apache::thrift::concurrency::Monitor	file:
Impl	concurrency/StdThreadFactory.cpp	/^  Impl(bool detached) : detached_(detached) {}$/;"	f	class:apache::thrift::concurrency::StdThreadFactory::Impl
Impl	concurrency/StdThreadFactory.cpp	/^class StdThreadFactory::Impl {$/;"	c	class:apache::thrift::concurrency::StdThreadFactory	file:
Impl	concurrency/ThreadManager.cpp	/^  Impl()$/;"	f	class:apache::thrift::concurrency::ThreadManager::Impl
Impl	concurrency/ThreadManager.cpp	/^class ThreadManager::Impl : public ThreadManager {$/;"	c	class:apache::thrift::concurrency::ThreadManager	file:
Initializer	concurrency/Mutex.h	/^  typedef void (*Initializer)(void*);$/;"	t	class:apache::thrift::concurrency::Mutex
InvalidArgumentException	concurrency/Exception.h	/^class InvalidArgumentException : public apache::thrift::TException {};$/;"	c	namespace:apache::thrift::concurrency
JOINING	concurrency/ThreadManager.h	/^  enum STATE { UNINITIALIZED, STARTING, STARTED, JOINING, STOPPING, STOPPED };$/;"	e	enum:apache::thrift::concurrency::ThreadManager::STATE
JSONListContext	protocol/TJSONProtocol.cpp	/^  JSONListContext() : first_(true) {}$/;"	f	class:apache::thrift::protocol::JSONListContext
JSONListContext	protocol/TJSONProtocol.cpp	/^class JSONListContext : public TJSONContext {$/;"	c	namespace:apache::thrift::protocol	file:
JSONPairContext	protocol/TJSONProtocol.cpp	/^  JSONPairContext() : first_(true), colon_(true) {}$/;"	f	class:apache::thrift::protocol::JSONPairContext
JSONPairContext	protocol/TJSONProtocol.cpp	/^class JSONPairContext : public TJSONContext {$/;"	c	namespace:apache::thrift::protocol	file:
Key	VirtualProfiling.cpp	/^  Key(const Backtrace* bt, const std::type_info& type_info)$/;"	f	class:apache::thrift::Key
Key	VirtualProfiling.cpp	/^  Key(const Backtrace* bt, const std::type_info& type_info1, const std::type_info& type_info2)$/;"	f	class:apache::thrift::Key
Key	VirtualProfiling.cpp	/^  Key(const Key& k)$/;"	f	class:apache::thrift::Key
Key	VirtualProfiling.cpp	/^class Key {$/;"	c	namespace:apache::thrift	file:
LATEST	transport/TSSLSocket.h	/^  LATEST  = TLSv1_2$/;"	e	enum:apache::thrift::transport::SSLProtocol
LIBEVENT_VERSION_MAJOR	server/TNonblockingServer.h	/^#define LIBEVENT_VERSION_MAJOR /;"	d
LIBEVENT_VERSION_MINOR	server/TNonblockingServer.h	/^#define LIBEVENT_VERSION_MINOR /;"	d
LIBEVENT_VERSION_REL	server/TNonblockingServer.h	/^#define LIBEVENT_VERSION_REL /;"	d
LIST	protocol/TDebugProtocol.h	/^  enum write_state_t { UNINIT, STRUCT, LIST, SET, MAP_KEY, MAP_VALUE };$/;"	e	enum:apache::thrift::protocol::TDebugProtocol::write_state_t
LISTEN_BACKLOG	server/TNonblockingServer.h	/^  static const int LISTEN_BACKLOG = 1024;$/;"	m	class:apache::thrift::server::TNonblockingServer
LOGICAL_RIGHT_SHIFT	config.h	/^#define LOGICAL_RIGHT_SHIFT /;"	d
LOW	concurrency/PosixThreadFactory.h	/^    LOW = 2,$/;"	e	enum:apache::thrift::concurrency::PosixThreadFactory::PRIORITY
LOWER	concurrency/PosixThreadFactory.h	/^    LOWER = 1,$/;"	e	enum:apache::thrift::concurrency::PosixThreadFactory::PRIORITY
LOWEST	concurrency/PosixThreadFactory.h	/^    LOWEST = 0,$/;"	e	enum:apache::thrift::concurrency::PosixThreadFactory::PRIORITY
LT_OBJDIR	config.h	/^#define LT_OBJDIR /;"	d
LookaheadReader	protocol/TJSONProtocol.h	/^    LookaheadReader(TTransport& trans) : trans_(&trans), hasData_(false) {}$/;"	f	class:apache::thrift::protocol::TJSONProtocol::LookaheadReader
LookaheadReader	protocol/TJSONProtocol.h	/^  class LookaheadReader {$/;"	c	class:apache::thrift::protocol::TJSONProtocol
MAP_KEY	protocol/TDebugProtocol.h	/^  enum write_state_t { UNINIT, STRUCT, LIST, SET, MAP_KEY, MAP_VALUE };$/;"	e	enum:apache::thrift::protocol::TDebugProtocol::write_state_t
MAP_VALUE	protocol/TDebugProtocol.h	/^  enum write_state_t { UNINIT, STRUCT, LIST, SET, MAP_KEY, MAP_VALUE };$/;"	e	enum:apache::thrift::protocol::TDebugProtocol::write_state_t
MAX_ACTIVE_PROCESSORS	server/TNonblockingServer.h	/^  static const int MAX_ACTIVE_PROCESSORS = INT_MAX;$/;"	m	class:apache::thrift::server::TNonblockingServer
MAX_CONNECTIONS	server/TNonblockingServer.h	/^  static const int MAX_CONNECTIONS = INT_MAX;$/;"	m	class:apache::thrift::server::TNonblockingServer
MAX_FRAME_SIZE	server/TNonblockingServer.h	/^  static const int MAX_FRAME_SIZE = 256 * 1024 * 1024;$/;"	m	class:apache::thrift::server::TNonblockingServer
MAX_STACK_DEPTH	VirtualProfiling.cpp	/^static const unsigned int MAX_STACK_DEPTH = 15;$/;"	m	namespace:apache::thrift	file:
MB	concurrency/PosixThreadFactory.cpp	/^  static const int MB = 1024 * 1024;$/;"	m	class:apache::thrift::concurrency::PthreadThread	file:
MIN_DIRECT_DEFLATE_SIZE	transport/TZlibTransport.h	/^  static const uint32_t MIN_DIRECT_DEFLATE_SIZE = 32;$/;"	m	class:apache::thrift::transport::TZlibTransport
MISSING_RESULT	TApplicationException.h	/^    MISSING_RESULT = 5,$/;"	e	enum:apache::thrift::TApplicationException::TApplicationExceptionType
MONITOR_CACHE_SIZE	async/TConcurrentClientSyncInfo.h	/^  enum {MONITOR_CACHE_SIZE = 10};$/;"	e	enum:apache::thrift::async::TConcurrentClientSyncInfo::__anon1
MS_PER_S	concurrency/Util.h	/^  static const int64_t MS_PER_S = 1000LL;$/;"	m	class:apache::thrift::concurrency::Util
MemoryPolicy	transport/TBufferTransports.h	/^  enum MemoryPolicy { OBSERVE = 1, COPY = 2, TAKE_OWNERSHIP = 3 };$/;"	g	class:apache::thrift::transport::TMemoryBuffer
Monitor	concurrency/BoostMonitor.cpp	/^Monitor::Monitor() : impl_(new Monitor::Impl()) {$/;"	f	class:apache::thrift::concurrency::Monitor
Monitor	concurrency/BoostMonitor.cpp	/^Monitor::Monitor(Monitor* monitor) : impl_(new Monitor::Impl(monitor)) {$/;"	f	class:apache::thrift::concurrency::Monitor
Monitor	concurrency/BoostMonitor.cpp	/^Monitor::Monitor(Mutex* mutex) : impl_(new Monitor::Impl(mutex)) {$/;"	f	class:apache::thrift::concurrency::Monitor
Monitor	concurrency/Monitor.cpp	/^Monitor::Monitor() : impl_(new Monitor::Impl()) {$/;"	f	class:apache::thrift::concurrency::Monitor
Monitor	concurrency/Monitor.cpp	/^Monitor::Monitor(Monitor* monitor) : impl_(new Monitor::Impl(monitor)) {$/;"	f	class:apache::thrift::concurrency::Monitor
Monitor	concurrency/Monitor.cpp	/^Monitor::Monitor(Mutex* mutex) : impl_(new Monitor::Impl(mutex)) {$/;"	f	class:apache::thrift::concurrency::Monitor
Monitor	concurrency/Monitor.h	/^class Monitor : boost::noncopyable {$/;"	c	namespace:apache::thrift::concurrency
Monitor	concurrency/StdMonitor.cpp	/^Monitor::Monitor() : impl_(new Monitor::Impl()) {$/;"	f	class:apache::thrift::concurrency::Monitor
Monitor	concurrency/StdMonitor.cpp	/^Monitor::Monitor(Monitor* monitor) : impl_(new Monitor::Impl(monitor)) {$/;"	f	class:apache::thrift::concurrency::Monitor
Monitor	concurrency/StdMonitor.cpp	/^Monitor::Monitor(Mutex* mutex) : impl_(new Monitor::Impl(mutex)) {$/;"	f	class:apache::thrift::concurrency::Monitor
MonitorMap	async/TConcurrentClientSyncInfo.h	/^  typedef std::map<int32_t, MonitorPtr> MonitorMap;$/;"	t	class:apache::thrift::async::TConcurrentClientSyncInfo
MonitorPtr	async/TConcurrentClientSyncInfo.h	/^  typedef boost::shared_ptr< ::apache::thrift::concurrency::Monitor> MonitorPtr;$/;"	t	class:apache::thrift::async::TConcurrentClientSyncInfo
Mutex	concurrency/BoostMutex.cpp	/^Mutex::Mutex(Initializer init) : impl_(new Mutex::impl()) {$/;"	f	class:apache::thrift::concurrency::Mutex
Mutex	concurrency/Mutex.cpp	/^Mutex::Mutex(Initializer init) : impl_(new Mutex::impl(init)) {$/;"	f	class:apache::thrift::concurrency::Mutex
Mutex	concurrency/Mutex.h	/^class Mutex {$/;"	c	namespace:apache::thrift::concurrency
Mutex	concurrency/StdMutex.cpp	/^Mutex::Mutex(Initializer init) : impl_(new Mutex::impl()) {$/;"	f	class:apache::thrift::concurrency::Mutex
MutexWaitCallback	concurrency/Mutex.h	/^typedef void (*MutexWaitCallback)(const void* id, int64_t waitTimeMicros);$/;"	t	namespace:apache::thrift::concurrency
NEGATIVE_SIZE	protocol/TProtocolException.h	/^    NEGATIVE_SIZE = 2,$/;"	e	enum:apache::thrift::protocol::TProtocolException::TProtocolExceptionType
NORMAL	concurrency/PosixThreadFactory.h	/^    NORMAL = 3,$/;"	e	enum:apache::thrift::concurrency::PosixThreadFactory::PRIORITY
NOT_IMPLEMENTED	protocol/TProtocolException.h	/^    NOT_IMPLEMENTED = 5,$/;"	e	enum:apache::thrift::protocol::TProtocolException::TProtocolExceptionType
NOT_OPEN	transport/TTransportException.h	/^    NOT_OPEN = 1,$/;"	e	enum:apache::thrift::transport::TTransportException::TTransportExceptionType
NO_CLOSE_ON_DESTROY	transport/TFDTransport.h	/^  enum ClosePolicy { NO_CLOSE_ON_DESTROY = 0, CLOSE_ON_DESTROY = 1 };$/;"	e	enum:apache::thrift::transport::TFDTransport::ClosePolicy
NO_TAIL_READ_TIMEOUT	transport/TFileTransport.h	/^  static const int32_t NO_TAIL_READ_TIMEOUT = 0;$/;"	m	class:apache::thrift::transport::TFileTransport
NS_PER_MS	concurrency/Util.h	/^  static const int64_t NS_PER_MS = NS_PER_S \/ MS_PER_S;$/;"	m	class:apache::thrift::concurrency::Util
NS_PER_S	concurrency/Util.h	/^  static const int64_t NS_PER_S = 1000000000LL;$/;"	m	class:apache::thrift::concurrency::Util
NS_PER_US	concurrency/Util.h	/^  static const int64_t NS_PER_US = NS_PER_S \/ US_PER_S;$/;"	m	class:apache::thrift::concurrency::Util
NoStarveReadWriteMutex	concurrency/Mutex.cpp	/^NoStarveReadWriteMutex::NoStarveReadWriteMutex() : writerWaiting_(false) {$/;"	f	class:apache::thrift::concurrency::NoStarveReadWriteMutex
NoStarveReadWriteMutex	concurrency/Mutex.h	/^class NoStarveReadWriteMutex : public ReadWriteMutex {$/;"	c	namespace:apache::thrift::concurrency
NoSuchTaskException	concurrency/Exception.h	/^class NoSuchTaskException : public apache::thrift::TException {};$/;"	c	namespace:apache::thrift::concurrency
OBSERVE	transport/TBufferTransports.h	/^  enum MemoryPolicy { OBSERVE = 1, COPY = 2, TAKE_OWNERSHIP = 3 };$/;"	e	enum:apache::thrift::transport::TMemoryBuffer::MemoryPolicy
OPENSSL_VERSION_NO_THREAD_ID	transport/TSSLSocket.cpp	/^#define OPENSSL_VERSION_NO_THREAD_ID /;"	d	file:
OTHER	concurrency/PosixThreadFactory.h	/^  enum POLICY { OTHER, FIFO, ROUND_ROBIN };$/;"	e	enum:apache::thrift::concurrency::PosixThreadFactory::POLICY
PACKAGE	config.h	/^#define PACKAGE /;"	d
PACKAGE_BUGREPORT	config.h	/^#define PACKAGE_BUGREPORT /;"	d
PACKAGE_NAME	config.h	/^#define PACKAGE_NAME /;"	d
PACKAGE_STRING	config.h	/^#define PACKAGE_STRING /;"	d
PACKAGE_TARNAME	config.h	/^#define PACKAGE_TARNAME /;"	d
PACKAGE_URL	config.h	/^#define PACKAGE_URL /;"	d
PACKAGE_VERSION	config.h	/^#define PACKAGE_VERSION /;"	d
PEEKPROCESSOR_H	processor/PeekProcessor.h	/^#define PEEKPROCESSOR_H$/;"	d
POLICY	concurrency/PosixThreadFactory.h	/^  enum POLICY { OTHER, FIFO, ROUND_ROBIN };$/;"	g	class:apache::thrift::concurrency::PosixThreadFactory
PRIORITY	concurrency/PosixThreadFactory.h	/^  enum PRIORITY {$/;"	g	class:apache::thrift::concurrency::PosixThreadFactory
PRIu32	server/TNonblockingServer.cpp	/^#define PRIu32 /;"	d	file:
PRIu64	server/TNonblockingServer.cpp	/^#define PRIu64 /;"	d	file:
PROFILE_MUTEX_LOCKED	concurrency/Mutex.cpp	/^#define PROFILE_MUTEX_LOCKED(/;"	d	file:
PROFILE_MUTEX_NOT_LOCKED	concurrency/Mutex.cpp	/^#define PROFILE_MUTEX_NOT_LOCKED(/;"	d	file:
PROFILE_MUTEX_START_LOCK	concurrency/Mutex.cpp	/^#define PROFILE_MUTEX_START_LOCK(/;"	d	file:
PROFILE_MUTEX_START_UNLOCK	concurrency/Mutex.cpp	/^#define PROFILE_MUTEX_START_UNLOCK(/;"	d	file:
PROFILE_MUTEX_UNLOCKED	concurrency/Mutex.cpp	/^#define PROFILE_MUTEX_UNLOCKED(/;"	d	file:
PROTOCOL_ERROR	TApplicationException.h	/^    PROTOCOL_ERROR = 7,$/;"	e	enum:apache::thrift::TApplicationException::TApplicationExceptionType
PROTOCOL_ID	protocol/TCompactProtocol.h	/^  static const int8_t PROTOCOL_ID = (int8_t)0x82u;$/;"	m	class:apache::thrift::protocol::TCompactProtocolT
PeekProcessor	processor/PeekProcessor.cpp	/^PeekProcessor::PeekProcessor() {$/;"	f	class:apache::thrift::processor::PeekProcessor
PeekProcessor	processor/PeekProcessor.h	/^class PeekProcessor : public apache::thrift::TProcessor {$/;"	c	namespace:apache::thrift::processor
PipeR_	transport/TPipeServer.cpp	/^  TAutoHandle PipeR_; \/\/ Anonymous Pipe (R)$/;"	m	class:apache::thrift::transport::TAnonPipeServer	file:
PipeRd_	transport/TPipe.cpp	/^  TAutoHandle PipeRd_;$/;"	m	class:apache::thrift::transport::TAnonPipeImpl	file:
PipeW_	transport/TPipeServer.cpp	/^  TAutoHandle PipeW_; \/\/ Anonymous Pipe (W)$/;"	m	class:apache::thrift::transport::TAnonPipeServer	file:
PipeWrt_	transport/TPipe.cpp	/^  TAutoHandle PipeWrt_;$/;"	m	class:apache::thrift::transport::TAnonPipeImpl	file:
Pipe_	transport/TPipe.cpp	/^  TAutoHandle Pipe_;$/;"	m	class:apache::thrift::transport::TNamedPipeImpl	file:
Pipe_	transport/TPipe.cpp	/^  TAutoHandle Pipe_;$/;"	m	class:apache::thrift::transport::TWaitableNamedPipeImpl	file:
Pipe_	transport/TPipeServer.cpp	/^  TAutoHandle Pipe_;$/;"	m	class:apache::thrift::transport::TNamedPipeServer	file:
PlatformThreadFactory	concurrency/PlatformThreadFactory.h	/^  typedef BoostThreadFactory PlatformThreadFactory;$/;"	t	namespace:apache::thrift::concurrency
PosixThreadFactory	concurrency/PosixThreadFactory.cpp	/^PosixThreadFactory::PosixThreadFactory(POLICY policy,$/;"	f	class:apache::thrift::concurrency::PosixThreadFactory
PosixThreadFactory	concurrency/PosixThreadFactory.h	/^class PosixThreadFactory : public ThreadFactory {$/;"	c	namespace:apache::thrift::concurrency
ProcessFunction	gen-cpp-fb-s/FacebookService.h	/^  typedef  void (FacebookServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);$/;"	t	class:facebook::fb303::FacebookServiceProcessor
ProcessFunction	gen-cpp-fb/FacebookService.h	/^  typedef  void (FacebookServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);$/;"	t	class:facebook::fb303::FacebookServiceProcessor
ProcessMap	gen-cpp-fb-s/FacebookService.h	/^  typedef std::map<std::string, ProcessFunction> ProcessMap;$/;"	t	class:facebook::fb303::FacebookServiceProcessor
ProcessMap	gen-cpp-fb/FacebookService.h	/^  typedef std::map<std::string, ProcessFunction> ProcessMap;$/;"	t	class:facebook::fb303::FacebookServiceProcessor
PthreadFuncPtr	concurrency/FunctionRunner.h	/^  typedef void* (*PthreadFuncPtr)(void* arg);$/;"	t	class:apache::thrift::concurrency::FunctionRunner
PthreadThread	concurrency/PosixThreadFactory.cpp	/^  PthreadThread(int policy,$/;"	f	class:apache::thrift::concurrency::PthreadThread
PthreadThread	concurrency/PosixThreadFactory.cpp	/^class PthreadThread : public Thread {$/;"	c	namespace:apache::thrift::concurrency	file:
READ	transport/TFileTransport.h	/^  enum mode { WRITE, READ };$/;"	e	enum:apache::thrift::transport::TFileTransportBuffer::mode
READ	windows/OverlappedSubmissionThread.h	/^    READ,$/;"	e	enum:apache::thrift::transport::TOverlappedWorkItem::action_t
RECURSIVE_INITIALIZER	concurrency/Mutex.cpp	/^void Mutex::RECURSIVE_INITIALIZER(void* arg) {$/;"	f	class:apache::thrift::concurrency::Mutex
RESIZE_BUFFER_EVERY_N	server/TNonblockingServer.h	/^  static const int RESIZE_BUFFER_EVERY_N = 512;$/;"	m	class:apache::thrift::server::TNonblockingServer
RETSIGTYPE	config.h	/^#define RETSIGTYPE /;"	d
ROUND_ROBIN	concurrency/PosixThreadFactory.h	/^  enum POLICY { OTHER, FIFO, ROUND_ROBIN };$/;"	e	enum:apache::thrift::concurrency::PosixThreadFactory::POLICY
RWGuard	concurrency/Mutex.h	/^  RWGuard(const ReadWriteMutex& value, RWGuardType type) : rw_mutex_(value) {$/;"	f	class:apache::thrift::concurrency::RWGuard
RWGuard	concurrency/Mutex.h	/^  RWGuard(const ReadWriteMutex& value, bool write = false) : rw_mutex_(value) {$/;"	f	class:apache::thrift::concurrency::RWGuard
RWGuard	concurrency/Mutex.h	/^class RWGuard : boost::noncopyable {$/;"	c	namespace:apache::thrift::concurrency
RWGuardType	concurrency/Mutex.h	/^enum RWGuardType { RW_READ = 0, RW_WRITE = 1 };$/;"	g	namespace:apache::thrift::concurrency
RW_READ	concurrency/Mutex.h	/^enum RWGuardType { RW_READ = 0, RW_WRITE = 1 };$/;"	e	enum:apache::thrift::concurrency::RWGuardType
RW_WRITE	concurrency/Mutex.h	/^enum RWGuardType { RW_READ = 0, RW_WRITE = 1 };$/;"	e	enum:apache::thrift::concurrency::RWGuardType
ReadWriteMutex	concurrency/Mutex.cpp	/^ReadWriteMutex::ReadWriteMutex() : impl_(new ReadWriteMutex::impl()) {$/;"	f	class:apache::thrift::concurrency::ReadWriteMutex
ReadWriteMutex	concurrency/Mutex.h	/^class ReadWriteMutex {$/;"	c	namespace:apache::thrift::concurrency
ReleaseHandler	TProcessor.h	/^  ReleaseHandler(const boost::shared_ptr<HandlerFactory_>& handlerFactory)$/;"	f	class:apache::thrift::ReleaseHandler
ReleaseHandler	TProcessor.h	/^class ReleaseHandler {$/;"	c	namespace:apache::thrift
RequestContext	async/TEvhttpServer.cpp	/^TEvhttpServer::RequestContext::RequestContext(struct evhttp_request* req)$/;"	f	class:apache::thrift::async::TEvhttpServer::RequestContext
RequestContext	async/TEvhttpServer.cpp	/^struct TEvhttpServer::RequestContext {$/;"	s	class:apache::thrift::async::TEvhttpServer	file:
Runnable	concurrency/Thread.h	/^class Runnable {$/;"	c	namespace:apache::thrift::concurrency
SELECT_TYPE_ARG1	config.h	/^#define SELECT_TYPE_ARG1 /;"	d
SELECT_TYPE_ARG234	config.h	/^#define SELECT_TYPE_ARG234 /;"	d
SELECT_TYPE_ARG5	config.h	/^#define SELECT_TYPE_ARG5 /;"	d
SET	protocol/TDebugProtocol.h	/^  enum write_state_t { UNINIT, STRUCT, LIST, SET, MAP_KEY, MAP_VALUE };$/;"	e	enum:apache::thrift::protocol::TDebugProtocol::write_state_t
SIGNED_RIGHT_SHIFT_IS	config.h	/^#define SIGNED_RIGHT_SHIFT_IS /;"	d
SIGNED_RIGHT_SHIFT_IS	windows/config.h	/^#define SIGNED_RIGHT_SHIFT_IS /;"	d
SIZE_LIMIT	protocol/TProtocolException.h	/^    SIZE_LIMIT = 3,$/;"	e	enum:apache::thrift::protocol::TProtocolException::TProtocolExceptionType
SKIP	transport/TSSLSocket.h	/^    SKIP = 0,  \/\/ cannot make decision, move on to next (if any)$/;"	e	enum:apache::thrift::transport::AccessManager::Decision
SOCKET_RECV	server/TNonblockingServer.cpp	/^enum TSocketState { SOCKET_RECV_FRAMING, SOCKET_RECV, SOCKET_SEND };$/;"	e	enum:apache::thrift::server::TSocketState	file:
SOCKET_RECV_FRAMING	server/TNonblockingServer.cpp	/^enum TSocketState { SOCKET_RECV_FRAMING, SOCKET_RECV, SOCKET_SEND };$/;"	e	enum:apache::thrift::server::TSocketState	file:
SOCKET_SEND	server/TNonblockingServer.cpp	/^enum TSocketState { SOCKET_RECV_FRAMING, SOCKET_RECV, SOCKET_SEND };$/;"	e	enum:apache::thrift::server::TSocketState	file:
SOCKOPT_CAST_T	server/TNonblockingServer.h	/^#define SOCKOPT_CAST_T /;"	d
SOCKOPT_CAST_T	transport/TServerSocket.cpp	/^#define SOCKOPT_CAST_T /;"	d	file:
SOCKOPT_CAST_T	transport/TSocket.cpp	/^#define SOCKOPT_CAST_T /;"	d	file:
SSLContext	transport/TSSLSocket.cpp	/^SSLContext::SSLContext(const SSLProtocol& protocol) {$/;"	f	class:apache::thrift::transport::SSLContext
SSLContext	transport/TSSLSocket.h	/^class SSLContext {$/;"	c	namespace:apache::thrift::transport
SSLProtocol	transport/TSSLSocket.h	/^enum SSLProtocol {$/;"	g	namespace:apache::thrift::transport
SSLTLS	transport/TSSLSocket.h	/^  SSLTLS  = 0,  \/\/ Supports SSLv2 and SSLv3 handshake but only negotiates at TLSv1_0 or later.$/;"	e	enum:apache::thrift::transport::SSLProtocol
SSLv3	transport/TSSLSocket.h	/^  SSLv3   = 2,  \/\/ Supports SSLv3 only - also horribly insecure!$/;"	e	enum:apache::thrift::transport::SSLProtocol
STARTED	concurrency/ThreadManager.cpp	/^  enum STATE { UNINITIALIZED, STARTING, STARTED, STOPPING, STOPPED };$/;"	e	enum:apache::thrift::concurrency::ThreadManager::Worker::STATE	file:
STARTED	concurrency/ThreadManager.h	/^  enum STATE { UNINITIALIZED, STARTING, STARTED, JOINING, STOPPING, STOPPED };$/;"	e	enum:apache::thrift::concurrency::ThreadManager::STATE
STARTED	concurrency/TimerManager.h	/^  enum STATE { UNINITIALIZED, STARTING, STARTED, STOPPING, STOPPED };$/;"	e	enum:apache::thrift::concurrency::TimerManager::STATE
STARTING	concurrency/ThreadManager.cpp	/^  enum STATE { UNINITIALIZED, STARTING, STARTED, STOPPING, STOPPED };$/;"	e	enum:apache::thrift::concurrency::ThreadManager::Worker::STATE	file:
STARTING	concurrency/ThreadManager.h	/^  enum STATE { UNINITIALIZED, STARTING, STARTED, JOINING, STOPPING, STOPPED };$/;"	e	enum:apache::thrift::concurrency::ThreadManager::STATE
STARTING	concurrency/TimerManager.h	/^  enum STATE { UNINITIALIZED, STARTING, STARTED, STOPPING, STOPPED };$/;"	e	enum:apache::thrift::concurrency::TimerManager::STATE
STARTING	gen-cpp-fb-s/facebooktest_types.h	/^    STARTING = 1,$/;"	e	enum:facebook::fb303::fb_status::type
STARTING	gen-cpp-fb/facebooktest_types.h	/^    STARTING = 1,$/;"	e	enum:facebook::fb303::fb_status::type
STATE	concurrency/BoostThreadFactory.cpp	/^  enum STATE { uninitialized, starting, started, stopping, stopped };$/;"	g	class:apache::thrift::concurrency::BoostThread	file:
STATE	concurrency/PosixThreadFactory.cpp	/^  enum STATE { uninitialized, starting, started, stopping, stopped };$/;"	g	class:apache::thrift::concurrency::PthreadThread	file:
STATE	concurrency/StdThreadFactory.cpp	/^  enum STATE { uninitialized, starting, started, stopping, stopped };$/;"	g	class:apache::thrift::concurrency::StdThread	file:
STATE	concurrency/ThreadManager.cpp	/^  enum STATE { UNINITIALIZED, STARTING, STARTED, STOPPING, STOPPED };$/;"	g	class:apache::thrift::concurrency::ThreadManager::Worker	file:
STATE	concurrency/ThreadManager.cpp	/^  enum STATE { WAITING, EXECUTING, CANCELLED, COMPLETE };$/;"	g	class:apache::thrift::concurrency::ThreadManager::Task	file:
STATE	concurrency/ThreadManager.h	/^  enum STATE { UNINITIALIZED, STARTING, STARTED, JOINING, STOPPING, STOPPED };$/;"	g	class:apache::thrift::concurrency::ThreadManager
STATE	concurrency/TimerManager.cpp	/^  enum STATE { WAITING, EXECUTING, CANCELLED, COMPLETE };$/;"	g	class:apache::thrift::concurrency::TimerManager::Task	file:
STATE	concurrency/TimerManager.h	/^  enum STATE { UNINITIALIZED, STARTING, STARTED, STOPPING, STOPPED };$/;"	g	class:apache::thrift::concurrency::TimerManager
STATSPROCESSOR_H	processor/StatsProcessor.h	/^#define STATSPROCESSOR_H$/;"	d
STDC_HEADERS	config.h	/^#define STDC_HEADERS /;"	d
STOP	windows/OverlappedSubmissionThread.h	/^    STOP,$/;"	e	enum:apache::thrift::transport::TOverlappedWorkItem::action_t
STOPPED	concurrency/ThreadManager.cpp	/^  enum STATE { UNINITIALIZED, STARTING, STARTED, STOPPING, STOPPED };$/;"	e	enum:apache::thrift::concurrency::ThreadManager::Worker::STATE	file:
STOPPED	concurrency/ThreadManager.h	/^  enum STATE { UNINITIALIZED, STARTING, STARTED, JOINING, STOPPING, STOPPED };$/;"	e	enum:apache::thrift::concurrency::ThreadManager::STATE
STOPPED	concurrency/TimerManager.h	/^  enum STATE { UNINITIALIZED, STARTING, STARTED, STOPPING, STOPPED };$/;"	e	enum:apache::thrift::concurrency::TimerManager::STATE
STOPPED	gen-cpp-fb-s/facebooktest_types.h	/^    STOPPED = 4,$/;"	e	enum:facebook::fb303::fb_status::type
STOPPED	gen-cpp-fb/facebooktest_types.h	/^    STOPPED = 4,$/;"	e	enum:facebook::fb303::fb_status::type
STOPPING	concurrency/ThreadManager.cpp	/^  enum STATE { UNINITIALIZED, STARTING, STARTED, STOPPING, STOPPED };$/;"	e	enum:apache::thrift::concurrency::ThreadManager::Worker::STATE	file:
STOPPING	concurrency/ThreadManager.h	/^  enum STATE { UNINITIALIZED, STARTING, STARTED, JOINING, STOPPING, STOPPED };$/;"	e	enum:apache::thrift::concurrency::ThreadManager::STATE
STOPPING	concurrency/TimerManager.h	/^  enum STATE { UNINITIALIZED, STARTING, STARTED, STOPPING, STOPPED };$/;"	e	enum:apache::thrift::concurrency::TimerManager::STATE
STOPPING	gen-cpp-fb-s/facebooktest_types.h	/^    STOPPING = 3,$/;"	e	enum:facebook::fb303::fb_status::type
STOPPING	gen-cpp-fb/facebooktest_types.h	/^    STOPPING = 3,$/;"	e	enum:facebook::fb303::fb_status::type
STRUCT	protocol/TDebugProtocol.h	/^  enum write_state_t { UNINIT, STRUCT, LIST, SET, MAP_KEY, MAP_VALUE };$/;"	e	enum:apache::thrift::protocol::TDebugProtocol::write_state_t
SimpleThreadManager	concurrency/ThreadManager.cpp	/^  SimpleThreadManager(size_t workerCount = 4, size_t pendingTaskCountMax = 0)$/;"	f	class:apache::thrift::concurrency::SimpleThreadManager
SimpleThreadManager	concurrency/ThreadManager.cpp	/^class SimpleThreadManager : public ThreadManager::Impl {$/;"	c	namespace:apache::thrift::concurrency	file:
StatsProcessor	processor/StatsProcessor.h	/^  StatsProcessor(bool print, bool frequency) : print_(print), frequency_(frequency) {}$/;"	f	class:apache::thrift::processor::StatsProcessor
StatsProcessor	processor/StatsProcessor.h	/^class StatsProcessor : public apache::thrift::TProcessor {$/;"	c	namespace:apache::thrift::processor
StdThread	concurrency/StdThreadFactory.cpp	/^  StdThread(bool detached, boost::shared_ptr<Runnable> runnable)$/;"	f	class:apache::thrift::concurrency::StdThread
StdThread	concurrency/StdThreadFactory.cpp	/^class StdThread : public Thread, public boost::enable_shared_from_this<StdThread> {$/;"	c	namespace:apache::thrift::concurrency	file:
StdThreadFactory	concurrency/StdThreadFactory.cpp	/^StdThreadFactory::StdThreadFactory(bool detached) : impl_(new StdThreadFactory::Impl(detached)) {$/;"	f	class:apache::thrift::concurrency::StdThreadFactory
StdThreadFactory	concurrency/StdThreadFactory.h	/^class StdThreadFactory : public ThreadFactory {$/;"	c	namespace:apache::thrift::concurrency
StoredMessageProtocol	processor/TMultiplexedProcessor.h	/^  StoredMessageProtocol(shared_ptr<protocol::TProtocol> _protocol,$/;"	f	class:apache::thrift::protocol::StoredMessageProtocol
StoredMessageProtocol	processor/TMultiplexedProcessor.h	/^class StoredMessageProtocol : public TProtocolDecorator {$/;"	c	namespace:apache::thrift::protocol
Synchronized	concurrency/Monitor.h	/^  Synchronized(const Monitor& monitor) : g(monitor.mutex()) {}$/;"	f	class:apache::thrift::concurrency::Synchronized
Synchronized	concurrency/Monitor.h	/^  Synchronized(const Monitor* monitor) : g(monitor->mutex()) {}$/;"	f	class:apache::thrift::concurrency::Synchronized
Synchronized	concurrency/Monitor.h	/^class Synchronized {$/;"	c	namespace:apache::thrift::concurrency
SystemResourceException	concurrency/Exception.h	/^  SystemResourceException() {}$/;"	f	class:apache::thrift::concurrency::SystemResourceException
SystemResourceException	concurrency/Exception.h	/^  SystemResourceException(const std::string& message) : TException(message) {}$/;"	f	class:apache::thrift::concurrency::SystemResourceException
SystemResourceException	concurrency/Exception.h	/^class SystemResourceException : public apache::thrift::TException {$/;"	c	namespace:apache::thrift::concurrency
TAIL_READ_TIMEOUT	transport/TFileTransport.h	/^  static const int32_t TAIL_READ_TIMEOUT = -1;$/;"	m	class:apache::thrift::transport::TFileTransport
TAKE_OWNERSHIP	transport/TBufferTransports.h	/^  enum MemoryPolicy { OBSERVE = 1, COPY = 2, TAKE_OWNERSHIP = 3 };$/;"	e	enum:apache::thrift::transport::TMemoryBuffer::MemoryPolicy
TARGET_WIN_XP	windows/config.h	/^#define TARGET_WIN_XP /;"	d
TAnonPipeImpl	transport/TPipe.cpp	/^  TAnonPipeImpl(HANDLE PipeRd, HANDLE PipeWrt) : PipeRd_(PipeRd), PipeWrt_(PipeWrt) {}$/;"	f	class:apache::thrift::transport::TAnonPipeImpl
TAnonPipeImpl	transport/TPipe.cpp	/^class TAnonPipeImpl : public TPipeImpl {$/;"	c	namespace:apache::thrift::transport	file:
TAnonPipeServer	transport/TPipeServer.cpp	/^  TAnonPipeServer() {$/;"	f	class:apache::thrift::transport::TAnonPipeServer
TAnonPipeServer	transport/TPipeServer.cpp	/^class TAnonPipeServer : public TPipeServerImpl {$/;"	c	namespace:apache::thrift::transport	file:
TAppState	server/TNonblockingServer.cpp	/^enum TAppState {$/;"	g	namespace:apache::thrift::server	file:
TApplicationException	TApplicationException.h	/^  TApplicationException() : TException(), type_(UNKNOWN) {}$/;"	f	class:apache::thrift::TApplicationException
TApplicationException	TApplicationException.h	/^  TApplicationException(TApplicationExceptionType type) : TException(), type_(type) {}$/;"	f	class:apache::thrift::TApplicationException
TApplicationException	TApplicationException.h	/^  TApplicationException(TApplicationExceptionType type, const std::string& message)$/;"	f	class:apache::thrift::TApplicationException
TApplicationException	TApplicationException.h	/^  TApplicationException(const std::string& message) : TException(message), type_(UNKNOWN) {}$/;"	f	class:apache::thrift::TApplicationException
TApplicationException	TApplicationException.h	/^class TApplicationException : public TException {$/;"	c	namespace:apache::thrift
TApplicationExceptionType	TApplicationException.h	/^  enum TApplicationExceptionType {$/;"	g	class:apache::thrift::TApplicationException
TAsyncBufferProcessor	async/TAsyncBufferProcessor.h	/^class TAsyncBufferProcessor {$/;"	c	namespace:apache::thrift::async
TAsyncChannel	async/TAsyncChannel.h	/^class TAsyncChannel {$/;"	c	namespace:apache::thrift::async
TAsyncDispatchProcessor	async/TAsyncDispatchProcessor.h	/^class TAsyncDispatchProcessor : public TAsyncProcessor {$/;"	c	namespace:apache::thrift::async
TAsyncDispatchProcessorT	async/TAsyncDispatchProcessor.h	/^class TAsyncDispatchProcessorT : public TAsyncProcessor {$/;"	c	namespace:apache::thrift::async
TAsyncDispatchProcessorT	async/TAsyncDispatchProcessor.h	/^class TAsyncDispatchProcessorT<protocol::TDummyProtocol> : public TAsyncDispatchProcessor {};$/;"	c	namespace:apache::thrift::async
TAsyncDispatchProcessorT	async/TAsyncDispatchProcessor.h	/^class TAsyncDispatchProcessorT<protocol::TProtocol> : public TAsyncDispatchProcessor {};$/;"	c	namespace:apache::thrift::async
TAsyncProcessor	async/TAsyncProcessor.h	/^  TAsyncProcessor() {}$/;"	f	class:apache::thrift::async::TAsyncProcessor
TAsyncProcessor	async/TAsyncProcessor.h	/^class TAsyncProcessor {$/;"	c	namespace:apache::thrift::async
TAsyncProcessorFactory	async/TAsyncProcessor.h	/^class TAsyncProcessorFactory {$/;"	c	namespace:apache::thrift::async
TAsyncProtocolProcessor	async/TAsyncProtocolProcessor.h	/^  TAsyncProtocolProcessor(boost::shared_ptr<TAsyncProcessor> underlying,$/;"	f	class:apache::thrift::async::TAsyncProtocolProcessor
TAsyncProtocolProcessor	async/TAsyncProtocolProcessor.h	/^class TAsyncProtocolProcessor : public TAsyncBufferProcessor {$/;"	c	namespace:apache::thrift::async
TAutoCrit	windows/Sync.h	/^  explicit TAutoCrit(TCriticalSection& cs) : cs_(&cs.cs) { EnterCriticalSection(cs_); }$/;"	f	class:apache::thrift::TAutoCrit
TAutoCrit	windows/Sync.h	/^class TAutoCrit : boost::noncopyable {$/;"	c	namespace:apache::thrift
TAutoHandle	windows/Sync.h	/^  explicit TAutoHandle(HANDLE h_ = INVALID_HANDLE_VALUE) : h(h_) {}$/;"	f	struct:apache::thrift::TAutoHandle
TAutoHandle	windows/Sync.h	/^struct TAutoHandle : boost::noncopyable {$/;"	s	namespace:apache::thrift
TAutoOverlapThread	windows/OverlappedSubmissionThread.h	/^  TAutoOverlapThread() : p(TOverlappedSubmissionThread::acquire_instance()) {}$/;"	f	class:apache::thrift::transport::TAutoOverlapThread
TAutoOverlapThread	windows/OverlappedSubmissionThread.h	/^class TAutoOverlapThread : boost::noncopyable {$/;"	c	namespace:apache::thrift::transport
TAutoResetEvent	windows/Sync.h	/^  TAutoResetEvent() {$/;"	f	struct:apache::thrift::TAutoResetEvent
TAutoResetEvent	windows/Sync.h	/^struct TAutoResetEvent : boost::noncopyable {$/;"	s	namespace:apache::thrift
TBinaryProtocol	protocol/TBinaryProtocol.h	/^typedef TBinaryProtocolT<TTransport> TBinaryProtocol;$/;"	t	namespace:apache::thrift::protocol
TBinaryProtocolFactory	protocol/TBinaryProtocol.h	/^typedef TBinaryProtocolFactoryT<TTransport> TBinaryProtocolFactory;$/;"	t	namespace:apache::thrift::protocol
TBinaryProtocolFactoryT	protocol/TBinaryProtocol.h	/^  TBinaryProtocolFactoryT()$/;"	f	class:apache::thrift::protocol::TBinaryProtocolFactoryT
TBinaryProtocolFactoryT	protocol/TBinaryProtocol.h	/^  TBinaryProtocolFactoryT(int32_t string_limit,$/;"	f	class:apache::thrift::protocol::TBinaryProtocolFactoryT
TBinaryProtocolFactoryT	protocol/TBinaryProtocol.h	/^class TBinaryProtocolFactoryT : public TProtocolFactory {$/;"	c	namespace:apache::thrift::protocol
TBinaryProtocolT	protocol/TBinaryProtocol.h	/^  TBinaryProtocolT(boost::shared_ptr<Transport_> trans)$/;"	f	class:apache::thrift::protocol::TBinaryProtocolT
TBinaryProtocolT	protocol/TBinaryProtocol.h	/^  TBinaryProtocolT(boost::shared_ptr<Transport_> trans,$/;"	f	class:apache::thrift::protocol::TBinaryProtocolT
TBinaryProtocolT	protocol/TBinaryProtocol.h	/^class TBinaryProtocolT : public TVirtualProtocol<TBinaryProtocolT<Transport_, ByteOrder_> > {$/;"	c	namespace:apache::thrift::protocol
TBufferBase	transport/TBufferTransports.h	/^  TBufferBase() : rBase_(NULL), rBound_(NULL), wBase_(NULL), wBound_(NULL) {}$/;"	f	class:apache::thrift::transport::TBufferBase
TBufferBase	transport/TBufferTransports.h	/^class TBufferBase : public TVirtualTransport<TBufferBase> {$/;"	c	namespace:apache::thrift::transport
TBufferedTransport	transport/TBufferTransports.h	/^  TBufferedTransport(boost::shared_ptr<TTransport> transport)$/;"	f	class:apache::thrift::transport::TBufferedTransport
TBufferedTransport	transport/TBufferTransports.h	/^  TBufferedTransport(boost::shared_ptr<TTransport> transport, uint32_t rsz, uint32_t wsz)$/;"	f	class:apache::thrift::transport::TBufferedTransport
TBufferedTransport	transport/TBufferTransports.h	/^  TBufferedTransport(boost::shared_ptr<TTransport> transport, uint32_t sz)$/;"	f	class:apache::thrift::transport::TBufferedTransport
TBufferedTransport	transport/TBufferTransports.h	/^class TBufferedTransport : public TVirtualTransport<TBufferedTransport, TBufferBase> {$/;"	c	namespace:apache::thrift::transport
TBufferedTransportFactory	transport/TBufferTransports.h	/^  TBufferedTransportFactory() {}$/;"	f	class:apache::thrift::transport::TBufferedTransportFactory
TBufferedTransportFactory	transport/TBufferTransports.h	/^class TBufferedTransportFactory : public TTransportFactory {$/;"	c	namespace:apache::thrift::transport
TCompactProtocol	protocol/TCompactProtocol.h	/^typedef TCompactProtocolT<TTransport> TCompactProtocol;$/;"	t	namespace:apache::thrift::protocol
TCompactProtocolFactory	protocol/TCompactProtocol.h	/^typedef TCompactProtocolFactoryT<TTransport> TCompactProtocolFactory;$/;"	t	namespace:apache::thrift::protocol
TCompactProtocolFactoryT	protocol/TCompactProtocol.h	/^  TCompactProtocolFactoryT() : string_limit_(0), container_limit_(0) {}$/;"	f	class:apache::thrift::protocol::TCompactProtocolFactoryT
TCompactProtocolFactoryT	protocol/TCompactProtocol.h	/^  TCompactProtocolFactoryT(int32_t string_limit, int32_t container_limit)$/;"	f	class:apache::thrift::protocol::TCompactProtocolFactoryT
TCompactProtocolFactoryT	protocol/TCompactProtocol.h	/^class TCompactProtocolFactoryT : public TProtocolFactory {$/;"	c	namespace:apache::thrift::protocol
TCompactProtocolT	protocol/TCompactProtocol.h	/^  TCompactProtocolT(boost::shared_ptr<Transport_> trans)$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
TCompactProtocolT	protocol/TCompactProtocol.h	/^  TCompactProtocolT(boost::shared_ptr<Transport_> trans,$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
TCompactProtocolT	protocol/TCompactProtocol.h	/^class TCompactProtocolT : public TVirtualProtocol<TCompactProtocolT<Transport_> > {$/;"	c	namespace:apache::thrift::protocol
TConcurrentClientSyncInfo	async/TConcurrentClientSyncInfo.cpp	/^TConcurrentClientSyncInfo::TConcurrentClientSyncInfo() :$/;"	f	class:apache::thrift::async::TConcurrentClientSyncInfo
TConcurrentClientSyncInfo	async/TConcurrentClientSyncInfo.h	/^class TConcurrentClientSyncInfo$/;"	c	namespace:apache::thrift::async
TConcurrentRecvSentry	async/TConcurrentClientSyncInfo.cpp	/^TConcurrentRecvSentry::TConcurrentRecvSentry(TConcurrentClientSyncInfo *sync, int32_t seqid) :$/;"	f	class:apache::thrift::async::TConcurrentRecvSentry
TConcurrentRecvSentry	async/TConcurrentClientSyncInfo.h	/^class TConcurrentRecvSentry$/;"	c	namespace:apache::thrift::async
TConcurrentSendSentry	async/TConcurrentClientSyncInfo.cpp	/^TConcurrentSendSentry::TConcurrentSendSentry(TConcurrentClientSyncInfo *sync) :$/;"	f	class:apache::thrift::async::TConcurrentSendSentry
TConcurrentSendSentry	async/TConcurrentClientSyncInfo.h	/^class TConcurrentSendSentry$/;"	c	namespace:apache::thrift::async
TConnectedClient	server/TConnectedClient.cpp	/^TConnectedClient::TConnectedClient(const shared_ptr<TProcessor>& processor,$/;"	f	class:apache::thrift::server::TConnectedClient
TConnectedClient	server/TConnectedClient.h	/^class TConnectedClient : public apache::thrift::concurrency::Runnable {$/;"	c	namespace:apache::thrift::server
TConnection	server/TNonblockingServer.cpp	/^  TConnection(THRIFT_SOCKET socket,$/;"	f	class:apache::thrift::server::TNonblockingServer::TConnection
TConnection	server/TNonblockingServer.cpp	/^class TNonblockingServer::TConnection {$/;"	c	class:apache::thrift::server::TNonblockingServer	file:
TConnectionInfo	TProcessor.h	/^struct TConnectionInfo {$/;"	s	namespace:apache::thrift
TCriticalSection	windows/Sync.h	/^  TCriticalSection() { InitializeCriticalSection(&cs); }$/;"	f	struct:apache::thrift::TCriticalSection
TCriticalSection	windows/Sync.h	/^struct TCriticalSection : boost::noncopyable {$/;"	s	namespace:apache::thrift
TDB_LIKELY	transport/TBufferTransports.h	/^#define TDB_LIKELY(/;"	d
TDB_UNLIKELY	transport/TBufferTransports.h	/^#define TDB_UNLIKELY(/;"	d
TDebugProtocol	protocol/TDebugProtocol.h	/^  TDebugProtocol(boost::shared_ptr<TTransport> trans)$/;"	f	class:apache::thrift::protocol::TDebugProtocol
TDebugProtocol	protocol/TDebugProtocol.h	/^class TDebugProtocol : public TVirtualProtocol<TDebugProtocol> {$/;"	c	namespace:apache::thrift::protocol
TDebugProtocolFactory	protocol/TDebugProtocol.h	/^  TDebugProtocolFactory() {}$/;"	f	class:apache::thrift::protocol::TDebugProtocolFactory
TDebugProtocolFactory	protocol/TDebugProtocol.h	/^class TDebugProtocolFactory : public TProtocolFactory {$/;"	c	namespace:apache::thrift::protocol
TDelayedException	Thrift.h	/^class TDelayedException {$/;"	c	namespace:apache::thrift
TDispatchProcessor	TDispatchProcessor.h	/^class TDispatchProcessor : public TProcessor {$/;"	c	namespace:apache::thrift
TDispatchProcessorT	TDispatchProcessor.h	/^class TDispatchProcessorT : public TProcessor {$/;"	c	namespace:apache::thrift
TDispatchProcessorT	TDispatchProcessor.h	/^class TDispatchProcessorT<protocol::TDummyProtocol> : public TDispatchProcessor {};$/;"	c	namespace:apache::thrift
TDispatchProcessorT	TDispatchProcessor.h	/^class TDispatchProcessorT<protocol::TProtocol> : public TDispatchProcessor {};$/;"	c	namespace:apache::thrift
TDummyProtocol	protocol/TProtocol.h	/^class TDummyProtocol : public TProtocol {};$/;"	c	namespace:apache::thrift::protocol
TEOFException	transport/TFileTransport.h	/^  TEOFException() : TTransportException(TTransportException::END_OF_FILE){};$/;"	f	class:apache::thrift::transport::TEOFException
TEOFException	transport/TFileTransport.h	/^class TEOFException : public TTransportException {$/;"	c	namespace:apache::thrift::transport
TEnumIterator	Thrift.h	/^  TEnumIterator(int n, int* enums, const char** names)$/;"	f	class:apache::thrift::TEnumIterator
TEnumIterator	Thrift.h	/^class TEnumIterator$/;"	c	namespace:apache::thrift
TEvhttpClientChannel	async/TEvhttpClientChannel.cpp	/^TEvhttpClientChannel::TEvhttpClientChannel(const std::string& host,$/;"	f	class:apache::thrift::async::TEvhttpClientChannel
TEvhttpClientChannel	async/TEvhttpClientChannel.h	/^class TEvhttpClientChannel : public TAsyncChannel {$/;"	c	namespace:apache::thrift::async
TEvhttpServer	async/TEvhttpServer.cpp	/^TEvhttpServer::TEvhttpServer(boost::shared_ptr<TAsyncBufferProcessor> processor)$/;"	f	class:apache::thrift::async::TEvhttpServer
TEvhttpServer	async/TEvhttpServer.cpp	/^TEvhttpServer::TEvhttpServer(boost::shared_ptr<TAsyncBufferProcessor> processor, int port)$/;"	f	class:apache::thrift::async::TEvhttpServer
TEvhttpServer	async/TEvhttpServer.h	/^class TEvhttpServer {$/;"	c	namespace:apache::thrift::async
TException	Thrift.h	/^  TException() : message_() {}$/;"	f	class:apache::thrift::TException
TException	Thrift.h	/^  TException(const std::string& message) : message_(message) {}$/;"	f	class:apache::thrift::TException
TException	Thrift.h	/^class TException : public std::exception {$/;"	c	namespace:apache::thrift
TExceptionWrapper	Thrift.h	/^  TExceptionWrapper(const E& e) : e_(e) {}$/;"	f	class:apache::thrift::TExceptionWrapper
TExceptionWrapper	Thrift.h	/^class TExceptionWrapper : public TDelayedException {$/;"	c	namespace:apache::thrift
TFDTransport	transport/TFDTransport.h	/^  TFDTransport(int fd, ClosePolicy close_policy = NO_CLOSE_ON_DESTROY)$/;"	f	class:apache::thrift::transport::TFDTransport
TFDTransport	transport/TFDTransport.h	/^class TFDTransport : public TVirtualTransport<TFDTransport> {$/;"	c	namespace:apache::thrift::transport
TFileProcessor	transport/TFileTransport.cpp	/^TFileProcessor::TFileProcessor(shared_ptr<TProcessor> processor,$/;"	f	class:apache::thrift::transport::TFileProcessor
TFileProcessor	transport/TFileTransport.h	/^class TFileProcessor {$/;"	c	namespace:apache::thrift::transport
TFileReaderTransport	transport/TFileTransport.h	/^class TFileReaderTransport : virtual public TTransport {$/;"	c	namespace:apache::thrift::transport
TFileTransport	transport/TFileTransport.cpp	/^TFileTransport::TFileTransport(string path, bool readOnly)$/;"	f	class:apache::thrift::transport::TFileTransport
TFileTransport	transport/TFileTransport.h	/^class TFileTransport : public TFileReaderTransport, public TFileWriterTransport {$/;"	c	namespace:apache::thrift::transport
TFileTransportBuffer	transport/TFileTransport.cpp	/^TFileTransportBuffer::TFileTransportBuffer(uint32_t size)$/;"	f	class:apache::thrift::transport::TFileTransportBuffer
TFileTransportBuffer	transport/TFileTransport.h	/^class TFileTransportBuffer {$/;"	c	namespace:apache::thrift::transport
TFileWriterTransport	transport/TFileTransport.h	/^class TFileWriterTransport : virtual public TTransport {$/;"	c	namespace:apache::thrift::transport
TFramedTransport	transport/TBufferTransports.h	/^  TFramedTransport(boost::shared_ptr<TTransport> transport)$/;"	f	class:apache::thrift::transport::TFramedTransport
TFramedTransport	transport/TBufferTransports.h	/^  TFramedTransport(boost::shared_ptr<TTransport> transport,$/;"	f	class:apache::thrift::transport::TFramedTransport
TFramedTransport	transport/TBufferTransports.h	/^class TFramedTransport : public TVirtualTransport<TFramedTransport, TBufferBase> {$/;"	c	namespace:apache::thrift::transport
TFramedTransportFactory	transport/TBufferTransports.h	/^  TFramedTransportFactory() {}$/;"	f	class:apache::thrift::transport::TFramedTransportFactory
TFramedTransportFactory	transport/TBufferTransports.h	/^class TFramedTransportFactory : public TTransportFactory {$/;"	c	namespace:apache::thrift::transport
THRIFT_CLOSE	transport/PlatformSocket.h	/^#  define THRIFT_CLOSE /;"	d
THRIFT_CLOSESOCKET	transport/PlatformSocket.h	/^#  define THRIFT_CLOSESOCKET /;"	d
THRIFT_CTIME_R	transport/PlatformSocket.h	/^#  define THRIFT_CTIME_R /;"	d
THRIFT_EAGAIN	transport/PlatformSocket.h	/^#  define THRIFT_EAGAIN /;"	d
THRIFT_ECONNRESET	transport/PlatformSocket.h	/^#  define THRIFT_ECONNRESET /;"	d
THRIFT_EINPROGRESS	transport/PlatformSocket.h	/^#  define THRIFT_EINPROGRESS /;"	d
THRIFT_EINTR	transport/PlatformSocket.h	/^#  define THRIFT_EINTR /;"	d
THRIFT_ENOTCONN	transport/PlatformSocket.h	/^#  define THRIFT_ENOTCONN /;"	d
THRIFT_EPIPE	transport/PlatformSocket.h	/^#  define THRIFT_EPIPE /;"	d
THRIFT_ERRNO	transport/PlatformSocket.h	/^#  define THRIFT_ERRNO /;"	d
THRIFT_ETIMEDOUT	transport/PlatformSocket.h	/^#  define THRIFT_ETIMEDOUT /;"	d
THRIFT_EWOULDBLOCK	transport/PlatformSocket.h	/^#  define THRIFT_EWOULDBLOCK /;"	d
THRIFT_FCNTL	transport/PlatformSocket.h	/^#  define THRIFT_FCNTL /;"	d
THRIFT_FSTAT	transport/PlatformSocket.h	/^#  define THRIFT_FSTAT /;"	d
THRIFT_FSYNC	transport/PlatformSocket.h	/^#  define THRIFT_FSYNC /;"	d
THRIFT_FTRUNCATE	transport/PlatformSocket.h	/^#  define THRIFT_FTRUNCATE /;"	d
THRIFT_F_GETFL	transport/PlatformSocket.h	/^#  define THRIFT_F_GETFL /;"	d
THRIFT_F_SETFL	transport/PlatformSocket.h	/^#  define THRIFT_F_SETFL /;"	d
THRIFT_GAI_STRERROR	transport/PlatformSocket.h	/^#    define THRIFT_GAI_STRERROR /;"	d
THRIFT_GAI_STRERROR	transport/PlatformSocket.h	/^#    define THRIFT_GAI_STRERROR(/;"	d
THRIFT_GAI_STRERROR	transport/PlatformSocket.h	/^#  define THRIFT_GAI_STRERROR /;"	d
THRIFT_GETTIMEOFDAY	transport/PlatformSocket.h	/^#  define THRIFT_GETTIMEOFDAY /;"	d
THRIFT_GET_SOCKET_ERROR	transport/PlatformSocket.h	/^#  define THRIFT_GET_SOCKET_ERROR /;"	d
THRIFT_INVALID_SOCKET	transport/PlatformSocket.h	/^#  define THRIFT_INVALID_SOCKET /;"	d
THRIFT_LSEEK	transport/PlatformSocket.h	/^#  define THRIFT_LSEEK /;"	d
THRIFT_NO_SOCKET_CACHING	transport/PlatformSocket.h	/^#  define THRIFT_NO_SOCKET_CACHING /;"	d
THRIFT_OPEN	transport/PlatformSocket.h	/^#  define THRIFT_OPEN /;"	d
THRIFT_O_NONBLOCK	transport/PlatformSocket.h	/^#  define THRIFT_O_NONBLOCK /;"	d
THRIFT_POLL	transport/PlatformSocket.h	/^#  define THRIFT_POLL /;"	d
THRIFT_POLLFD	transport/PlatformSocket.h	/^#    define THRIFT_POLLFD /;"	d
THRIFT_POLLFD	transport/PlatformSocket.h	/^#  define THRIFT_POLLFD /;"	d
THRIFT_POLLIN	transport/PlatformSocket.h	/^#    define THRIFT_POLLIN /;"	d
THRIFT_POLLIN	transport/PlatformSocket.h	/^#  define THRIFT_POLLIN /;"	d
THRIFT_POLLOUT	transport/PlatformSocket.h	/^#    define THRIFT_POLLOUT /;"	d
THRIFT_POLLOUT	transport/PlatformSocket.h	/^#  define THRIFT_POLLOUT /;"	d
THRIFT_READ	transport/PlatformSocket.h	/^#  define THRIFT_READ /;"	d
THRIFT_SHUT_RDWR	transport/PlatformSocket.h	/^#  define THRIFT_SHUT_RDWR /;"	d
THRIFT_SLEEP_SEC	transport/PlatformSocket.h	/^#  define THRIFT_SLEEP_SEC /;"	d
THRIFT_SLEEP_USEC	transport/PlatformSocket.h	/^#  define THRIFT_SLEEP_USEC /;"	d
THRIFT_SNPRINTF	transport/PlatformSocket.h	/^#  define THRIFT_SNPRINTF /;"	d
THRIFT_SOCKET	transport/PlatformSocket.h	/^#  define THRIFT_SOCKET /;"	d
THRIFT_SOCKETPAIR	transport/PlatformSocket.h	/^#  define THRIFT_SOCKETPAIR /;"	d
THRIFT_SSIZET	transport/PlatformSocket.h	/^#  define THRIFT_SSIZET /;"	d
THRIFT_STAT	transport/PlatformSocket.h	/^#  define THRIFT_STAT /;"	d
THRIFT_TIMESPEC	transport/PlatformSocket.h	/^#  define THRIFT_TIMESPEC /;"	d
THRIFT_TMULTIPLEXEDPROCESSOR_H_	processor/TMultiplexedProcessor.h	/^#define THRIFT_TMULTIPLEXEDPROCESSOR_H_ /;"	d
THRIFT_TMULTIPLEXEDPROTOCOL_H_	protocol/TMultiplexedProtocol.h	/^#define THRIFT_TMULTIPLEXEDPROTOCOL_H_ /;"	d
THRIFT_TPROTOCOLDECORATOR_H_	protocol/TProtocolDecorator.h	/^#define THRIFT_TPROTOCOLDECORATOR_H_ /;"	d
THRIFT_UNUSED_VARIABLE	Thrift.h	/^#define THRIFT_UNUSED_VARIABLE(/;"	d
THRIFT_WRITE	transport/PlatformSocket.h	/^#  define THRIFT_WRITE /;"	d
THRIFT_htolel	protocol/TProtocol.h	/^#  define THRIFT_htolel(/;"	d
THRIFT_htolell	protocol/TProtocol.h	/^#  define THRIFT_htolell(/;"	d
THRIFT_htoles	protocol/TProtocol.h	/^#  define THRIFT_htoles(/;"	d
THRIFT_htonll	protocol/TProtocol.h	/^#  define THRIFT_htonll(/;"	d
THRIFT_letohl	protocol/TProtocol.h	/^#  define THRIFT_letohl(/;"	d
THRIFT_letohll	protocol/TProtocol.h	/^#  define THRIFT_letohll(/;"	d
THRIFT_letohs	protocol/TProtocol.h	/^#  define THRIFT_letohs(/;"	d
THRIFT_ntohll	protocol/TProtocol.h	/^#  define THRIFT_ntohll(/;"	d
THRIFT_strcasestr	transport/THttpServer.cpp	/^  #define THRIFT_strcasestr(/;"	d	file:
THRIFT_strncasecmp	transport/THttpServer.cpp	/^  #define THRIFT_strncasecmp(/;"	d	file:
THttpClient	transport/THttpClient.cpp	/^THttpClient::THttpClient(boost::shared_ptr<TTransport> transport,$/;"	f	class:apache::thrift::transport::THttpClient
THttpClient	transport/THttpClient.cpp	/^THttpClient::THttpClient(string host, int port, string path)$/;"	f	class:apache::thrift::transport::THttpClient
THttpClient	transport/THttpClient.h	/^class THttpClient : public THttpTransport {$/;"	c	namespace:apache::thrift::transport
THttpServer	transport/THttpServer.cpp	/^THttpServer::THttpServer(boost::shared_ptr<TTransport> transport) : THttpTransport(transport) {$/;"	f	class:apache::thrift::transport::THttpServer
THttpServer	transport/THttpServer.h	/^class THttpServer : public THttpTransport {$/;"	c	namespace:apache::thrift::transport
THttpServerTransportFactory	transport/THttpServer.h	/^  THttpServerTransportFactory() {}$/;"	f	class:apache::thrift::transport::THttpServerTransportFactory
THttpServerTransportFactory	transport/THttpServer.h	/^class THttpServerTransportFactory : public TTransportFactory {$/;"	c	namespace:apache::thrift::transport
THttpTransport	transport/THttpTransport.cpp	/^THttpTransport::THttpTransport(boost::shared_ptr<TTransport> transport)$/;"	f	class:apache::thrift::transport::THttpTransport
THttpTransport	transport/THttpTransport.h	/^class THttpTransport : public TVirtualTransport<THttpTransport> {$/;"	c	namespace:apache::thrift::transport
TIMED_OUT	transport/TTransportException.h	/^    TIMED_OUT = 2,$/;"	e	enum:apache::thrift::transport::TTransportException::TTransportExceptionType
TIME_WITH_SYS_TIME	config.h	/^#define TIME_WITH_SYS_TIME /;"	d
TInputRecursionTracker	protocol/TProtocol.h	/^  TInputRecursionTracker(TProtocol &prot) : prot_(prot) {$/;"	f	struct:apache::thrift::protocol::TInputRecursionTracker
TInputRecursionTracker	protocol/TProtocol.h	/^struct TInputRecursionTracker {$/;"	s	namespace:apache::thrift::protocol
TJSONContext	protocol/TJSONProtocol.cpp	/^  TJSONContext(){};$/;"	f	class:apache::thrift::protocol::TJSONContext
TJSONContext	protocol/TJSONProtocol.cpp	/^class TJSONContext {$/;"	c	namespace:apache::thrift::protocol	file:
TJSONProtocol	protocol/TJSONProtocol.cpp	/^TJSONProtocol::TJSONProtocol(boost::shared_ptr<TTransport> ptrans)$/;"	f	class:apache::thrift::protocol::TJSONProtocol
TJSONProtocol	protocol/TJSONProtocol.h	/^class TJSONProtocol : public TVirtualProtocol<TJSONProtocol> {$/;"	c	namespace:apache::thrift::protocol
TJSONProtocolFactory	protocol/TJSONProtocol.h	/^  TJSONProtocolFactory() {}$/;"	f	class:apache::thrift::protocol::TJSONProtocolFactory
TJSONProtocolFactory	protocol/TJSONProtocol.h	/^class TJSONProtocolFactory : public TProtocolFactory {$/;"	c	namespace:apache::thrift::protocol
TLEBinaryProtocol	protocol/TBinaryProtocol.h	/^typedef TBinaryProtocolT<TTransport, TNetworkLittleEndian> TLEBinaryProtocol;$/;"	t	namespace:apache::thrift::protocol
TLEBinaryProtocolFactory	protocol/TBinaryProtocol.h	/^typedef TBinaryProtocolFactoryT<TTransport, TNetworkLittleEndian> TLEBinaryProtocolFactory;$/;"	t	namespace:apache::thrift::protocol
TLSv1_0	transport/TSSLSocket.h	/^  TLSv1_0 = 3,  \/\/ Supports TLSv1_0 or later.$/;"	e	enum:apache::thrift::transport::SSLProtocol
TLSv1_1	transport/TSSLSocket.h	/^  TLSv1_1 = 4,  \/\/ Supports TLSv1_1 or later.$/;"	e	enum:apache::thrift::transport::SSLProtocol
TLSv1_2	transport/TSSLSocket.h	/^  TLSv1_2 = 5,  \/\/ Supports TLSv1_2 or later.$/;"	e	enum:apache::thrift::transport::SSLProtocol
TManualResetEvent	windows/Sync.h	/^  TManualResetEvent() {$/;"	f	struct:apache::thrift::TManualResetEvent
TManualResetEvent	windows/Sync.h	/^struct TManualResetEvent : boost::noncopyable {$/;"	s	namespace:apache::thrift
TMemoryBuffer	transport/TBufferTransports.h	/^  TMemoryBuffer() { initCommon(NULL, defaultSize, true, 0); }$/;"	f	class:apache::thrift::transport::TMemoryBuffer
TMemoryBuffer	transport/TBufferTransports.h	/^  TMemoryBuffer(uint32_t sz) { initCommon(NULL, sz, true, 0); }$/;"	f	class:apache::thrift::transport::TMemoryBuffer
TMemoryBuffer	transport/TBufferTransports.h	/^  TMemoryBuffer(uint8_t* buf, uint32_t sz, MemoryPolicy policy = OBSERVE) {$/;"	f	class:apache::thrift::transport::TMemoryBuffer
TMemoryBuffer	transport/TBufferTransports.h	/^class TMemoryBuffer : public TVirtualTransport<TMemoryBuffer, TBufferBase> {$/;"	c	namespace:apache::thrift::transport
TMessageType	protocol/TProtocol.h	/^enum TMessageType { \/\/thrift支持的消息类型$/;"	g	namespace:apache::thrift::protocol
TMultiplexedProcessor	processor/TMultiplexedProcessor.h	/^class TMultiplexedProcessor : public TProcessor {$/;"	c	namespace:apache::thrift
TMultiplexedProtocol	protocol/TMultiplexedProtocol.h	/^  TMultiplexedProtocol(shared_ptr<TProtocol> _protocol, const std::string& _serviceName)$/;"	f	class:apache::thrift::protocol::TMultiplexedProtocol
TMultiplexedProtocol	protocol/TMultiplexedProtocol.h	/^class TMultiplexedProtocol : public TProtocolDecorator {$/;"	c	namespace:apache::thrift::protocol
TNamedPipeImpl	transport/TPipe.cpp	/^  explicit TNamedPipeImpl(TAutoHandle &pipehandle) : Pipe_(pipehandle.release()) {}$/;"	f	class:apache::thrift::transport::TNamedPipeImpl
TNamedPipeImpl	transport/TPipe.cpp	/^class TNamedPipeImpl : public TPipeImpl {$/;"	c	namespace:apache::thrift::transport	file:
TNamedPipeServer	transport/TPipeServer.cpp	/^  TNamedPipeServer(const std::string& pipename, uint32_t bufsize, uint32_t maxconnections)$/;"	f	class:apache::thrift::transport::TNamedPipeServer
TNamedPipeServer	transport/TPipeServer.cpp	/^class TNamedPipeServer : public TPipeServerImpl {$/;"	c	namespace:apache::thrift::transport	file:
TNetworkBigEndian	protocol/TProtocol.h	/^struct TNetworkBigEndian$/;"	s	namespace:apache::thrift::protocol
TNetworkLittleEndian	protocol/TProtocol.h	/^struct TNetworkLittleEndian$/;"	s	namespace:apache::thrift::protocol
TNonblockingIOThread	server/TNonblockingServer.cpp	/^TNonblockingIOThread::TNonblockingIOThread(TNonblockingServer* server,$/;"	f	class:apache::thrift::server::TNonblockingIOThread
TNonblockingIOThread	server/TNonblockingServer.h	/^class TNonblockingIOThread : public Runnable {$/;"	c	namespace:apache::thrift::server
TNonblockingServer	server/TNonblockingServer.h	/^  TNonblockingServer(const boost::shared_ptr<TProcessor>& processor, int port)$/;"	f	class:apache::thrift::server::TNonblockingServer
TNonblockingServer	server/TNonblockingServer.h	/^  TNonblockingServer(const boost::shared_ptr<TProcessor>& processor,$/;"	f	class:apache::thrift::server::TNonblockingServer
TNonblockingServer	server/TNonblockingServer.h	/^  TNonblockingServer(const boost::shared_ptr<TProcessorFactory>& processorFactory, int port)$/;"	f	class:apache::thrift::server::TNonblockingServer
TNonblockingServer	server/TNonblockingServer.h	/^  TNonblockingServer(const boost::shared_ptr<TProcessorFactory>& processorFactory,$/;"	f	class:apache::thrift::server::TNonblockingServer
TNonblockingServer	server/TNonblockingServer.h	/^class TNonblockingServer : public TServer {$/;"	c	namespace:apache::thrift::server
TNullTransport	transport/TTransportUtils.h	/^  TNullTransport() {}$/;"	f	class:apache::thrift::transport::TNullTransport
TNullTransport	transport/TTransportUtils.h	/^class TNullTransport : public TVirtualTransport<TNullTransport> {$/;"	c	namespace:apache::thrift::transport
TOutput	TOutput.h	/^  TOutput() : f_(&errorTimeWrapper) {}$/;"	f	class:apache::thrift::TOutput
TOutput	TOutput.h	/^class TOutput {$/;"	c	namespace:apache::thrift
TOutputRecursionTracker	protocol/TProtocol.h	/^  TOutputRecursionTracker(TProtocol &prot) : prot_(prot) {$/;"	f	struct:apache::thrift::protocol::TOutputRecursionTracker
TOutputRecursionTracker	protocol/TProtocol.h	/^struct TOutputRecursionTracker {$/;"	s	namespace:apache::thrift::protocol
TOverlappedSubmissionThread	windows/OverlappedSubmissionThread.cpp	/^TOverlappedSubmissionThread::TOverlappedSubmissionThread() {$/;"	f	class:apache::thrift::transport::TOverlappedSubmissionThread
TOverlappedSubmissionThread	windows/OverlappedSubmissionThread.h	/^class TOverlappedSubmissionThread : boost::noncopyable {$/;"	c	namespace:apache::thrift::transport
TOverlappedWorkItem	windows/OverlappedSubmissionThread.cpp	/^TOverlappedWorkItem::TOverlappedWorkItem()$/;"	f	class:apache::thrift::transport::TOverlappedWorkItem
TOverlappedWorkItem	windows/OverlappedSubmissionThread.h	/^DECLSPEC_ALIGN(MEMORY_ALLOCATION_ALIGNMENT) struct TOverlappedWorkItem : public SLIST_ENTRY {$/;"	s	namespace:apache::thrift::transport
TOverloadAction	server/TNonblockingServer.h	/^enum TOverloadAction {$/;"	g	namespace:apache::thrift::server
TPIPE_SERVER_MAX_CONNS_DEFAULT	transport/TPipeServer.h	/^#define TPIPE_SERVER_MAX_CONNS_DEFAULT /;"	d
TPipe	transport/TPipe.cpp	/^TPipe::TPipe() : TimeoutSeconds_(3), isAnonymous_(false) {$/;"	f	class:apache::thrift::transport::TPipe
TPipe	transport/TPipe.cpp	/^TPipe::TPipe(HANDLE Pipe)$/;"	f	class:apache::thrift::transport::TPipe
TPipe	transport/TPipe.cpp	/^TPipe::TPipe(HANDLE PipeRd, HANDLE PipeWrt)$/;"	f	class:apache::thrift::transport::TPipe
TPipe	transport/TPipe.cpp	/^TPipe::TPipe(TAutoHandle &Pipe)$/;"	f	class:apache::thrift::transport::TPipe
TPipe	transport/TPipe.cpp	/^TPipe::TPipe(const char* pipename) : TimeoutSeconds_(3), isAnonymous_(false) {$/;"	f	class:apache::thrift::transport::TPipe
TPipe	transport/TPipe.cpp	/^TPipe::TPipe(const std::string& pipename) : TimeoutSeconds_(3), isAnonymous_(false) {$/;"	f	class:apache::thrift::transport::TPipe
TPipe	transport/TPipe.h	/^class TPipe : public TVirtualTransport<TPipe> {$/;"	c	namespace:apache::thrift::transport
TPipeImpl	transport/TPipe.cpp	/^  TPipeImpl() {}$/;"	f	class:apache::thrift::transport::TPipeImpl
TPipeImpl	transport/TPipe.cpp	/^class TPipeImpl : boost::noncopyable {$/;"	c	namespace:apache::thrift::transport	file:
TPipeServer	transport/TPipeServer.cpp	/^TPipeServer::TPipeServer() : bufsize_(1024), isAnonymous_(true) {$/;"	f	class:apache::thrift::transport::TPipeServer
TPipeServer	transport/TPipeServer.cpp	/^TPipeServer::TPipeServer(const std::string& pipename) : bufsize_(1024), isAnonymous_(false) {$/;"	f	class:apache::thrift::transport::TPipeServer
TPipeServer	transport/TPipeServer.cpp	/^TPipeServer::TPipeServer(const std::string& pipename, uint32_t bufsize)$/;"	f	class:apache::thrift::transport::TPipeServer
TPipeServer	transport/TPipeServer.cpp	/^TPipeServer::TPipeServer(const std::string& pipename, uint32_t bufsize, uint32_t maxconnections)$/;"	f	class:apache::thrift::transport::TPipeServer
TPipeServer	transport/TPipeServer.cpp	/^TPipeServer::TPipeServer(int bufsize) : bufsize_(bufsize), isAnonymous_(true) {$/;"	f	class:apache::thrift::transport::TPipeServer
TPipeServer	transport/TPipeServer.h	/^class TPipeServer : public TServerTransport {$/;"	c	namespace:apache::thrift::transport
TPipeServerImpl	transport/TPipeServer.cpp	/^  TPipeServerImpl() {}$/;"	f	class:apache::thrift::transport::TPipeServerImpl
TPipeServerImpl	transport/TPipeServer.cpp	/^class TPipeServerImpl : boost::noncopyable {$/;"	c	namespace:apache::thrift::transport	file:
TPipedFileReaderTransport	transport/TTransportUtils.cpp	/^TPipedFileReaderTransport::TPipedFileReaderTransport($/;"	f	class:apache::thrift::transport::TPipedFileReaderTransport
TPipedFileReaderTransport	transport/TTransportUtils.h	/^class TPipedFileReaderTransport : public TPipedTransport, public TFileReaderTransport {$/;"	c	namespace:apache::thrift::transport
TPipedFileReaderTransportFactory	transport/TTransportUtils.h	/^  TPipedFileReaderTransportFactory() {}$/;"	f	class:apache::thrift::transport::TPipedFileReaderTransportFactory
TPipedFileReaderTransportFactory	transport/TTransportUtils.h	/^  TPipedFileReaderTransportFactory(boost::shared_ptr<TTransport> dstTrans)$/;"	f	class:apache::thrift::transport::TPipedFileReaderTransportFactory
TPipedFileReaderTransportFactory	transport/TTransportUtils.h	/^class TPipedFileReaderTransportFactory : public TPipedTransportFactory {$/;"	c	namespace:apache::thrift::transport
TPipedTransport	transport/TTransportUtils.h	/^  TPipedTransport(boost::shared_ptr<TTransport> srcTrans, boost::shared_ptr<TTransport> dstTrans)$/;"	f	class:apache::thrift::transport::TPipedTransport
TPipedTransport	transport/TTransportUtils.h	/^  TPipedTransport(boost::shared_ptr<TTransport> srcTrans,$/;"	f	class:apache::thrift::transport::TPipedTransport
TPipedTransport	transport/TTransportUtils.h	/^class TPipedTransport : virtual public TTransport {$/;"	c	namespace:apache::thrift::transport
TPipedTransportFactory	transport/TTransportUtils.h	/^  TPipedTransportFactory() {}$/;"	f	class:apache::thrift::transport::TPipedTransportFactory
TPipedTransportFactory	transport/TTransportUtils.h	/^  TPipedTransportFactory(boost::shared_ptr<TTransport> dstTrans) {$/;"	f	class:apache::thrift::transport::TPipedTransportFactory
TPipedTransportFactory	transport/TTransportUtils.h	/^class TPipedTransportFactory : public TTransportFactory {$/;"	c	namespace:apache::thrift::transport
TProcessor	TProcessor.h	/^  TProcessor() {}$/;"	f	class:apache::thrift::TProcessor
TProcessor	TProcessor.h	/^class TProcessor {$/;"	c	namespace:apache::thrift
TProcessorContextFreer	TProcessor.h	/^  TProcessorContextFreer(TProcessorEventHandler* handler, void* context, const char* method)$/;"	f	class:apache::thrift::TProcessorContextFreer
TProcessorContextFreer	TProcessor.h	/^class TProcessorContextFreer {$/;"	c	namespace:apache::thrift
TProcessorEventHandler	TProcessor.h	/^  TProcessorEventHandler() {}$/;"	f	class:apache::thrift::TProcessorEventHandler
TProcessorEventHandler	TProcessor.h	/^class TProcessorEventHandler {$/;"	c	namespace:apache::thrift
TProcessorFactory	TProcessor.h	/^class TProcessorFactory {$/;"	c	namespace:apache::thrift
TProtocol	protocol/TProtocol.h	/^  TProtocol() {}$/;"	f	class:apache::thrift::protocol::TProtocol
TProtocol	protocol/TProtocol.h	/^  TProtocol(boost::shared_ptr<TTransport> ptrans)$/;"	f	class:apache::thrift::protocol::TProtocol
TProtocol	protocol/TProtocol.h	/^class TProtocol {$/;"	c	namespace:apache::thrift::protocol
TProtocolDecorator	protocol/TProtocolDecorator.h	/^  TProtocolDecorator(shared_ptr<TProtocol> proto)$/;"	f	class:apache::thrift::protocol::TProtocolDecorator
TProtocolDecorator	protocol/TProtocolDecorator.h	/^class TProtocolDecorator : public TProtocol {$/;"	c	namespace:apache::thrift::protocol
TProtocolDefaults	protocol/TVirtualProtocol.h	/^  TProtocolDefaults(boost::shared_ptr<TTransport> ptrans) : TProtocol(ptrans) {}$/;"	f	class:apache::thrift::protocol::TProtocolDefaults
TProtocolDefaults	protocol/TVirtualProtocol.h	/^class TProtocolDefaults : public TProtocol {$/;"	c	namespace:apache::thrift::protocol
TProtocolException	protocol/TProtocolException.h	/^  TProtocolException() : apache::thrift::TException(), type_(UNKNOWN) {}$/;"	f	class:apache::thrift::protocol::TProtocolException
TProtocolException	protocol/TProtocolException.h	/^  TProtocolException(TProtocolExceptionType type) : apache::thrift::TException(), type_(type) {}$/;"	f	class:apache::thrift::protocol::TProtocolException
TProtocolException	protocol/TProtocolException.h	/^  TProtocolException(TProtocolExceptionType type, const std::string& message)$/;"	f	class:apache::thrift::protocol::TProtocolException
TProtocolException	protocol/TProtocolException.h	/^  TProtocolException(const std::string& message)$/;"	f	class:apache::thrift::protocol::TProtocolException
TProtocolException	protocol/TProtocolException.h	/^class TProtocolException : public apache::thrift::TException {$/;"	c	namespace:apache::thrift::protocol
TProtocolExceptionType	protocol/TProtocolException.h	/^  enum TProtocolExceptionType {$/;"	g	class:apache::thrift::protocol::TProtocolException
TProtocolFactory	protocol/TProtocol.h	/^  TProtocolFactory() {}$/;"	f	class:apache::thrift::protocol::TProtocolFactory
TProtocolFactory	protocol/TProtocol.h	/^class TProtocolFactory {$/;"	c	namespace:apache::thrift::protocol
TProtocolTap	protocol/TProtocolTap.h	/^  TProtocolTap(boost::shared_ptr<TProtocol> source, boost::shared_ptr<TProtocol> sink)$/;"	f	class:apache::thrift::protocol::TProtocolTap
TProtocolTap	protocol/TProtocolTap.h	/^class TProtocolTap : public TVirtualProtocol<TProtocolTap> {$/;"	c	namespace:apache::thrift::protocol
TQIODeviceTransport	qt/TQIODeviceTransport.cpp	/^TQIODeviceTransport::TQIODeviceTransport(shared_ptr<QIODevice> dev) : dev_(dev) {$/;"	f	class:apache::thrift::transport::TQIODeviceTransport
TQIODeviceTransport	qt/TQIODeviceTransport.h	/^class TQIODeviceTransport$/;"	c	namespace:apache::thrift::transport
TQTcpServer	qt/TQTcpServer.cpp	/^TQTcpServer::TQTcpServer(shared_ptr<QTcpServer> server,$/;"	f	class:apache::thrift::async::TQTcpServer
TQTcpServer	qt/TQTcpServer.h	/^class TQTcpServer : public QObject {$/;"	c	namespace:apache::thrift::async
TSSLException	transport/TSSLSocket.h	/^  TSSLException(const std::string& message)$/;"	f	class:apache::thrift::transport::TSSLException
TSSLException	transport/TSSLSocket.h	/^class TSSLException : public TTransportException {$/;"	c	namespace:apache::thrift::transport
TSSLServerSocket	transport/TSSLServerSocket.cpp	/^TSSLServerSocket::TSSLServerSocket(const std::string& address,$/;"	f	class:apache::thrift::transport::TSSLServerSocket
TSSLServerSocket	transport/TSSLServerSocket.cpp	/^TSSLServerSocket::TSSLServerSocket(int port, boost::shared_ptr<TSSLSocketFactory> factory)$/;"	f	class:apache::thrift::transport::TSSLServerSocket
TSSLServerSocket	transport/TSSLServerSocket.cpp	/^TSSLServerSocket::TSSLServerSocket(int port,$/;"	f	class:apache::thrift::transport::TSSLServerSocket
TSSLServerSocket	transport/TSSLServerSocket.h	/^class TSSLServerSocket : public TServerSocket {$/;"	c	namespace:apache::thrift::transport
TSSLSocket	transport/TSSLSocket.cpp	/^TSSLSocket::TSSLSocket(boost::shared_ptr<SSLContext> ctx)$/;"	f	class:apache::thrift::transport::TSSLSocket
TSSLSocket	transport/TSSLSocket.cpp	/^TSSLSocket::TSSLSocket(boost::shared_ptr<SSLContext> ctx, THRIFT_SOCKET socket)$/;"	f	class:apache::thrift::transport::TSSLSocket
TSSLSocket	transport/TSSLSocket.cpp	/^TSSLSocket::TSSLSocket(boost::shared_ptr<SSLContext> ctx, string host, int port)$/;"	f	class:apache::thrift::transport::TSSLSocket
TSSLSocket	transport/TSSLSocket.h	/^class TSSLSocket : public TSocket {$/;"	c	namespace:apache::thrift::transport
TSSLSocketFactory	transport/TSSLSocket.cpp	/^TSSLSocketFactory::TSSLSocketFactory(SSLProtocol protocol) : server_(false) {$/;"	f	class:apache::thrift::transport::TSSLSocketFactory
TSSLSocketFactory	transport/TSSLSocket.h	/^class TSSLSocketFactory {$/;"	c	namespace:apache::thrift::transport
TServer	server/TServer.h	/^  TServer(const boost::shared_ptr<TProcessor>& processor)$/;"	f	class:apache::thrift::server::TServer
TServer	server/TServer.h	/^  TServer(const boost::shared_ptr<TProcessor>& processor,$/;"	f	class:apache::thrift::server::TServer
TServer	server/TServer.h	/^  TServer(const boost::shared_ptr<TProcessorFactory>& processorFactory)$/;"	f	class:apache::thrift::server::TServer
TServer	server/TServer.h	/^  TServer(const boost::shared_ptr<TProcessorFactory>& processorFactory,$/;"	f	class:apache::thrift::server::TServer
TServer	server/TServer.h	/^class TServer : public concurrency::Runnable {$/;"	c	namespace:apache::thrift::server
TServerEventHandler	server/TServer.h	/^  TServerEventHandler() {}$/;"	f	class:apache::thrift::server::TServerEventHandler
TServerEventHandler	server/TServer.h	/^class TServerEventHandler {$/;"	c	namespace:apache::thrift::server
TServerFramework	server/TServerFramework.cpp	/^TServerFramework::TServerFramework(const shared_ptr<TProcessor>& processor,$/;"	f	class:apache::thrift::server::TServerFramework
TServerFramework	server/TServerFramework.cpp	/^TServerFramework::TServerFramework(const shared_ptr<TProcessorFactory>& processorFactory,$/;"	f	class:apache::thrift::server::TServerFramework
TServerFramework	server/TServerFramework.h	/^class TServerFramework : public TServer {$/;"	c	namespace:apache::thrift::server
TServerSocket	transport/TServerSocket.cpp	/^TServerSocket::TServerSocket(const string& address, int port)$/;"	f	class:apache::thrift::transport::TServerSocket
TServerSocket	transport/TServerSocket.cpp	/^TServerSocket::TServerSocket(const string& path)$/;"	f	class:apache::thrift::transport::TServerSocket
TServerSocket	transport/TServerSocket.cpp	/^TServerSocket::TServerSocket(int port)$/;"	f	class:apache::thrift::transport::TServerSocket
TServerSocket	transport/TServerSocket.cpp	/^TServerSocket::TServerSocket(int port, int sendTimeout, int recvTimeout)$/;"	f	class:apache::thrift::transport::TServerSocket
TServerSocket	transport/TServerSocket.h	/^class TServerSocket : public TServerTransport {$/;"	c	namespace:apache::thrift::transport
TServerTransport	transport/TServerTransport.h	/^  TServerTransport() {}$/;"	f	class:apache::thrift::transport::TServerTransport
TServerTransport	transport/TServerTransport.h	/^class TServerTransport {$/;"	c	namespace:apache::thrift::transport
TShortReadTransport	transport/TShortReadTransport.h	/^  TShortReadTransport(boost::shared_ptr<TTransport> transport, double full_prob)$/;"	f	class:apache::thrift::transport::test::TShortReadTransport
TShortReadTransport	transport/TShortReadTransport.h	/^class TShortReadTransport : public TVirtualTransport<TShortReadTransport> {$/;"	c	namespace:apache::thrift::transport::test
TSimpleFileTransport	transport/TSimpleFileTransport.cpp	/^TSimpleFileTransport::TSimpleFileTransport(const std::string& path, bool read, bool write)$/;"	f	class:apache::thrift::transport::TSimpleFileTransport
TSimpleFileTransport	transport/TSimpleFileTransport.h	/^class TSimpleFileTransport : public TFDTransport {$/;"	c	namespace:apache::thrift::transport
TSimpleServer	server/TSimpleServer.cpp	/^TSimpleServer::TSimpleServer(const shared_ptr<TProcessor>& processor,$/;"	f	class:apache::thrift::server::TSimpleServer
TSimpleServer	server/TSimpleServer.cpp	/^TSimpleServer::TSimpleServer(const shared_ptr<TProcessorFactory>& processorFactory,$/;"	f	class:apache::thrift::server::TSimpleServer
TSimpleServer	server/TSimpleServer.h	/^class TSimpleServer : public TServerFramework {$/;"	c	namespace:apache::thrift::server
TSingletonProcessorFactory	TProcessor.h	/^  TSingletonProcessorFactory(boost::shared_ptr<TProcessor> processor) : processor_(processor) {}$/;"	f	class:apache::thrift::TSingletonProcessorFactory
TSingletonProcessorFactory	TProcessor.h	/^class TSingletonProcessorFactory : public TProcessorFactory {$/;"	c	namespace:apache::thrift
TSocket	transport/TSocket.cpp	/^TSocket::TSocket()$/;"	f	class:apache::thrift::transport::TSocket
TSocket	transport/TSocket.cpp	/^TSocket::TSocket(THRIFT_SOCKET socket)$/;"	f	class:apache::thrift::transport::TSocket
TSocket	transport/TSocket.cpp	/^TSocket::TSocket(THRIFT_SOCKET socket, boost::shared_ptr<THRIFT_SOCKET> interruptListener)$/;"	f	class:apache::thrift::transport::TSocket
TSocket	transport/TSocket.cpp	/^TSocket::TSocket(const string& host, int port)$/;"	f	class:apache::thrift::transport::TSocket
TSocket	transport/TSocket.cpp	/^TSocket::TSocket(const string& path)$/;"	f	class:apache::thrift::transport::TSocket
TSocket	transport/TSocket.h	/^class TSocket : public TVirtualTransport<TSocket> {$/;"	c	namespace:apache::thrift::transport
TSocketPool	transport/TSocketPool.cpp	/^TSocketPool::TSocketPool()$/;"	f	class:apache::thrift::transport::TSocketPool
TSocketPool	transport/TSocketPool.cpp	/^TSocketPool::TSocketPool(const string& host, int port)$/;"	f	class:apache::thrift::transport::TSocketPool
TSocketPool	transport/TSocketPool.cpp	/^TSocketPool::TSocketPool(const vector<pair<string, int> >& servers)$/;"	f	class:apache::thrift::transport::TSocketPool
TSocketPool	transport/TSocketPool.cpp	/^TSocketPool::TSocketPool(const vector<shared_ptr<TSocketPoolServer> >& servers)$/;"	f	class:apache::thrift::transport::TSocketPool
TSocketPool	transport/TSocketPool.cpp	/^TSocketPool::TSocketPool(const vector<string>& hosts, const vector<int>& ports)$/;"	f	class:apache::thrift::transport::TSocketPool
TSocketPool	transport/TSocketPool.h	/^class TSocketPool : public TSocket {$/;"	c	namespace:apache::thrift::transport
TSocketPoolServer	transport/TSocketPool.cpp	/^TSocketPoolServer::TSocketPoolServer()$/;"	f	class:apache::thrift::transport::TSocketPoolServer
TSocketPoolServer	transport/TSocketPool.cpp	/^TSocketPoolServer::TSocketPoolServer(const string& host, int port)$/;"	f	class:apache::thrift::transport::TSocketPoolServer
TSocketPoolServer	transport/TSocketPool.h	/^class TSocketPoolServer {$/;"	c	namespace:apache::thrift::transport
TSocketState	server/TNonblockingServer.cpp	/^enum TSocketState { SOCKET_RECV_FRAMING, SOCKET_RECV, SOCKET_SEND };$/;"	g	namespace:apache::thrift::server	file:
TThreadPoolServer	server/TThreadPoolServer.cpp	/^TThreadPoolServer::TThreadPoolServer(const shared_ptr<TProcessor>& processor,$/;"	f	class:apache::thrift::server::TThreadPoolServer
TThreadPoolServer	server/TThreadPoolServer.cpp	/^TThreadPoolServer::TThreadPoolServer(const shared_ptr<TProcessorFactory>& processorFactory,$/;"	f	class:apache::thrift::server::TThreadPoolServer
TThreadPoolServer	server/TThreadPoolServer.h	/^class TThreadPoolServer : public TServerFramework {$/;"	c	namespace:apache::thrift::server
TThreadedServer	server/TThreadedServer.cpp	/^TThreadedServer::TThreadedServer(const shared_ptr<TProcessor>& processor,$/;"	f	class:apache::thrift::server::TThreadedServer
TThreadedServer	server/TThreadedServer.cpp	/^TThreadedServer::TThreadedServer(const shared_ptr<TProcessorFactory>& processorFactory,$/;"	f	class:apache::thrift::server::TThreadedServer
TThreadedServer	server/TThreadedServer.h	/^class TThreadedServer : public TServerFramework {$/;"	c	namespace:apache::thrift::server
TTransport	transport/TTransport.h	/^  TTransport() {}$/;"	f	class:apache::thrift::transport::TTransport
TTransport	transport/TTransport.h	/^class TTransport {$/;"	c	namespace:apache::thrift::transport
TTransportDefaults	transport/TVirtualTransport.h	/^  TTransportDefaults() {}$/;"	f	class:apache::thrift::transport::TTransportDefaults
TTransportDefaults	transport/TVirtualTransport.h	/^class TTransportDefaults : public TTransport {$/;"	c	namespace:apache::thrift::transport
TTransportException	transport/TTransportException.h	/^  TTransportException() : apache::thrift::TException(), type_(UNKNOWN) {}$/;"	f	class:apache::thrift::transport::TTransportException
TTransportException	transport/TTransportException.h	/^  TTransportException(TTransportExceptionType type) : apache::thrift::TException(), type_(type) {}$/;"	f	class:apache::thrift::transport::TTransportException
TTransportException	transport/TTransportException.h	/^  TTransportException(TTransportExceptionType type, const std::string& message)$/;"	f	class:apache::thrift::transport::TTransportException
TTransportException	transport/TTransportException.h	/^  TTransportException(TTransportExceptionType type, const std::string& message, int errno_copy)$/;"	f	class:apache::thrift::transport::TTransportException
TTransportException	transport/TTransportException.h	/^  TTransportException(const std::string& message)$/;"	f	class:apache::thrift::transport::TTransportException
TTransportException	transport/TTransportException.h	/^class TTransportException : public apache::thrift::TException {$/;"	c	namespace:apache::thrift::transport
TTransportExceptionType	transport/TTransportException.h	/^  enum TTransportExceptionType {$/;"	g	class:apache::thrift::transport::TTransportException
TTransportFactory	transport/TTransport.h	/^  TTransportFactory() {}$/;"	f	class:apache::thrift::transport::TTransportFactory
TTransportFactory	transport/TTransport.h	/^class TTransportFactory {$/;"	c	namespace:apache::thrift::transport
TType	protocol/TProtocol.h	/^enum TType { \/\/Thrift协议支持的数据类型枚举定义$/;"	g	namespace:apache::thrift::protocol
TTypeToCType	protocol/TCompactProtocol.tcc	/^const int8_t TTypeToCType[16] = {$/;"	m	namespace:apache::thrift::protocol::detail::compact	file:
TVirtualProtocol	protocol/TVirtualProtocol.h	/^  TVirtualProtocol(boost::shared_ptr<TTransport> ptrans) : Super_(ptrans) {}$/;"	f	class:apache::thrift::protocol::TVirtualProtocol
TVirtualProtocol	protocol/TVirtualProtocol.h	/^class TVirtualProtocol : public Super_ {$/;"	c	namespace:apache::thrift::protocol
TVirtualTransport	transport/TVirtualTransport.h	/^  TVirtualTransport() {}$/;"	f	class:apache::thrift::transport::TVirtualTransport
TVirtualTransport	transport/TVirtualTransport.h	/^  TVirtualTransport(Arg1_ const& a1, Arg2_ const& a2)$/;"	f	class:apache::thrift::transport::TVirtualTransport
TVirtualTransport	transport/TVirtualTransport.h	/^  TVirtualTransport(Arg_ const& arg)$/;"	f	class:apache::thrift::transport::TVirtualTransport
TVirtualTransport	transport/TVirtualTransport.h	/^class TVirtualTransport : public Super_ {$/;"	c	namespace:apache::thrift::transport
TWaitableNamedPipeImpl	transport/TPipe.cpp	/^  explicit TWaitableNamedPipeImpl(TAutoHandle &pipehandle)$/;"	f	class:apache::thrift::transport::TWaitableNamedPipeImpl
TWaitableNamedPipeImpl	transport/TPipe.cpp	/^class TWaitableNamedPipeImpl : public TPipeImpl {$/;"	c	namespace:apache::thrift::transport	file:
TWinsockSingleton	windows/TWinsockSingleton.cpp	/^TWinsockSingleton::TWinsockSingleton(void) {$/;"	f	class:apache::thrift::transport::TWinsockSingleton
TWinsockSingleton	windows/TWinsockSingleton.h	/^class TWinsockSingleton : private boost::noncopyable {$/;"	c	namespace:apache::thrift::transport
TYPE_BITS	protocol/TCompactProtocol.h	/^  static const int8_t TYPE_BITS = 0x07;          \/\/ 0000 0111$/;"	m	class:apache::thrift::protocol::TCompactProtocolT
TYPE_MASK	protocol/TCompactProtocol.h	/^  static const int8_t TYPE_MASK = (int8_t)0xE0u; \/\/ 1110 0000$/;"	m	class:apache::thrift::protocol::TCompactProtocolT
TYPE_SHIFT_AMOUNT	protocol/TCompactProtocol.h	/^  static const int32_t TYPE_SHIFT_AMOUNT = 5;$/;"	m	class:apache::thrift::protocol::TCompactProtocolT
TZlibTransport	transport/TZlibTransport.h	/^  TZlibTransport(boost::shared_ptr<TTransport> transport,$/;"	f	class:apache::thrift::transport::TZlibTransport
TZlibTransport	transport/TZlibTransport.h	/^class TZlibTransport : public TVirtualTransport<TZlibTransport> {$/;"	c	namespace:apache::thrift::transport
TZlibTransportException	transport/TZlibTransport.h	/^  TZlibTransportException(int status, const char* msg)$/;"	f	class:apache::thrift::transport::TZlibTransportException
TZlibTransportException	transport/TZlibTransport.h	/^class TZlibTransportException : public TTransportException {$/;"	c	namespace:apache::thrift::transport
TZlibTransportFactory	transport/TZlibTransport.h	/^  TZlibTransportFactory() {}$/;"	f	class:apache::thrift::transport::TZlibTransportFactory
TZlibTransportFactory	transport/TZlibTransport.h	/^class TZlibTransportFactory : public TTransportFactory {$/;"	c	namespace:apache::thrift::transport
T_BOOL	protocol/TProtocol.h	/^  T_BOOL       = 2,$/;"	e	enum:apache::thrift::protocol::TType
T_BYTE	protocol/TProtocol.h	/^  T_BYTE       = 3,$/;"	e	enum:apache::thrift::protocol::TType
T_CALL	protocol/TProtocol.h	/^  T_CALL       = 1,$/;"	e	enum:apache::thrift::protocol::TMessageType
T_DEBUG	TLogging.h	/^#define T_DEBUG(/;"	d
T_DEBUG_L	TLogging.h	/^#define T_DEBUG_L(/;"	d
T_DEBUG_T	TLogging.h	/^#define T_DEBUG_T(/;"	d
T_DOUBLE	protocol/TProtocol.h	/^  T_DOUBLE     = 4,$/;"	e	enum:apache::thrift::protocol::TType
T_ERROR	TLogging.h	/^#define T_ERROR(/;"	d
T_ERROR_ABORT	TLogging.h	/^#define T_ERROR_ABORT(/;"	d
T_EXCEPTION	protocol/TProtocol.h	/^  T_EXCEPTION  = 3,$/;"	e	enum:apache::thrift::protocol::TMessageType
T_GENERIC_PROTOCOL	TLogging.h	/^#define T_GENERIC_PROTOCOL(/;"	d
T_GLOBAL_DEBUGGING_LEVEL	TLogging.h	/^#define T_GLOBAL_DEBUGGING_LEVEL /;"	d
T_GLOBAL_LOGGING_LEVEL	TLogging.h	/^#define T_GLOBAL_LOGGING_LEVEL /;"	d
T_I08	protocol/TProtocol.h	/^  T_I08        = 3,$/;"	e	enum:apache::thrift::protocol::TType
T_I16	protocol/TProtocol.h	/^  T_I16        = 6,$/;"	e	enum:apache::thrift::protocol::TType
T_I32	protocol/TProtocol.h	/^  T_I32        = 8,$/;"	e	enum:apache::thrift::protocol::TType
T_I64	protocol/TProtocol.h	/^  T_I64        = 10,$/;"	e	enum:apache::thrift::protocol::TType
T_LIST	protocol/TProtocol.h	/^  T_LIST       = 15,$/;"	e	enum:apache::thrift::protocol::TType
T_LOG_OPER	TLogging.h	/^#define T_LOG_OPER(/;"	d
T_MAP	protocol/TProtocol.h	/^  T_MAP        = 13,$/;"	e	enum:apache::thrift::protocol::TType
T_ONEWAY	protocol/TProtocol.h	/^  T_ONEWAY     = 4 \/\/函数的异步调用方式$/;"	e	enum:apache::thrift::protocol::TMessageType
T_OVERLOAD_CLOSE_ON_ACCEPT	server/TNonblockingServer.h	/^  T_OVERLOAD_CLOSE_ON_ACCEPT, \/\/\/< Drop new connections immediately *\/$/;"	e	enum:apache::thrift::server::TOverloadAction
T_OVERLOAD_DRAIN_TASK_QUEUE	server/TNonblockingServer.h	/^  T_OVERLOAD_DRAIN_TASK_QUEUE \/\/\/< Drop some tasks from head of task queue *\/$/;"	e	enum:apache::thrift::server::TOverloadAction
T_OVERLOAD_NO_ACTION	server/TNonblockingServer.h	/^  T_OVERLOAD_NO_ACTION,       \/\/\/< Don't handle overload *\/$/;"	e	enum:apache::thrift::server::TOverloadAction
T_REPLY	protocol/TProtocol.h	/^  T_REPLY      = 2,$/;"	e	enum:apache::thrift::protocol::TMessageType
T_SET	protocol/TProtocol.h	/^  T_SET        = 14,$/;"	e	enum:apache::thrift::protocol::TType
T_STOP	protocol/TProtocol.h	/^  T_STOP       = 0,$/;"	e	enum:apache::thrift::protocol::TType
T_STRING	protocol/TProtocol.h	/^  T_STRING     = 11,$/;"	e	enum:apache::thrift::protocol::TType
T_STRUCT	protocol/TProtocol.h	/^  T_STRUCT     = 12,$/;"	e	enum:apache::thrift::protocol::TType
T_U64	protocol/TProtocol.h	/^  T_U64        = 9,$/;"	e	enum:apache::thrift::protocol::TType
T_UTF16	protocol/TProtocol.h	/^  T_UTF16      = 17$/;"	e	enum:apache::thrift::protocol::TType
T_UTF7	protocol/TProtocol.h	/^  T_UTF7       = 11,$/;"	e	enum:apache::thrift::protocol::TType
T_UTF8	protocol/TProtocol.h	/^  T_UTF8       = 16,$/;"	e	enum:apache::thrift::protocol::TType
T_VIRTUAL_CALL	TLogging.h	/^#define T_VIRTUAL_CALL(/;"	d
T_VOID	protocol/TProtocol.h	/^  T_VOID       = 1,$/;"	e	enum:apache::thrift::protocol::TType
Task	concurrency/ThreadManager.cpp	/^  Task(shared_ptr<Runnable> runnable, int64_t expiration = 0LL)$/;"	f	class:apache::thrift::concurrency::ThreadManager::Task
Task	concurrency/ThreadManager.cpp	/^class ThreadManager::Task : public Runnable {$/;"	c	class:apache::thrift::concurrency::ThreadManager	file:
Task	concurrency/TimerManager.cpp	/^  Task(shared_ptr<Runnable> runnable) : runnable_(runnable), state_(WAITING) {}$/;"	f	class:apache::thrift::concurrency::TimerManager::Task
Task	concurrency/TimerManager.cpp	/^class TimerManager::Task : public Runnable {$/;"	c	class:apache::thrift::concurrency::TimerManager	file:
Task	server/TNonblockingServer.cpp	/^  Task(boost::shared_ptr<TProcessor> processor,$/;"	f	class:apache::thrift::server::TNonblockingServer::TConnection::Task
Task	server/TNonblockingServer.cpp	/^class TNonblockingServer::TConnection::Task : public Runnable {$/;"	c	class:apache::thrift::server::TNonblockingServer::TConnection	file:
Thread	concurrency/Thread.h	/^class Thread {$/;"	c	namespace:apache::thrift::concurrency
ThreadFactory	concurrency/Thread.h	/^class ThreadFactory {$/;"	c	namespace:apache::thrift::concurrency
ThreadManager	concurrency/ThreadManager.h	/^  ThreadManager() {}$/;"	f	class:apache::thrift::concurrency::ThreadManager
ThreadManager	concurrency/ThreadManager.h	/^class ThreadManager {$/;"	c	namespace:apache::thrift::concurrency
ThriftDebugString	protocol/TDebugProtocol.h	/^std::string ThriftDebugString(const ThriftStruct& ts) {$/;"	f	namespace:apache::thrift
ThriftJSONString	protocol/TJSONProtocol.h	/^std::string ThriftJSONString(const ThriftStruct& ts) {$/;"	f	namespace:apache::thrift
TimedOutException	concurrency/Exception.h	/^  TimedOutException() : TException("TimedOutException"){};$/;"	f	class:apache::thrift::concurrency::TimedOutException
TimedOutException	concurrency/Exception.h	/^  TimedOutException(const std::string& message) : TException(message) {}$/;"	f	class:apache::thrift::concurrency::TimedOutException
TimedOutException	concurrency/Exception.h	/^class TimedOutException : public apache::thrift::TException {$/;"	c	namespace:apache::thrift::concurrency
TimeoutSeconds_	transport/TPipe.h	/^  long TimeoutSeconds_;$/;"	m	class:apache::thrift::transport::TPipe
TimerManager	concurrency/TimerManager.cpp	/^TimerManager::TimerManager()$/;"	f	class:apache::thrift::concurrency::TimerManager
TimerManager	concurrency/TimerManager.h	/^class TimerManager {$/;"	c	namespace:apache::thrift::concurrency
TooManyPendingTasksException	concurrency/Exception.h	/^  TooManyPendingTasksException() : TException("TooManyPendingTasksException"){};$/;"	f	class:apache::thrift::concurrency::TooManyPendingTasksException
TooManyPendingTasksException	concurrency/Exception.h	/^  TooManyPendingTasksException(const std::string& message) : TException(message) {}$/;"	f	class:apache::thrift::concurrency::TooManyPendingTasksException
TooManyPendingTasksException	concurrency/Exception.h	/^class TooManyPendingTasksException : public apache::thrift::TException {$/;"	c	namespace:apache::thrift::concurrency
Types	protocol/TCompactProtocol.tcc	/^enum Types {$/;"	g	namespace:apache::thrift::protocol::detail::compact	file:
UNINIT	protocol/TDebugProtocol.h	/^  enum write_state_t { UNINIT, STRUCT, LIST, SET, MAP_KEY, MAP_VALUE };$/;"	e	enum:apache::thrift::protocol::TDebugProtocol::write_state_t
UNINITIALIZED	concurrency/ThreadManager.cpp	/^  enum STATE { UNINITIALIZED, STARTING, STARTED, STOPPING, STOPPED };$/;"	e	enum:apache::thrift::concurrency::ThreadManager::Worker::STATE	file:
UNINITIALIZED	concurrency/ThreadManager.h	/^  enum STATE { UNINITIALIZED, STARTING, STARTED, JOINING, STOPPING, STOPPED };$/;"	e	enum:apache::thrift::concurrency::ThreadManager::STATE
UNINITIALIZED	concurrency/TimerManager.h	/^  enum STATE { UNINITIALIZED, STARTING, STARTED, STOPPING, STOPPED };$/;"	e	enum:apache::thrift::concurrency::TimerManager::STATE
UNKNOWN	TApplicationException.h	/^    UNKNOWN = 0,$/;"	e	enum:apache::thrift::TApplicationException::TApplicationExceptionType
UNKNOWN	protocol/TProtocolException.h	/^    UNKNOWN = 0,$/;"	e	enum:apache::thrift::protocol::TProtocolException::TProtocolExceptionType
UNKNOWN	transport/TTransportException.h	/^    UNKNOWN = 0,$/;"	e	enum:apache::thrift::transport::TTransportException::TTransportExceptionType
UNKNOWN	windows/OverlappedSubmissionThread.h	/^    UNKNOWN = 3000,$/;"	e	enum:apache::thrift::transport::TOverlappedWorkItem::action_t
UNKNOWN_METHOD	TApplicationException.h	/^    UNKNOWN_METHOD = 1,$/;"	e	enum:apache::thrift::TApplicationException::TApplicationExceptionType
UNKNOWN_RIGHT_SHIFT	config.h	/^#define UNKNOWN_RIGHT_SHIFT /;"	d
UNLIKELY	protocol/TCompactProtocol.tcc	/^#define UNLIKELY(/;"	d	file:
UNSUPPORTED_CLIENT_TYPE	TApplicationException.h	/^    UNSUPPORTED_CLIENT_TYPE = 10$/;"	e	enum:apache::thrift::TApplicationException::TApplicationExceptionType
USE_BOOST_THREAD	windows/config.h	/^#define USE_BOOST_THREAD /;"	d
USE_STD_THREAD	windows/config.h	/^#define USE_STD_THREAD /;"	d
US_PER_MS	concurrency/Util.h	/^  static const int64_t US_PER_MS = US_PER_S \/ MS_PER_S;$/;"	m	class:apache::thrift::concurrency::Util
US_PER_S	concurrency/Util.h	/^  static const int64_t US_PER_S = 1000000LL;$/;"	m	class:apache::thrift::concurrency::Util
UncancellableTaskException	concurrency/Exception.h	/^class UncancellableTaskException : public apache::thrift::TException {};$/;"	c	namespace:apache::thrift::concurrency
Util	concurrency/Util.h	/^class Util {$/;"	c	namespace:apache::thrift::concurrency
VERSION	config.h	/^#define VERSION /;"	d
VERSION	windows/config.h	/^#define VERSION /;"	d
VERSION_1	protocol/TBinaryProtocol.h	/^  static const int32_t VERSION_1 = ((int32_t)0x80010000); \/\/具体协议本版号$/;"	m	class:apache::thrift::protocol::TBinaryProtocolT
VERSION_MASK	protocol/TBinaryProtocol.h	/^  static const int32_t VERSION_MASK = ((int32_t)0xffff0000); \/\/取得协议的掩码$/;"	m	class:apache::thrift::protocol::TBinaryProtocolT
VERSION_MASK	protocol/TCompactProtocol.h	/^  static const int8_t VERSION_MASK = 0x1f;       \/\/ 0001 1111$/;"	m	class:apache::thrift::protocol::TCompactProtocolT
VERSION_N	protocol/TCompactProtocol.h	/^  static const int8_t VERSION_N = 1;$/;"	m	class:apache::thrift::protocol::TCompactProtocolT
VoidCallback	async/TAsyncChannel.h	/^  typedef apache::thrift::stdcxx::function<void()> VoidCallback;$/;"	t	class:apache::thrift::async::TAsyncChannel
VoidFunc	concurrency/FunctionRunner.h	/^  typedef apache::thrift::stdcxx::function<void()> VoidFunc;$/;"	t	class:apache::thrift::concurrency::FunctionRunner
WAITING	concurrency/ThreadManager.cpp	/^  enum STATE { WAITING, EXECUTING, CANCELLED, COMPLETE };$/;"	e	enum:apache::thrift::concurrency::ThreadManager::Task::STATE	file:
WAITING	concurrency/TimerManager.cpp	/^  enum STATE { WAITING, EXECUTING, CANCELLED, COMPLETE };$/;"	e	enum:apache::thrift::concurrency::TimerManager::Task::STATE	file:
WARNING	gen-cpp-fb-s/facebooktest_types.h	/^    WARNING = 5$/;"	e	enum:facebook::fb303::fb_status::type
WARNING	gen-cpp-fb/facebooktest_types.h	/^    WARNING = 5$/;"	e	enum:facebook::fb303::fb_status::type
WINVER	windows/config.h	/^#define WINVER /;"	d
WRITE	transport/TFileTransport.h	/^  enum mode { WRITE, READ };$/;"	e	enum:apache::thrift::transport::TFileTransportBuffer::mode
WRITE_BUFFER_DEFAULT_SIZE	server/TNonblockingServer.h	/^  static const int WRITE_BUFFER_DEFAULT_SIZE = 1024;$/;"	m	class:apache::thrift::server::TNonblockingServer
WRONG_METHOD_NAME	TApplicationException.h	/^    WRONG_METHOD_NAME = 3,$/;"	e	enum:apache::thrift::TApplicationException::TApplicationExceptionType
Worker	concurrency/ThreadManager.cpp	/^  Worker(ThreadManager::Impl* manager) : manager_(manager), state_(UNINITIALIZED), idle_(false) {}$/;"	f	class:apache::thrift::concurrency::ThreadManager::Worker
Worker	concurrency/ThreadManager.cpp	/^class ThreadManager::Worker : public Runnable {$/;"	c	class:apache::thrift::concurrency::ThreadManager	file:
YYTEXT_POINTER	config.h	/^#define YYTEXT_POINTER /;"	d
_FacebookService_aliveSince_presult__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_aliveSince_presult__isset() : success(false) {}$/;"	f	struct:facebook::fb303::_FacebookService_aliveSince_presult__isset
_FacebookService_aliveSince_presult__isset	gen-cpp-fb/FacebookService.h	/^typedef struct _FacebookService_aliveSince_presult__isset {$/;"	s	namespace:facebook::fb303
_FacebookService_aliveSince_presult__isset	gen-cpp-fb/FacebookService.h	/^} _FacebookService_aliveSince_presult__isset;$/;"	t	namespace:facebook::fb303	typeref:struct:facebook::fb303::_FacebookService_aliveSince_presult__isset
_FacebookService_aliveSince_result__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_aliveSince_result__isset() : success(false) {}$/;"	f	struct:facebook::fb303::_FacebookService_aliveSince_result__isset
_FacebookService_aliveSince_result__isset	gen-cpp-fb/FacebookService.h	/^typedef struct _FacebookService_aliveSince_result__isset {$/;"	s	namespace:facebook::fb303
_FacebookService_aliveSince_result__isset	gen-cpp-fb/FacebookService.h	/^} _FacebookService_aliveSince_result__isset;$/;"	t	namespace:facebook::fb303	typeref:struct:facebook::fb303::_FacebookService_aliveSince_result__isset
_FacebookService_getCounter_args__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_getCounter_args__isset() : key(false) {}$/;"	f	struct:facebook::fb303::_FacebookService_getCounter_args__isset
_FacebookService_getCounter_args__isset	gen-cpp-fb/FacebookService.h	/^typedef struct _FacebookService_getCounter_args__isset {$/;"	s	namespace:facebook::fb303
_FacebookService_getCounter_args__isset	gen-cpp-fb/FacebookService.h	/^} _FacebookService_getCounter_args__isset;$/;"	t	namespace:facebook::fb303	typeref:struct:facebook::fb303::_FacebookService_getCounter_args__isset
_FacebookService_getCounter_presult__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_getCounter_presult__isset() : success(false) {}$/;"	f	struct:facebook::fb303::_FacebookService_getCounter_presult__isset
_FacebookService_getCounter_presult__isset	gen-cpp-fb/FacebookService.h	/^typedef struct _FacebookService_getCounter_presult__isset {$/;"	s	namespace:facebook::fb303
_FacebookService_getCounter_presult__isset	gen-cpp-fb/FacebookService.h	/^} _FacebookService_getCounter_presult__isset;$/;"	t	namespace:facebook::fb303	typeref:struct:facebook::fb303::_FacebookService_getCounter_presult__isset
_FacebookService_getCounter_result__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_getCounter_result__isset() : success(false) {}$/;"	f	struct:facebook::fb303::_FacebookService_getCounter_result__isset
_FacebookService_getCounter_result__isset	gen-cpp-fb/FacebookService.h	/^typedef struct _FacebookService_getCounter_result__isset {$/;"	s	namespace:facebook::fb303
_FacebookService_getCounter_result__isset	gen-cpp-fb/FacebookService.h	/^} _FacebookService_getCounter_result__isset;$/;"	t	namespace:facebook::fb303	typeref:struct:facebook::fb303::_FacebookService_getCounter_result__isset
_FacebookService_getCounters_presult__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_getCounters_presult__isset() : success(false) {}$/;"	f	struct:facebook::fb303::_FacebookService_getCounters_presult__isset
_FacebookService_getCounters_presult__isset	gen-cpp-fb/FacebookService.h	/^typedef struct _FacebookService_getCounters_presult__isset {$/;"	s	namespace:facebook::fb303
_FacebookService_getCounters_presult__isset	gen-cpp-fb/FacebookService.h	/^} _FacebookService_getCounters_presult__isset;$/;"	t	namespace:facebook::fb303	typeref:struct:facebook::fb303::_FacebookService_getCounters_presult__isset
_FacebookService_getCounters_result__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_getCounters_result__isset() : success(false) {}$/;"	f	struct:facebook::fb303::_FacebookService_getCounters_result__isset
_FacebookService_getCounters_result__isset	gen-cpp-fb/FacebookService.h	/^typedef struct _FacebookService_getCounters_result__isset {$/;"	s	namespace:facebook::fb303
_FacebookService_getCounters_result__isset	gen-cpp-fb/FacebookService.h	/^} _FacebookService_getCounters_result__isset;$/;"	t	namespace:facebook::fb303	typeref:struct:facebook::fb303::_FacebookService_getCounters_result__isset
_FacebookService_getCpuProfile_args__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_getCpuProfile_args__isset() : profileDurationInSec(false) {}$/;"	f	struct:facebook::fb303::_FacebookService_getCpuProfile_args__isset
_FacebookService_getCpuProfile_args__isset	gen-cpp-fb/FacebookService.h	/^typedef struct _FacebookService_getCpuProfile_args__isset {$/;"	s	namespace:facebook::fb303
_FacebookService_getCpuProfile_args__isset	gen-cpp-fb/FacebookService.h	/^} _FacebookService_getCpuProfile_args__isset;$/;"	t	namespace:facebook::fb303	typeref:struct:facebook::fb303::_FacebookService_getCpuProfile_args__isset
_FacebookService_getCpuProfile_presult__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_getCpuProfile_presult__isset() : success(false) {}$/;"	f	struct:facebook::fb303::_FacebookService_getCpuProfile_presult__isset
_FacebookService_getCpuProfile_presult__isset	gen-cpp-fb/FacebookService.h	/^typedef struct _FacebookService_getCpuProfile_presult__isset {$/;"	s	namespace:facebook::fb303
_FacebookService_getCpuProfile_presult__isset	gen-cpp-fb/FacebookService.h	/^} _FacebookService_getCpuProfile_presult__isset;$/;"	t	namespace:facebook::fb303	typeref:struct:facebook::fb303::_FacebookService_getCpuProfile_presult__isset
_FacebookService_getCpuProfile_result__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_getCpuProfile_result__isset() : success(false) {}$/;"	f	struct:facebook::fb303::_FacebookService_getCpuProfile_result__isset
_FacebookService_getCpuProfile_result__isset	gen-cpp-fb/FacebookService.h	/^typedef struct _FacebookService_getCpuProfile_result__isset {$/;"	s	namespace:facebook::fb303
_FacebookService_getCpuProfile_result__isset	gen-cpp-fb/FacebookService.h	/^} _FacebookService_getCpuProfile_result__isset;$/;"	t	namespace:facebook::fb303	typeref:struct:facebook::fb303::_FacebookService_getCpuProfile_result__isset
_FacebookService_getName_presult__isset	gen-cpp-fb-s/FacebookService.h	/^  _FacebookService_getName_presult__isset() : success(false) {}$/;"	f	struct:facebook::fb303::_FacebookService_getName_presult__isset
_FacebookService_getName_presult__isset	gen-cpp-fb-s/FacebookService.h	/^typedef struct _FacebookService_getName_presult__isset {$/;"	s	namespace:facebook::fb303
_FacebookService_getName_presult__isset	gen-cpp-fb-s/FacebookService.h	/^} _FacebookService_getName_presult__isset;$/;"	t	namespace:facebook::fb303	typeref:struct:facebook::fb303::_FacebookService_getName_presult__isset
_FacebookService_getName_presult__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_getName_presult__isset() : success(false) {}$/;"	f	struct:facebook::fb303::_FacebookService_getName_presult__isset
_FacebookService_getName_presult__isset	gen-cpp-fb/FacebookService.h	/^typedef struct _FacebookService_getName_presult__isset {$/;"	s	namespace:facebook::fb303
_FacebookService_getName_presult__isset	gen-cpp-fb/FacebookService.h	/^} _FacebookService_getName_presult__isset;$/;"	t	namespace:facebook::fb303	typeref:struct:facebook::fb303::_FacebookService_getName_presult__isset
_FacebookService_getName_result__isset	gen-cpp-fb-s/FacebookService.h	/^  _FacebookService_getName_result__isset() : success(false) {}$/;"	f	struct:facebook::fb303::_FacebookService_getName_result__isset
_FacebookService_getName_result__isset	gen-cpp-fb-s/FacebookService.h	/^typedef struct _FacebookService_getName_result__isset {$/;"	s	namespace:facebook::fb303
_FacebookService_getName_result__isset	gen-cpp-fb-s/FacebookService.h	/^} _FacebookService_getName_result__isset;$/;"	t	namespace:facebook::fb303	typeref:struct:facebook::fb303::_FacebookService_getName_result__isset
_FacebookService_getName_result__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_getName_result__isset() : success(false) {}$/;"	f	struct:facebook::fb303::_FacebookService_getName_result__isset
_FacebookService_getName_result__isset	gen-cpp-fb/FacebookService.h	/^typedef struct _FacebookService_getName_result__isset {$/;"	s	namespace:facebook::fb303
_FacebookService_getName_result__isset	gen-cpp-fb/FacebookService.h	/^} _FacebookService_getName_result__isset;$/;"	t	namespace:facebook::fb303	typeref:struct:facebook::fb303::_FacebookService_getName_result__isset
_FacebookService_getOption_args__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_getOption_args__isset() : key(false) {}$/;"	f	struct:facebook::fb303::_FacebookService_getOption_args__isset
_FacebookService_getOption_args__isset	gen-cpp-fb/FacebookService.h	/^typedef struct _FacebookService_getOption_args__isset {$/;"	s	namespace:facebook::fb303
_FacebookService_getOption_args__isset	gen-cpp-fb/FacebookService.h	/^} _FacebookService_getOption_args__isset;$/;"	t	namespace:facebook::fb303	typeref:struct:facebook::fb303::_FacebookService_getOption_args__isset
_FacebookService_getOption_presult__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_getOption_presult__isset() : success(false) {}$/;"	f	struct:facebook::fb303::_FacebookService_getOption_presult__isset
_FacebookService_getOption_presult__isset	gen-cpp-fb/FacebookService.h	/^typedef struct _FacebookService_getOption_presult__isset {$/;"	s	namespace:facebook::fb303
_FacebookService_getOption_presult__isset	gen-cpp-fb/FacebookService.h	/^} _FacebookService_getOption_presult__isset;$/;"	t	namespace:facebook::fb303	typeref:struct:facebook::fb303::_FacebookService_getOption_presult__isset
_FacebookService_getOption_result__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_getOption_result__isset() : success(false) {}$/;"	f	struct:facebook::fb303::_FacebookService_getOption_result__isset
_FacebookService_getOption_result__isset	gen-cpp-fb/FacebookService.h	/^typedef struct _FacebookService_getOption_result__isset {$/;"	s	namespace:facebook::fb303
_FacebookService_getOption_result__isset	gen-cpp-fb/FacebookService.h	/^} _FacebookService_getOption_result__isset;$/;"	t	namespace:facebook::fb303	typeref:struct:facebook::fb303::_FacebookService_getOption_result__isset
_FacebookService_getOptions_presult__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_getOptions_presult__isset() : success(false) {}$/;"	f	struct:facebook::fb303::_FacebookService_getOptions_presult__isset
_FacebookService_getOptions_presult__isset	gen-cpp-fb/FacebookService.h	/^typedef struct _FacebookService_getOptions_presult__isset {$/;"	s	namespace:facebook::fb303
_FacebookService_getOptions_presult__isset	gen-cpp-fb/FacebookService.h	/^} _FacebookService_getOptions_presult__isset;$/;"	t	namespace:facebook::fb303	typeref:struct:facebook::fb303::_FacebookService_getOptions_presult__isset
_FacebookService_getOptions_result__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_getOptions_result__isset() : success(false) {}$/;"	f	struct:facebook::fb303::_FacebookService_getOptions_result__isset
_FacebookService_getOptions_result__isset	gen-cpp-fb/FacebookService.h	/^typedef struct _FacebookService_getOptions_result__isset {$/;"	s	namespace:facebook::fb303
_FacebookService_getOptions_result__isset	gen-cpp-fb/FacebookService.h	/^} _FacebookService_getOptions_result__isset;$/;"	t	namespace:facebook::fb303	typeref:struct:facebook::fb303::_FacebookService_getOptions_result__isset
_FacebookService_getStatusDetails_presult__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_getStatusDetails_presult__isset() : success(false) {}$/;"	f	struct:facebook::fb303::_FacebookService_getStatusDetails_presult__isset
_FacebookService_getStatusDetails_presult__isset	gen-cpp-fb/FacebookService.h	/^typedef struct _FacebookService_getStatusDetails_presult__isset {$/;"	s	namespace:facebook::fb303
_FacebookService_getStatusDetails_presult__isset	gen-cpp-fb/FacebookService.h	/^} _FacebookService_getStatusDetails_presult__isset;$/;"	t	namespace:facebook::fb303	typeref:struct:facebook::fb303::_FacebookService_getStatusDetails_presult__isset
_FacebookService_getStatusDetails_result__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_getStatusDetails_result__isset() : success(false) {}$/;"	f	struct:facebook::fb303::_FacebookService_getStatusDetails_result__isset
_FacebookService_getStatusDetails_result__isset	gen-cpp-fb/FacebookService.h	/^typedef struct _FacebookService_getStatusDetails_result__isset {$/;"	s	namespace:facebook::fb303
_FacebookService_getStatusDetails_result__isset	gen-cpp-fb/FacebookService.h	/^} _FacebookService_getStatusDetails_result__isset;$/;"	t	namespace:facebook::fb303	typeref:struct:facebook::fb303::_FacebookService_getStatusDetails_result__isset
_FacebookService_getStatus_presult__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_getStatus_presult__isset() : success(false) {}$/;"	f	struct:facebook::fb303::_FacebookService_getStatus_presult__isset
_FacebookService_getStatus_presult__isset	gen-cpp-fb/FacebookService.h	/^typedef struct _FacebookService_getStatus_presult__isset {$/;"	s	namespace:facebook::fb303
_FacebookService_getStatus_presult__isset	gen-cpp-fb/FacebookService.h	/^} _FacebookService_getStatus_presult__isset;$/;"	t	namespace:facebook::fb303	typeref:struct:facebook::fb303::_FacebookService_getStatus_presult__isset
_FacebookService_getStatus_result__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_getStatus_result__isset() : success(false) {}$/;"	f	struct:facebook::fb303::_FacebookService_getStatus_result__isset
_FacebookService_getStatus_result__isset	gen-cpp-fb/FacebookService.h	/^typedef struct _FacebookService_getStatus_result__isset {$/;"	s	namespace:facebook::fb303
_FacebookService_getStatus_result__isset	gen-cpp-fb/FacebookService.h	/^} _FacebookService_getStatus_result__isset;$/;"	t	namespace:facebook::fb303	typeref:struct:facebook::fb303::_FacebookService_getStatus_result__isset
_FacebookService_getVersion_presult__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_getVersion_presult__isset() : success(false) {}$/;"	f	struct:facebook::fb303::_FacebookService_getVersion_presult__isset
_FacebookService_getVersion_presult__isset	gen-cpp-fb/FacebookService.h	/^typedef struct _FacebookService_getVersion_presult__isset {$/;"	s	namespace:facebook::fb303
_FacebookService_getVersion_presult__isset	gen-cpp-fb/FacebookService.h	/^} _FacebookService_getVersion_presult__isset;$/;"	t	namespace:facebook::fb303	typeref:struct:facebook::fb303::_FacebookService_getVersion_presult__isset
_FacebookService_getVersion_result__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_getVersion_result__isset() : success(false) {}$/;"	f	struct:facebook::fb303::_FacebookService_getVersion_result__isset
_FacebookService_getVersion_result__isset	gen-cpp-fb/FacebookService.h	/^typedef struct _FacebookService_getVersion_result__isset {$/;"	s	namespace:facebook::fb303
_FacebookService_getVersion_result__isset	gen-cpp-fb/FacebookService.h	/^} _FacebookService_getVersion_result__isset;$/;"	t	namespace:facebook::fb303	typeref:struct:facebook::fb303::_FacebookService_getVersion_result__isset
_FacebookService_setOption_args__isset	gen-cpp-fb-s/FacebookService.h	/^  _FacebookService_setOption_args__isset() : key(false), value(false) {}$/;"	f	struct:facebook::fb303::_FacebookService_setOption_args__isset
_FacebookService_setOption_args__isset	gen-cpp-fb-s/FacebookService.h	/^typedef struct _FacebookService_setOption_args__isset {$/;"	s	namespace:facebook::fb303
_FacebookService_setOption_args__isset	gen-cpp-fb-s/FacebookService.h	/^} _FacebookService_setOption_args__isset;$/;"	t	namespace:facebook::fb303	typeref:struct:facebook::fb303::_FacebookService_setOption_args__isset
_FacebookService_setOption_args__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_setOption_args__isset() : key(false), value(false) {}$/;"	f	struct:facebook::fb303::_FacebookService_setOption_args__isset
_FacebookService_setOption_args__isset	gen-cpp-fb/FacebookService.h	/^typedef struct _FacebookService_setOption_args__isset {$/;"	s	namespace:facebook::fb303
_FacebookService_setOption_args__isset	gen-cpp-fb/FacebookService.h	/^} _FacebookService_setOption_args__isset;$/;"	t	namespace:facebook::fb303	typeref:struct:facebook::fb303::_FacebookService_setOption_args__isset
_THRIFT_ASYNC_TASYNCCHANNEL_H_	async/TAsyncChannel.h	/^#define _THRIFT_ASYNC_TASYNCCHANNEL_H_ /;"	d
_THRIFT_ASYNC_TASYNCDISPATCHPROCESSOR_H_	async/TAsyncDispatchProcessor.h	/^#define _THRIFT_ASYNC_TASYNCDISPATCHPROCESSOR_H_ /;"	d
_THRIFT_ASYNC_TQIODEVICE_TRANSPORT_H_	qt/TQIODeviceTransport.h	/^#define _THRIFT_ASYNC_TQIODEVICE_TRANSPORT_H_ /;"	d
_THRIFT_CONCURRENCY_BOOSTTHREADFACTORY_H_	concurrency/BoostThreadFactory.h	/^#define _THRIFT_CONCURRENCY_BOOSTTHREADFACTORY_H_ /;"	d
_THRIFT_CONCURRENCY_EXCEPTION_H_	concurrency/Exception.h	/^#define _THRIFT_CONCURRENCY_EXCEPTION_H_ /;"	d
_THRIFT_CONCURRENCY_FUNCTION_RUNNER_H	concurrency/FunctionRunner.h	/^#define _THRIFT_CONCURRENCY_FUNCTION_RUNNER_H /;"	d
_THRIFT_CONCURRENCY_MONITOR_H_	concurrency/Monitor.h	/^#define _THRIFT_CONCURRENCY_MONITOR_H_ /;"	d
_THRIFT_CONCURRENCY_MUTEX_H_	concurrency/Mutex.h	/^#define _THRIFT_CONCURRENCY_MUTEX_H_ /;"	d
_THRIFT_CONCURRENCY_PLATFORMTHREADFACTORY_H_	concurrency/PlatformThreadFactory.h	/^#define _THRIFT_CONCURRENCY_PLATFORMTHREADFACTORY_H_ /;"	d
_THRIFT_CONCURRENCY_POSIXTHREADFACTORY_H_	concurrency/PosixThreadFactory.h	/^#define _THRIFT_CONCURRENCY_POSIXTHREADFACTORY_H_ /;"	d
_THRIFT_CONCURRENCY_STDTHREADFACTORY_H_	concurrency/StdThreadFactory.h	/^#define _THRIFT_CONCURRENCY_STDTHREADFACTORY_H_ /;"	d
_THRIFT_CONCURRENCY_THREADMANAGER_H_	concurrency/ThreadManager.h	/^#define _THRIFT_CONCURRENCY_THREADMANAGER_H_ /;"	d
_THRIFT_CONCURRENCY_THREAD_H_	concurrency/Thread.h	/^#define _THRIFT_CONCURRENCY_THREAD_H_ /;"	d
_THRIFT_CONCURRENCY_TIMERMANAGER_H_	concurrency/TimerManager.h	/^#define _THRIFT_CONCURRENCY_TIMERMANAGER_H_ /;"	d
_THRIFT_CONCURRENCY_UTIL_H_	concurrency/Util.h	/^#define _THRIFT_CONCURRENCY_UTIL_H_ /;"	d
_THRIFT_CXXFUNCTIONAL_H_	cxxfunctional.h	/^#define _THRIFT_CXXFUNCTIONAL_H_ /;"	d
_THRIFT_OUTPUT_H_	TOutput.h	/^#define _THRIFT_OUTPUT_H_ /;"	d
_THRIFT_PROTOCOL_TBASE64UTILS_H_	protocol/TBase64Utils.h	/^#define _THRIFT_PROTOCOL_TBASE64UTILS_H_$/;"	d
_THRIFT_PROTOCOL_TBINARYPROTOCOL_H_	protocol/TBinaryProtocol.h	/^#define _THRIFT_PROTOCOL_TBINARYPROTOCOL_H_ /;"	d
_THRIFT_PROTOCOL_TBINARYPROTOCOL_TCC_	protocol/TBinaryProtocol.tcc	/^#define _THRIFT_PROTOCOL_TBINARYPROTOCOL_TCC_ /;"	d	file:
_THRIFT_PROTOCOL_TCOMPACTPROTOCOL_H_	protocol/TCompactProtocol.h	/^#define _THRIFT_PROTOCOL_TCOMPACTPROTOCOL_H_ /;"	d
_THRIFT_PROTOCOL_TCOMPACTPROTOCOL_TCC_	protocol/TCompactProtocol.tcc	/^#define _THRIFT_PROTOCOL_TCOMPACTPROTOCOL_TCC_ /;"	d	file:
_THRIFT_PROTOCOL_TDEBUGPROTOCOL_H_	protocol/TDebugProtocol.h	/^#define _THRIFT_PROTOCOL_TDEBUGPROTOCOL_H_ /;"	d
_THRIFT_PROTOCOL_TJSONPROTOCOL_H_	protocol/TJSONProtocol.h	/^#define _THRIFT_PROTOCOL_TJSONPROTOCOL_H_ /;"	d
_THRIFT_PROTOCOL_TPROTOCOLEXCEPTION_H_	protocol/TProtocolException.h	/^#define _THRIFT_PROTOCOL_TPROTOCOLEXCEPTION_H_ /;"	d
_THRIFT_PROTOCOL_TPROTOCOLTAP_H_	protocol/TProtocolTap.h	/^#define _THRIFT_PROTOCOL_TPROTOCOLTAP_H_ /;"	d
_THRIFT_PROTOCOL_TPROTOCOL_H_	protocol/TProtocol.h	/^#define _THRIFT_PROTOCOL_TPROTOCOL_H_ /;"	d
_THRIFT_PROTOCOL_TVIRTUALPROTOCOL_H_	protocol/TVirtualProtocol.h	/^#define _THRIFT_PROTOCOL_TVIRTUALPROTOCOL_H_ /;"	d
_THRIFT_SERVER_TCONNECTEDCLIENT_H_	server/TConnectedClient.h	/^#define _THRIFT_SERVER_TCONNECTEDCLIENT_H_ /;"	d
_THRIFT_SERVER_TNONBLOCKINGSERVER_H_	server/TNonblockingServer.h	/^#define _THRIFT_SERVER_TNONBLOCKINGSERVER_H_ /;"	d
_THRIFT_SERVER_TSERVERFRAMEWORK_H_	server/TServerFramework.h	/^#define _THRIFT_SERVER_TSERVERFRAMEWORK_H_ /;"	d
_THRIFT_SERVER_TSERVER_H_	server/TServer.h	/^#define _THRIFT_SERVER_TSERVER_H_ /;"	d
_THRIFT_SERVER_TSIMPLESERVER_H_	server/TSimpleServer.h	/^#define _THRIFT_SERVER_TSIMPLESERVER_H_ /;"	d
_THRIFT_SERVER_TTHREADEDSERVER_H_	server/TThreadedServer.h	/^#define _THRIFT_SERVER_TTHREADEDSERVER_H_ /;"	d
_THRIFT_SERVER_TTHREADPOOLSERVER_H_	server/TThreadPoolServer.h	/^#define _THRIFT_SERVER_TTHREADPOOLSERVER_H_ /;"	d
_THRIFT_TAPPLICATIONEXCEPTION_H_	TApplicationException.h	/^#define _THRIFT_TAPPLICATIONEXCEPTION_H_ /;"	d
_THRIFT_TASYNCPROCESSOR_H_	async/TAsyncProcessor.h	/^#define _THRIFT_TASYNCPROCESSOR_H_ /;"	d
_THRIFT_TASYNC_BUFFER_PROCESSOR_H_	async/TAsyncBufferProcessor.h	/^#define _THRIFT_TASYNC_BUFFER_PROCESSOR_H_ /;"	d
_THRIFT_TASYNC_QTCP_SERVER_H_	qt/TQTcpServer.h	/^#define _THRIFT_TASYNC_QTCP_SERVER_H_$/;"	d
_THRIFT_TCONCURRENTCLIENTSYNCINFO_H_	async/TConcurrentClientSyncInfo.h	/^#define _THRIFT_TCONCURRENTCLIENTSYNCINFO_H_ /;"	d
_THRIFT_TDISPATCHPROCESSOR_H_	TDispatchProcessor.h	/^#define _THRIFT_TDISPATCHPROCESSOR_H_ /;"	d
_THRIFT_TEVHTTP_CLIENT_CHANNEL_H_	async/TEvhttpClientChannel.h	/^#define _THRIFT_TEVHTTP_CLIENT_CHANNEL_H_ /;"	d
_THRIFT_TEVHTTP_SERVER_H_	async/TEvhttpServer.h	/^#define _THRIFT_TEVHTTP_SERVER_H_ /;"	d
_THRIFT_THRIFT_H_	Thrift.h	/^#define _THRIFT_THRIFT_H_ /;"	d
_THRIFT_TLOGGING_H_	TLogging.h	/^#define _THRIFT_TLOGGING_H_ /;"	d
_THRIFT_TNAME_ME_H_	async/TAsyncProtocolProcessor.h	/^#define _THRIFT_TNAME_ME_H_ /;"	d
_THRIFT_TOSTRING_H_	TToString.h	/^#define _THRIFT_TOSTRING_H_ /;"	d
_THRIFT_TPROCESSOR_H_	TProcessor.h	/^#define _THRIFT_TPROCESSOR_H_ /;"	d
_THRIFT_TRANSPORT_PLATFORM_SOCKET_H_	transport/PlatformSocket.h	/^#  define _THRIFT_TRANSPORT_PLATFORM_SOCKET_H_$/;"	d
_THRIFT_TRANSPORT_TBUFFERTRANSPORTS_H_	transport/TBufferTransports.h	/^#define _THRIFT_TRANSPORT_TBUFFERTRANSPORTS_H_ /;"	d
_THRIFT_TRANSPORT_TFDTRANSPORT_H_	transport/TFDTransport.h	/^#define _THRIFT_TRANSPORT_TFDTRANSPORT_H_ /;"	d
_THRIFT_TRANSPORT_TFILETRANSPORT_H_	transport/TFileTransport.h	/^#define _THRIFT_TRANSPORT_TFILETRANSPORT_H_ /;"	d
_THRIFT_TRANSPORT_THTTPCLIENT_H_	transport/THttpClient.h	/^#define _THRIFT_TRANSPORT_THTTPCLIENT_H_ /;"	d
_THRIFT_TRANSPORT_THTTPSERVER_H_	transport/THttpServer.h	/^#define _THRIFT_TRANSPORT_THTTPSERVER_H_ /;"	d
_THRIFT_TRANSPORT_THTTPTRANSPORT_H_	transport/THttpTransport.h	/^#define _THRIFT_TRANSPORT_THTTPTRANSPORT_H_ /;"	d
_THRIFT_TRANSPORT_TPIPE_H_	transport/TPipe.h	/^#define _THRIFT_TRANSPORT_TPIPE_H_ /;"	d
_THRIFT_TRANSPORT_TSERVERSOCKET_H_	transport/TServerSocket.h	/^#define _THRIFT_TRANSPORT_TSERVERSOCKET_H_ /;"	d
_THRIFT_TRANSPORT_TSERVERTRANSPORT_H_	transport/TServerTransport.h	/^#define _THRIFT_TRANSPORT_TSERVERTRANSPORT_H_ /;"	d
_THRIFT_TRANSPORT_TSERVERWINPIPES_H_	transport/TPipeServer.h	/^#define _THRIFT_TRANSPORT_TSERVERWINPIPES_H_ /;"	d
_THRIFT_TRANSPORT_TSHORTREADTRANSPORT_H_	transport/TShortReadTransport.h	/^#define _THRIFT_TRANSPORT_TSHORTREADTRANSPORT_H_ /;"	d
_THRIFT_TRANSPORT_TSIMPLEFILETRANSPORT_H_	transport/TSimpleFileTransport.h	/^#define _THRIFT_TRANSPORT_TSIMPLEFILETRANSPORT_H_ /;"	d
_THRIFT_TRANSPORT_TSOCKETPOOL_H_	transport/TSocketPool.h	/^#define _THRIFT_TRANSPORT_TSOCKETPOOL_H_ /;"	d
_THRIFT_TRANSPORT_TSOCKET_H_	transport/TSocket.h	/^#define _THRIFT_TRANSPORT_TSOCKET_H_ /;"	d
_THRIFT_TRANSPORT_TSSLSERVERSOCKET_H_	transport/TSSLServerSocket.h	/^#define _THRIFT_TRANSPORT_TSSLSERVERSOCKET_H_ /;"	d
_THRIFT_TRANSPORT_TSSLSOCKET_H_	transport/TSSLSocket.h	/^#define _THRIFT_TRANSPORT_TSSLSOCKET_H_ /;"	d
_THRIFT_TRANSPORT_TTRANSPORTEXCEPTION_H_	transport/TTransportException.h	/^#define _THRIFT_TRANSPORT_TTRANSPORTEXCEPTION_H_ /;"	d
_THRIFT_TRANSPORT_TTRANSPORTUTILS_H_	transport/TTransportUtils.h	/^#define _THRIFT_TRANSPORT_TTRANSPORTUTILS_H_ /;"	d
_THRIFT_TRANSPORT_TTRANSPORT_H_	transport/TTransport.h	/^#define _THRIFT_TRANSPORT_TTRANSPORT_H_ /;"	d
_THRIFT_TRANSPORT_TVIRTUALTRANSPORT_H_	transport/TVirtualTransport.h	/^#define _THRIFT_TRANSPORT_TVIRTUALTRANSPORT_H_ /;"	d
_THRIFT_TRANSPORT_TZLIBTRANSPORT_H_	transport/TZlibTransport.h	/^#define _THRIFT_TRANSPORT_TZLIBTRANSPORT_H_ /;"	d
_THRIFT_TRANSPORT_WINDOWS_TWINSOCKSINGLETON_H_	windows/TWinsockSingleton.h	/^#define _THRIFT_TRANSPORT_WINDOWS_TWINSOCKSINGLETON_H_ /;"	d
_THRIFT_USING_CLANG_LIBCXX	cxxfunctional.h	/^    #define _THRIFT_USING_CLANG_LIBCXX /;"	d
_THRIFT_USING_GNU_LIBSTDCXX	cxxfunctional.h	/^    #define _THRIFT_USING_GNU_LIBSTDCXX /;"	d
_THRIFT_USING_GNU_LIBSTDCXX	cxxfunctional.h	/^  #define _THRIFT_USING_GNU_LIBSTDCXX /;"	d
_THRIFT_USING_MICROSOFT_STDLIB	cxxfunctional.h	/^  #define _THRIFT_USING_MICROSOFT_STDLIB /;"	d
_THRIFT_WINDOWS_CONFIG_H_	windows/config.h	/^#define _THRIFT_WINDOWS_CONFIG_H_ /;"	d
_THRIFT_WINDOWS_FCNTL_H_	windows/WinFcntl.h	/^#define _THRIFT_WINDOWS_FCNTL_H_ /;"	d
_THRIFT_WINDOWS_GETTIMEOFDAY_H_	windows/GetTimeOfDay.h	/^#define _THRIFT_WINDOWS_GETTIMEOFDAY_H_$/;"	d
_THRIFT_WINDOWS_OPERATORS_H_	windows/Operators.h	/^#define _THRIFT_WINDOWS_OPERATORS_H_$/;"	d
_THRIFT_WINDOWS_OverlappedSubmissionThread_H_	windows/OverlappedSubmissionThread.h	/^#define _THRIFT_WINDOWS_OverlappedSubmissionThread_H_ /;"	d
_THRIFT_WINDOWS_SOCKETPAIR_H_	windows/SocketPair.h	/^#define _THRIFT_WINDOWS_SOCKETPAIR_H_ /;"	d
_THRIFT_WINDOWS_Sync_H_	windows/Sync.h	/^#define _THRIFT_WINDOWS_Sync_H_ /;"	d
_WIN32_WINNT	windows/config.h	/^#define _WIN32_WINNT /;"	d
__STDC_FORMAT_MACROS	server/TNonblockingServer.cpp	/^#define __STDC_FORMAT_MACROS$/;"	d	file:
__THRIFT_BIG_ENDIAN	protocol/TProtocol.h	/^#   define __THRIFT_BIG_ENDIAN /;"	d
__THRIFT_BIG_ENDIAN	protocol/TProtocol.h	/^#  define __THRIFT_BIG_ENDIAN /;"	d
__THRIFT_BYTE_ORDER	protocol/TProtocol.h	/^#  define __THRIFT_BYTE_ORDER /;"	d
__THRIFT_LITTLE_ENDIAN	protocol/TProtocol.h	/^#   define __THRIFT_LITTLE_ENDIAN /;"	d
__THRIFT_LITTLE_ENDIAN	protocol/TProtocol.h	/^#  define __THRIFT_LITTLE_ENDIAN /;"	d
__isset	gen-cpp-fb-s/FacebookService.h	/^  _FacebookService_getName_presult__isset __isset;$/;"	m	class:facebook::fb303::FacebookService_getName_presult
__isset	gen-cpp-fb-s/FacebookService.h	/^  _FacebookService_getName_result__isset __isset;$/;"	m	class:facebook::fb303::FacebookService_getName_result
__isset	gen-cpp-fb-s/FacebookService.h	/^  _FacebookService_setOption_args__isset __isset;$/;"	m	class:facebook::fb303::FacebookService_setOption_args
__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_aliveSince_presult__isset __isset;$/;"	m	class:facebook::fb303::FacebookService_aliveSince_presult
__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_aliveSince_result__isset __isset;$/;"	m	class:facebook::fb303::FacebookService_aliveSince_result
__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_getCounter_args__isset __isset;$/;"	m	class:facebook::fb303::FacebookService_getCounter_args
__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_getCounter_presult__isset __isset;$/;"	m	class:facebook::fb303::FacebookService_getCounter_presult
__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_getCounter_result__isset __isset;$/;"	m	class:facebook::fb303::FacebookService_getCounter_result
__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_getCounters_presult__isset __isset;$/;"	m	class:facebook::fb303::FacebookService_getCounters_presult
__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_getCounters_result__isset __isset;$/;"	m	class:facebook::fb303::FacebookService_getCounters_result
__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_getCpuProfile_args__isset __isset;$/;"	m	class:facebook::fb303::FacebookService_getCpuProfile_args
__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_getCpuProfile_presult__isset __isset;$/;"	m	class:facebook::fb303::FacebookService_getCpuProfile_presult
__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_getCpuProfile_result__isset __isset;$/;"	m	class:facebook::fb303::FacebookService_getCpuProfile_result
__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_getName_presult__isset __isset;$/;"	m	class:facebook::fb303::FacebookService_getName_presult
__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_getName_result__isset __isset;$/;"	m	class:facebook::fb303::FacebookService_getName_result
__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_getOption_args__isset __isset;$/;"	m	class:facebook::fb303::FacebookService_getOption_args
__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_getOption_presult__isset __isset;$/;"	m	class:facebook::fb303::FacebookService_getOption_presult
__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_getOption_result__isset __isset;$/;"	m	class:facebook::fb303::FacebookService_getOption_result
__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_getOptions_presult__isset __isset;$/;"	m	class:facebook::fb303::FacebookService_getOptions_presult
__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_getOptions_result__isset __isset;$/;"	m	class:facebook::fb303::FacebookService_getOptions_result
__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_getStatusDetails_presult__isset __isset;$/;"	m	class:facebook::fb303::FacebookService_getStatusDetails_presult
__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_getStatusDetails_result__isset __isset;$/;"	m	class:facebook::fb303::FacebookService_getStatusDetails_result
__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_getStatus_presult__isset __isset;$/;"	m	class:facebook::fb303::FacebookService_getStatus_presult
__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_getStatus_result__isset __isset;$/;"	m	class:facebook::fb303::FacebookService_getStatus_result
__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_getVersion_presult__isset __isset;$/;"	m	class:facebook::fb303::FacebookService_getVersion_presult
__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_getVersion_result__isset __isset;$/;"	m	class:facebook::fb303::FacebookService_getVersion_result
__isset	gen-cpp-fb/FacebookService.h	/^  _FacebookService_setOption_args__isset __isset;$/;"	m	class:facebook::fb303::FacebookService_setOption_args
_kfb_statusNames	gen-cpp-fb-s/facebooktest_types.cpp	/^const char* _kfb_statusNames[] = {$/;"	m	namespace:facebook::fb303	file:
_kfb_statusNames	gen-cpp-fb/facebooktest_types.cpp	/^const char* _kfb_statusNames[] = {$/;"	m	namespace:facebook::fb303	file:
_kfb_statusValues	gen-cpp-fb-s/facebooktest_types.cpp	/^int _kfb_statusValues[] = {$/;"	m	namespace:facebook::fb303	file:
_kfb_statusValues	gen-cpp-fb/facebooktest_types.cpp	/^int _kfb_statusValues[] = {$/;"	m	namespace:facebook::fb303	file:
_record_backtrace	VirtualProfiling.cpp	/^void _record_backtrace(BacktraceMap* map, const Mutex& mutex, Key* k) {$/;"	f	namespace:apache::thrift
_runnable	concurrency/Thread.h	/^  boost::shared_ptr<Runnable> _runnable;$/;"	m	class:apache::thrift::concurrency::Thread
accTimeout_	transport/TServerSocket.h	/^  int accTimeout_;$/;"	m	class:apache::thrift::transport::TServerSocket
accept	transport/TServerTransport.h	/^  boost::shared_ptr<TTransport> accept() {$/;"	f	class:apache::thrift::transport::TServerTransport
acceptBacklog_	transport/TServerSocket.h	/^  int acceptBacklog_;$/;"	m	class:apache::thrift::transport::TServerSocket
acceptCallback_	transport/TServerSocket.h	/^  socket_func_t acceptCallback_;$/;"	m	class:apache::thrift::transport::TServerSocket
acceptImpl	transport/TPipeServer.cpp	/^shared_ptr<TTransport> TAnonPipeServer::acceptImpl() {$/;"	f	class:apache::thrift::transport::TAnonPipeServer
acceptImpl	transport/TPipeServer.cpp	/^shared_ptr<TTransport> TNamedPipeServer::acceptImpl() {$/;"	f	class:apache::thrift::transport::TNamedPipeServer
acceptImpl	transport/TPipeServer.cpp	/^shared_ptr<TTransport> TPipeServer::acceptImpl() {$/;"	f	class:apache::thrift::transport::TPipeServer
acceptImpl	transport/TServerSocket.cpp	/^shared_ptr<TTransport> TServerSocket::acceptImpl() {$/;"	f	class:apache::thrift::transport::TServerSocket
access	transport/TSSLSocket.h	/^  virtual void access(boost::shared_ptr<AccessManager> manager) { access_ = manager; }$/;"	f	class:apache::thrift::transport::TSSLSocket
access	transport/TSSLSocket.h	/^  virtual void access(boost::shared_ptr<AccessManager> manager) { access_ = manager; }$/;"	f	class:apache::thrift::transport::TSSLSocketFactory
access_	transport/TSSLSocket.h	/^  boost::shared_ptr<AccessManager> access_;$/;"	m	class:apache::thrift::transport::TSSLSocket
access_	transport/TSSLSocket.h	/^  boost::shared_ptr<AccessManager> access_;$/;"	m	class:apache::thrift::transport::TSSLSocketFactory
acquireRead	concurrency/Mutex.cpp	/^  void acquireRead() const {$/;"	f	class:apache::thrift::concurrency::ReadWriteMutex::impl
acquireRead	concurrency/Mutex.cpp	/^void NoStarveReadWriteMutex::acquireRead() const {$/;"	f	class:apache::thrift::concurrency::NoStarveReadWriteMutex
acquireRead	concurrency/Mutex.cpp	/^void ReadWriteMutex::acquireRead() const {$/;"	f	class:apache::thrift::concurrency::ReadWriteMutex
acquireWrite	concurrency/Mutex.cpp	/^  void acquireWrite() const {$/;"	f	class:apache::thrift::concurrency::ReadWriteMutex::impl
acquireWrite	concurrency/Mutex.cpp	/^void NoStarveReadWriteMutex::acquireWrite() const {$/;"	f	class:apache::thrift::concurrency::NoStarveReadWriteMutex
acquireWrite	concurrency/Mutex.cpp	/^void ReadWriteMutex::acquireWrite() const {$/;"	f	class:apache::thrift::concurrency::ReadWriteMutex
acquire_instance	windows/OverlappedSubmissionThread.cpp	/^TOverlappedSubmissionThread* TOverlappedSubmissionThread::acquire_instance() {$/;"	f	class:apache::thrift::transport::TOverlappedSubmissionThread
action	windows/OverlappedSubmissionThread.h	/^  action_t action;$/;"	m	struct:apache::thrift::transport::TOverlappedWorkItem
action_t	windows/OverlappedSubmissionThread.h	/^  enum action_t {$/;"	g	struct:apache::thrift::transport::TOverlappedWorkItem
activeConnections_	server/TNonblockingServer.h	/^  std::vector<TConnection*> activeConnections_;$/;"	m	class:apache::thrift::server::TNonblockingServer
actualProcessor_	processor/PeekProcessor.h	/^  boost::shared_ptr<apache::thrift::TProcessor> actualProcessor_;$/;"	m	class:apache::thrift::processor::PeekProcessor
add	concurrency/ThreadManager.cpp	/^void ThreadManager::Impl::add(shared_ptr<Runnable> value, int64_t timeout, int64_t expiration) {$/;"	f	class:apache::thrift::concurrency::ThreadManager::Impl
add	concurrency/TimerManager.cpp	/^void TimerManager::add(shared_ptr<Runnable> task, const struct THRIFT_TIMESPEC& value) {$/;"	f	class:apache::thrift::concurrency::TimerManager
add	concurrency/TimerManager.cpp	/^void TimerManager::add(shared_ptr<Runnable> task, const struct timeval& value) {$/;"	f	class:apache::thrift::concurrency::TimerManager
add	concurrency/TimerManager.cpp	/^void TimerManager::add(shared_ptr<Runnable> task, int64_t timeout) {$/;"	f	class:apache::thrift::concurrency::TimerManager
add	gen-cpp-fb-s/FacebookService.h	/^  void add(boost::shared_ptr<FacebookServiceIf> iface) {$/;"	f	class:facebook::fb303::FacebookServiceMultiface
add	gen-cpp-fb/FacebookService.h	/^  void add(boost::shared_ptr<FacebookServiceIf> iface) {$/;"	f	class:facebook::fb303::FacebookServiceMultiface
addEvent	transport/TFileTransport.cpp	/^bool TFileTransportBuffer::addEvent(eventInfo* event) {$/;"	f	class:apache::thrift::transport::TFileTransportBuffer
addServer	transport/TSocketPool.cpp	/^void TSocketPool::addServer(const string& host, int port) {$/;"	f	class:apache::thrift::transport::TSocketPool
addServer	transport/TSocketPool.cpp	/^void TSocketPool::addServer(shared_ptr<TSocketPoolServer>& server) {$/;"	f	class:apache::thrift::transport::TSocketPool
addTask	server/TNonblockingServer.h	/^  void addTask(boost::shared_ptr<Runnable> task) {$/;"	f	class:apache::thrift::server::TNonblockingServer
addWorkItem	windows/OverlappedSubmissionThread.cpp	/^void TOverlappedSubmissionThread::addWorkItem(TOverlappedWorkItem* item) {$/;"	f	class:apache::thrift::transport::TOverlappedSubmissionThread
addWorker	concurrency/ThreadManager.cpp	/^void ThreadManager::Impl::addWorker(size_t value) {$/;"	f	class:apache::thrift::concurrency::ThreadManager::Impl
address_	transport/TServerSocket.h	/^  std::string address_;$/;"	m	class:apache::thrift::transport::TServerSocket
aliveSince	gen-cpp-fb/FacebookService.cpp	/^int64_t FacebookServiceClient::aliveSince()$/;"	f	class:facebook::fb303::FacebookServiceClient
aliveSince	gen-cpp-fb/FacebookService.cpp	/^int64_t FacebookServiceConcurrentClient::aliveSince()$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
aliveSince	gen-cpp-fb/FacebookService.h	/^  int64_t aliveSince() {$/;"	f	class:facebook::fb303::FacebookServiceMultiface
aliveSince	gen-cpp-fb/FacebookService.h	/^  int64_t aliveSince() {$/;"	f	class:facebook::fb303::FacebookServiceNull
aliveSince	gen-cpp-fb/FacebookService_server.skeleton.cpp	/^  int64_t aliveSince() {$/;"	f	class:FacebookServiceHandler
alwaysTryLast_	transport/TSocketPool.h	/^  bool alwaysTryLast_;$/;"	m	class:apache::thrift::transport::TSocketPool
apache	TApplicationException.cpp	/^namespace apache {$/;"	n	file:
apache	TApplicationException.h	/^namespace apache {$/;"	n
apache	TDispatchProcessor.h	/^namespace apache {$/;"	n
apache	TOutput.cpp	/^namespace apache {$/;"	n	file:
apache	TOutput.h	/^namespace apache {$/;"	n
apache	TProcessor.h	/^namespace apache {$/;"	n
apache	TToString.h	/^namespace apache {$/;"	n
apache	Thrift.h	/^namespace apache {$/;"	n
apache	VirtualProfiling.cpp	/^namespace apache {$/;"	n	file:
apache	async/TAsyncBufferProcessor.h	/^namespace apache {$/;"	n
apache	async/TAsyncChannel.cpp	/^namespace apache {$/;"	n	file:
apache	async/TAsyncChannel.h	/^namespace apache {$/;"	n
apache	async/TAsyncDispatchProcessor.h	/^namespace apache {$/;"	n
apache	async/TAsyncProcessor.h	/^namespace apache {$/;"	n
apache	async/TAsyncProtocolProcessor.cpp	/^namespace apache {$/;"	n	file:
apache	async/TAsyncProtocolProcessor.h	/^namespace apache {$/;"	n
apache	async/TConcurrentClientSyncInfo.cpp	/^namespace apache { namespace thrift { namespace async {$/;"	n	file:
apache	async/TConcurrentClientSyncInfo.h	/^namespace apache { namespace thrift { namespace async {$/;"	n
apache	async/TEvhttpClientChannel.cpp	/^namespace apache {$/;"	n	file:
apache	async/TEvhttpClientChannel.h	/^namespace apache {$/;"	n
apache	async/TEvhttpServer.cpp	/^namespace apache {$/;"	n	file:
apache	async/TEvhttpServer.h	/^namespace apache {$/;"	n
apache	concurrency/BoostMonitor.cpp	/^namespace apache {$/;"	n	file:
apache	concurrency/BoostMutex.cpp	/^namespace apache {$/;"	n	file:
apache	concurrency/BoostThreadFactory.cpp	/^namespace apache {$/;"	n	file:
apache	concurrency/BoostThreadFactory.h	/^namespace apache {$/;"	n
apache	concurrency/Exception.h	/^namespace apache {$/;"	n
apache	concurrency/FunctionRunner.h	/^namespace apache {$/;"	n
apache	concurrency/Monitor.cpp	/^namespace apache {$/;"	n	file:
apache	concurrency/Monitor.h	/^namespace apache {$/;"	n
apache	concurrency/Mutex.cpp	/^namespace apache {$/;"	n	file:
apache	concurrency/Mutex.h	/^namespace apache {$/;"	n
apache	concurrency/PlatformThreadFactory.h	/^namespace apache {$/;"	n
apache	concurrency/PosixThreadFactory.cpp	/^namespace apache {$/;"	n	file:
apache	concurrency/PosixThreadFactory.h	/^namespace apache {$/;"	n
apache	concurrency/StdMonitor.cpp	/^namespace apache {$/;"	n	file:
apache	concurrency/StdMutex.cpp	/^namespace apache {$/;"	n	file:
apache	concurrency/StdThreadFactory.cpp	/^namespace apache {$/;"	n	file:
apache	concurrency/StdThreadFactory.h	/^namespace apache {$/;"	n
apache	concurrency/Thread.h	/^namespace apache {$/;"	n
apache	concurrency/ThreadManager.cpp	/^namespace apache {$/;"	n	file:
apache	concurrency/ThreadManager.h	/^namespace apache {$/;"	n
apache	concurrency/TimerManager.cpp	/^namespace apache {$/;"	n	file:
apache	concurrency/TimerManager.h	/^namespace apache {$/;"	n
apache	concurrency/Util.cpp	/^namespace apache {$/;"	n	file:
apache	concurrency/Util.h	/^namespace apache {$/;"	n
apache	cxxfunctional.h	/^  namespace apache { namespace thrift { namespace stdcxx {$/;"	n
apache	processor/PeekProcessor.cpp	/^namespace apache {$/;"	n	file:
apache	processor/PeekProcessor.h	/^namespace apache {$/;"	n
apache	processor/StatsProcessor.h	/^namespace apache {$/;"	n
apache	processor/TMultiplexedProcessor.h	/^namespace apache {$/;"	n
apache	protocol/TBase64Utils.cpp	/^namespace apache {$/;"	n	file:
apache	protocol/TBase64Utils.h	/^namespace apache {$/;"	n
apache	protocol/TBinaryProtocol.h	/^namespace apache {$/;"	n
apache	protocol/TBinaryProtocol.tcc	/^namespace apache {$/;"	n	file:
apache	protocol/TCompactProtocol.h	/^namespace apache {$/;"	n
apache	protocol/TCompactProtocol.tcc	/^namespace apache { namespace thrift { namespace protocol {$/;"	n	file:
apache	protocol/TDebugProtocol.cpp	/^namespace apache {$/;"	n	file:
apache	protocol/TDebugProtocol.h	/^namespace apache {$/;"	n
apache	protocol/TJSONProtocol.cpp	/^namespace apache {$/;"	n	file:
apache	protocol/TJSONProtocol.h	/^namespace apache {$/;"	n
apache	protocol/TMultiplexedProtocol.cpp	/^namespace apache {$/;"	n	file:
apache	protocol/TMultiplexedProtocol.h	/^namespace apache {$/;"	n
apache	protocol/TProtocol.cpp	/^namespace apache {$/;"	n	file:
apache	protocol/TProtocol.h	/^namespace apache {$/;"	n
apache	protocol/TProtocolDecorator.h	/^namespace apache {$/;"	n
apache	protocol/TProtocolException.h	/^namespace apache {$/;"	n
apache	protocol/TProtocolTap.h	/^namespace apache {$/;"	n
apache	protocol/TVirtualProtocol.h	/^namespace apache {$/;"	n
apache	qt/TQIODeviceTransport.cpp	/^namespace apache {$/;"	n	file:
apache	qt/TQIODeviceTransport.h	/^namespace apache {$/;"	n
apache	qt/TQTcpServer.cpp	/^namespace apache {$/;"	n	file:
apache	qt/TQTcpServer.h	/^namespace apache {$/;"	n
apache	server/TConnectedClient.cpp	/^namespace apache {$/;"	n	file:
apache	server/TConnectedClient.h	/^namespace apache {$/;"	n
apache	server/TNonblockingServer.cpp	/^namespace apache {$/;"	n	file:
apache	server/TNonblockingServer.h	/^namespace apache {$/;"	n
apache	server/TServer.cpp	/^namespace apache {$/;"	n	file:
apache	server/TServer.h	/^namespace apache {$/;"	n
apache	server/TServerFramework.cpp	/^namespace apache {$/;"	n	file:
apache	server/TServerFramework.h	/^namespace apache {$/;"	n
apache	server/TSimpleServer.cpp	/^namespace apache {$/;"	n	file:
apache	server/TSimpleServer.h	/^namespace apache {$/;"	n
apache	server/TThreadPoolServer.cpp	/^namespace apache {$/;"	n	file:
apache	server/TThreadPoolServer.h	/^namespace apache {$/;"	n
apache	server/TThreadedServer.cpp	/^namespace apache {$/;"	n	file:
apache	server/TThreadedServer.h	/^namespace apache {$/;"	n
apache	transport/TBufferTransports.cpp	/^namespace apache {$/;"	n	file:
apache	transport/TBufferTransports.h	/^namespace apache {$/;"	n
apache	transport/TFDTransport.cpp	/^namespace apache {$/;"	n	file:
apache	transport/TFDTransport.h	/^namespace apache {$/;"	n
apache	transport/TFileTransport.cpp	/^namespace apache {$/;"	n	file:
apache	transport/TFileTransport.h	/^namespace apache {$/;"	n
apache	transport/THttpClient.cpp	/^namespace apache {$/;"	n	file:
apache	transport/THttpClient.h	/^namespace apache {$/;"	n
apache	transport/THttpServer.cpp	/^namespace apache {$/;"	n	file:
apache	transport/THttpServer.h	/^namespace apache {$/;"	n
apache	transport/THttpTransport.cpp	/^namespace apache {$/;"	n	file:
apache	transport/THttpTransport.h	/^namespace apache {$/;"	n
apache	transport/TPipe.cpp	/^namespace apache {$/;"	n	file:
apache	transport/TPipe.h	/^namespace apache {$/;"	n
apache	transport/TPipeServer.cpp	/^namespace apache {$/;"	n	file:
apache	transport/TPipeServer.h	/^namespace apache {$/;"	n
apache	transport/TSSLServerSocket.cpp	/^namespace apache {$/;"	n	file:
apache	transport/TSSLServerSocket.h	/^namespace apache {$/;"	n
apache	transport/TSSLSocket.cpp	/^namespace apache {$/;"	n	file:
apache	transport/TSSLSocket.h	/^namespace apache {$/;"	n
apache	transport/TServerSocket.cpp	/^namespace apache {$/;"	n	file:
apache	transport/TServerSocket.h	/^namespace apache {$/;"	n
apache	transport/TServerTransport.h	/^namespace apache {$/;"	n
apache	transport/TShortReadTransport.h	/^namespace apache {$/;"	n
apache	transport/TSimpleFileTransport.cpp	/^namespace apache {$/;"	n	file:
apache	transport/TSimpleFileTransport.h	/^namespace apache {$/;"	n
apache	transport/TSocket.cpp	/^namespace apache {$/;"	n	file:
apache	transport/TSocket.h	/^namespace apache {$/;"	n
apache	transport/TSocketPool.cpp	/^namespace apache {$/;"	n	file:
apache	transport/TSocketPool.h	/^namespace apache {$/;"	n
apache	transport/TTransport.h	/^namespace apache {$/;"	n
apache	transport/TTransportException.cpp	/^namespace apache {$/;"	n	file:
apache	transport/TTransportException.h	/^namespace apache {$/;"	n
apache	transport/TTransportUtils.cpp	/^namespace apache {$/;"	n	file:
apache	transport/TTransportUtils.h	/^namespace apache {$/;"	n
apache	transport/TVirtualTransport.h	/^namespace apache {$/;"	n
apache	transport/TZlibTransport.cpp	/^namespace apache {$/;"	n	file:
apache	transport/TZlibTransport.h	/^namespace apache {$/;"	n
apache	windows/Operators.h	/^namespace apache {$/;"	n
apache	windows/OverlappedSubmissionThread.cpp	/^namespace apache {$/;"	n	file:
apache	windows/OverlappedSubmissionThread.h	/^namespace apache {$/;"	n
apache	windows/Sync.h	/^namespace apache {$/;"	n
apache	windows/TWinsockSingleton.cpp	/^namespace apache {$/;"	n	file:
apache	windows/TWinsockSingleton.h	/^namespace apache {$/;"	n
appState_	server/TNonblockingServer.cpp	/^  TAppState appState_;$/;"	m	class:apache::thrift::server::TNonblockingServer::TConnection	file:
appendBufferToString	transport/TBufferTransports.h	/^  void appendBufferToString(std::string& str) {$/;"	f	class:apache::thrift::transport::TMemoryBuffer
async	async/TAsyncBufferProcessor.h	/^namespace async {$/;"	n	namespace:apache::thrift
async	async/TAsyncChannel.cpp	/^namespace async {$/;"	n	namespace:apache::thrift	file:
async	async/TAsyncChannel.h	/^namespace async {$/;"	n	namespace:apache::thrift
async	async/TAsyncDispatchProcessor.h	/^namespace async {$/;"	n	namespace:apache::thrift
async	async/TAsyncProcessor.h	/^namespace async {$/;"	n	namespace:apache::thrift
async	async/TAsyncProtocolProcessor.cpp	/^namespace async {$/;"	n	namespace:apache::thrift	file:
async	async/TAsyncProtocolProcessor.h	/^namespace async {$/;"	n	namespace:apache::thrift
async	async/TConcurrentClientSyncInfo.cpp	/^namespace apache { namespace thrift { namespace async {$/;"	n	namespace:apache::thrift	file:
async	async/TConcurrentClientSyncInfo.h	/^namespace apache { namespace thrift { namespace async {$/;"	n	namespace:apache::thrift
async	async/TEvhttpClientChannel.cpp	/^namespace async {$/;"	n	namespace:apache::thrift	file:
async	async/TEvhttpClientChannel.h	/^namespace async {$/;"	n	namespace:apache::thrift
async	async/TEvhttpServer.cpp	/^namespace async {$/;"	n	namespace:apache::thrift	file:
async	async/TEvhttpServer.h	/^namespace async {$/;"	n	namespace:apache::thrift
async	qt/TQTcpServer.cpp	/^namespace async {$/;"	n	namespace:apache::thrift	file:
async	qt/TQTcpServer.h	/^namespace async {$/;"	n	namespace:apache::thrift
asyncComplete	TProcessor.h	/^  virtual void asyncComplete(void* ctx, const char* fn_name) {$/;"	f	class:apache::thrift::TProcessorEventHandler
asyncServer_	async/TAsyncProcessor.h	/^  const TEventServer* asyncServer_;$/;"	m	class:apache::thrift::async::TAsyncProcessor
attemptRead	concurrency/Mutex.cpp	/^  bool attemptRead() const { return !pthread_rwlock_tryrdlock(&rw_lock_); }$/;"	f	class:apache::thrift::concurrency::ReadWriteMutex::impl
attemptRead	concurrency/Mutex.cpp	/^bool ReadWriteMutex::attemptRead() const {$/;"	f	class:apache::thrift::concurrency::ReadWriteMutex
attemptWrite	concurrency/Mutex.cpp	/^  bool attemptWrite() const { return !pthread_rwlock_trywrlock(&rw_lock_); }$/;"	f	class:apache::thrift::concurrency::ReadWriteMutex::impl
attemptWrite	concurrency/Mutex.cpp	/^bool ReadWriteMutex::attemptWrite() const {$/;"	f	class:apache::thrift::concurrency::ReadWriteMutex
authenticate	transport/TSSLSocket.cpp	/^void TSSLSocketFactory::authenticate(bool required) {$/;"	f	class:apache::thrift::transport::TSSLSocketFactory
authorize	transport/TSSLSocket.cpp	/^void TSSLSocket::authorize() {$/;"	f	class:apache::thrift::transport::TSSLSocket
available_read	transport/TBufferTransports.h	/^  uint32_t available_read() const {$/;"	f	class:apache::thrift::transport::TMemoryBuffer
available_write	transport/TBufferTransports.h	/^  uint32_t available_write() const { return static_cast<uint32_t>(wBound_ - wBase_); }$/;"	f	class:apache::thrift::transport::TMemoryBuffer
backtrace_	VirtualProfiling.cpp	/^  const Backtrace* backtrace_;$/;"	m	class:apache::thrift::Key	file:
base64_decode	protocol/TBase64Utils.cpp	/^void base64_decode(uint8_t* buf, uint32_t len) {$/;"	f	namespace:apache::thrift::protocol
base64_encode	protocol/TBase64Utils.cpp	/^void base64_encode(const uint8_t* in, uint32_t len, uint8_t* buf) {$/;"	f	namespace:apache::thrift::protocol
beginAsyncRead	transport/TPipe.cpp	/^void TWaitableNamedPipeImpl::beginAsyncRead(uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::TWaitableNamedPipeImpl
beginDecode	qt/TQTcpServer.cpp	/^void TQTcpServer::beginDecode() {$/;"	f	class:apache::thrift::async::TQTcpServer
begin_unread_idx_	transport/TPipe.cpp	/^  uint32_t begin_unread_idx_;$/;"	m	class:apache::thrift::transport::TWaitableNamedPipeImpl	file:
bitwise_cast	protocol/TProtocol.h	/^static inline To bitwise_cast(From from) {$/;"	f
boolValue	protocol/TCompactProtocol.h	/^    bool boolValue;$/;"	m	struct:apache::thrift::protocol::TCompactProtocolT::__anon3
boolValue_	protocol/TCompactProtocol.h	/^  } boolValue_;$/;"	m	class:apache::thrift::protocol::TCompactProtocolT	typeref:struct:apache::thrift::protocol::TCompactProtocolT::__anon3
booleanField_	protocol/TCompactProtocol.h	/^  } booleanField_;$/;"	m	class:apache::thrift::protocol::TCompactProtocolT	typeref:struct:apache::thrift::protocol::TCompactProtocolT::__anon2
borrow	qt/TQIODeviceTransport.cpp	/^uint8_t* TQIODeviceTransport::borrow(uint8_t* buf, uint32_t* len) {$/;"	f	class:apache::thrift::transport::TQIODeviceTransport
borrow	transport/TBufferTransports.h	/^  const uint8_t* borrow(uint8_t* buf, uint32_t* len) {$/;"	f	class:apache::thrift::transport::TBufferBase
borrow	transport/TShortReadTransport.h	/^  const uint8_t* borrow(uint8_t* buf, uint32_t* len) { return transport_->borrow(buf, len); }$/;"	f	class:apache::thrift::transport::test::TShortReadTransport
borrow	transport/TTransport.h	/^  const uint8_t* borrow(uint8_t* buf, uint32_t* len) {$/;"	f	class:apache::thrift::transport::TTransport
borrow	transport/TVirtualTransport.h	/^  const uint8_t* borrow(uint8_t* buf, uint32_t* len) {$/;"	f	class:apache::thrift::transport::TTransportDefaults
borrow	transport/TZlibTransport.cpp	/^const uint8_t* TZlibTransport::borrow(uint8_t* buf, uint32_t* len) {$/;"	f	class:apache::thrift::transport::TZlibTransport
borrowSlow	transport/TBufferTransports.cpp	/^const uint8_t* TBufferedTransport::borrowSlow(uint8_t* buf, uint32_t* len) {$/;"	f	class:apache::thrift::transport::TBufferedTransport
borrowSlow	transport/TBufferTransports.cpp	/^const uint8_t* TFramedTransport::borrowSlow(uint8_t* buf, uint32_t* len) {$/;"	f	class:apache::thrift::transport::TFramedTransport
borrowSlow	transport/TBufferTransports.cpp	/^const uint8_t* TMemoryBuffer::borrowSlow(uint8_t* buf, uint32_t* len) {$/;"	f	class:apache::thrift::transport::TMemoryBuffer
borrow_virt	transport/TTransport.h	/^  virtual const uint8_t* borrow_virt(uint8_t* \/* buf *\/, uint32_t* \/* len *\/) { return NULL; }$/;"	f	class:apache::thrift::transport::TTransport
borrow_virt	transport/TVirtualTransport.h	/^  virtual const uint8_t* borrow_virt(uint8_t* buf, uint32_t* len) {$/;"	f	class:apache::thrift::transport::TVirtualTransport
breakLoop	server/TNonblockingServer.cpp	/^void TNonblockingIOThread::breakLoop(bool error) {$/;"	f	class:apache::thrift::server::TNonblockingIOThread
bswap_16	protocol/TProtocol.h	/^#  define bswap_16(/;"	d
bswap_32	protocol/TProtocol.h	/^#  define bswap_32(/;"	d
bswap_64	protocol/TProtocol.h	/^#  define bswap_64(/;"	d
bufReclaimThresh_	transport/TBufferTransports.h	/^  uint32_t bufReclaimThresh_;$/;"	m	class:apache::thrift::transport::TFramedTransport
buffer	windows/OverlappedSubmissionThread.h	/^  uint8_t* buffer;$/;"	m	struct:apache::thrift::transport::TOverlappedWorkItem
bufferAndThreadInitialized_	transport/TFileTransport.h	/^  bool bufferAndThreadInitialized_;$/;"	m	class:apache::thrift::transport::TFileTransport
bufferLen_	transport/TFileTransport.h	/^  int32_t bufferLen_;$/;"	m	struct:apache::thrift::transport::readState
bufferMode_	transport/TFileTransport.h	/^  mode bufferMode_;$/;"	m	class:apache::thrift::transport::TFileTransportBuffer
bufferPtr_	transport/TFileTransport.h	/^  int32_t bufferPtr_;$/;"	m	struct:apache::thrift::transport::readState
bufferSize_	transport/TBufferTransports.h	/^  uint32_t bufferSize_;$/;"	m	class:apache::thrift::transport::TMemoryBuffer
buffer_	transport/TBufferTransports.h	/^  uint8_t* buffer_;$/;"	m	class:apache::thrift::transport::TMemoryBuffer
buffer_	transport/TFileTransport.h	/^  eventInfo** buffer_;$/;"	m	class:apache::thrift::transport::TFileTransportBuffer
buffer_	transport/TPipe.cpp	/^  std::vector<uint8_t> buffer_;$/;"	m	class:apache::thrift::transport::TWaitableNamedPipeImpl	file:
buffer_len	windows/OverlappedSubmissionThread.h	/^  uint32_t buffer_len;$/;"	m	struct:apache::thrift::transport::TOverlappedWorkItem
bufsize_	transport/TPipeServer.cpp	/^  uint32_t bufsize_;$/;"	m	class:apache::thrift::transport::TNamedPipeServer	file:
bufsize_	transport/TPipeServer.h	/^  uint32_t bufsize_;$/;"	m	class:apache::thrift::transport::TPipeServer
buildErrors	transport/TSSLSocket.cpp	/^void buildErrors(string& errors, int errno_copy) {$/;"	f	namespace:apache::thrift::transport
byte_to_hex	protocol/TDebugProtocol.cpp	/^static string byte_to_hex(const uint8_t byte) {$/;"	f	file:
cachedPeerAddr_	transport/TSocket.h	/^  } cachedPeerAddr_;$/;"	m	class:apache::thrift::transport::TSocket	typeref:union:apache::thrift::transport::TSocket::__anon6
cached_client_	transport/TPipeServer.cpp	/^  boost::shared_ptr<TPipe> cached_client_;$/;"	m	class:apache::thrift::transport::TNamedPipeServer	file:
callbackLocking	transport/TSSLSocket.cpp	/^static void callbackLocking(int mode, int n, const char*, int) {$/;"	f	namespace:apache::thrift::transport
callbackThreadID	transport/TSSLSocket.cpp	/^static unsigned long callbackThreadID() {$/;"	f	namespace:apache::thrift::transport
callers_	VirtualProfiling.cpp	/^  void* callers_[MAX_STACK_DEPTH];$/;"	m	class:apache::thrift::Backtrace	file:
callsForResize_	server/TNonblockingServer.cpp	/^  int32_t callsForResize_;$/;"	m	class:apache::thrift::server::TNonblockingServer::TConnection	file:
canSleep	concurrency/ThreadManager.cpp	/^bool ThreadManager::Impl::canSleep() {$/;"	f	class:apache::thrift::concurrency::ThreadManager::Impl
cancelOverlap_	transport/TPipe.cpp	/^  TOverlappedWorkItem cancelOverlap_;$/;"	m	class:apache::thrift::transport::TWaitableNamedPipeImpl	file:
cancelOverlap_	transport/TPipeServer.cpp	/^  TOverlappedWorkItem cancelOverlap_;$/;"	m	class:apache::thrift::transport::TNamedPipeServer	file:
cast_sockopt	server/TNonblockingServer.h	/^inline SOCKOPT_CAST_T* cast_sockopt(T* v) {$/;"	f	namespace:apache::thrift::server
cast_sockopt	transport/TServerSocket.cpp	/^inline SOCKOPT_CAST_T* cast_sockopt(T* v) {$/;"	f
cast_sockopt	transport/TSocket.cpp	/^inline SOCKOPT_CAST_T* cast_sockopt(T* v) {$/;"	f
checkHandshake	transport/TSSLSocket.cpp	/^void TSSLSocket::checkHandshake() {$/;"	f	class:apache::thrift::transport::TSSLSocket
checkIdleBufferMemLimit	server/TNonblockingServer.cpp	/^void TNonblockingServer::TConnection::checkIdleBufferMemLimit(size_t readLimit, size_t writeLimit) {$/;"	f	class:apache::thrift::server::TNonblockingServer::TConnection
checkZlibRv	transport/TZlibTransport.cpp	/^inline void TZlibTransport::checkZlibRv(int status, const char* message) {$/;"	f	class:apache::thrift::transport::TZlibTransport
checkZlibRvNothrow	transport/TZlibTransport.cpp	/^inline void TZlibTransport::checkZlibRvNothrow(int status, const char* message) {$/;"	f	class:apache::thrift::transport::TZlibTransport
childInterruptSockWriter_	transport/TServerSocket.h	/^  THRIFT_SOCKET childInterruptSockWriter_;                     \/\/ is notified on interruptChildren()$/;"	m	class:apache::thrift::transport::TServerSocket
chunkSize_	transport/TFileTransport.h	/^  uint32_t chunkSize_;$/;"	m	class:apache::thrift::transport::TFileTransport
chunkSize_	transport/THttpTransport.h	/^  uint32_t chunkSize_;$/;"	m	class:apache::thrift::transport::THttpTransport
chunkedDone_	transport/THttpTransport.h	/^  bool chunkedDone_;$/;"	m	class:apache::thrift::transport::THttpTransport
chunked_	transport/THttpTransport.h	/^  bool chunked_;$/;"	m	class:apache::thrift::transport::THttpTransport
ciphers	transport/TSSLSocket.cpp	/^void TSSLSocketFactory::ciphers(const string& enable) {$/;"	f	class:apache::thrift::transport::TSSLSocketFactory
cleanup	VirtualProfiling.cpp	/^  void cleanup() {$/;"	f	class:apache::thrift::Key
cleanup	concurrency/Monitor.cpp	/^  void cleanup() {$/;"	f	class:apache::thrift::concurrency::Monitor::Impl	file:
cleanup	server/TConnectedClient.cpp	/^void TConnectedClient::cleanup() {$/;"	f	class:apache::thrift::server::TConnectedClient
cleanupEvents	server/TNonblockingServer.cpp	/^void TNonblockingIOThread::cleanupEvents() {$/;"	f	class:apache::thrift::server::TNonblockingIOThread
cleanupOpenSSL	transport/TSSLSocket.cpp	/^void cleanupOpenSSL() {$/;"	f	namespace:apache::thrift::transport
client_	server/TConnectedClient.h	/^  boost::shared_ptr<apache::thrift::transport::TTransport> client_;$/;"	m	class:apache::thrift::server::TConnectedClient
clientsMonitor_	server/TThreadedServer.h	/^  apache::thrift::concurrency::Monitor clientsMonitor_;$/;"	m	class:apache::thrift::server::TThreadedServer
clients_	server/TServerFramework.h	/^  int64_t clients_;$/;"	m	class:apache::thrift::server::TServerFramework
close	qt/TQIODeviceTransport.cpp	/^void TQIODeviceTransport::close() {$/;"	f	class:apache::thrift::transport::TQIODeviceTransport
close	server/TNonblockingServer.cpp	/^void TNonblockingServer::TConnection::close() {$/;"	f	class:apache::thrift::server::TNonblockingServer::TConnection
close	transport/TBufferTransports.h	/^  void close() {$/;"	f	class:apache::thrift::transport::TBufferedTransport
close	transport/TBufferTransports.h	/^  void close() {$/;"	f	class:apache::thrift::transport::TFramedTransport
close	transport/TBufferTransports.h	/^  void close() {}$/;"	f	class:apache::thrift::transport::TMemoryBuffer
close	transport/TFDTransport.cpp	/^void TFDTransport::close() {$/;"	f	class:apache::thrift::transport::TFDTransport
close	transport/THttpTransport.h	/^  void close() { transport_->close(); }$/;"	f	class:apache::thrift::transport::THttpTransport
close	transport/TPipe.cpp	/^void TPipe::close() {$/;"	f	class:apache::thrift::transport::TPipe
close	transport/TPipeServer.cpp	/^void TPipeServer::close() {$/;"	f	class:apache::thrift::transport::TPipeServer
close	transport/TSSLSocket.cpp	/^void TSSLSocket::close() {$/;"	f	class:apache::thrift::transport::TSSLSocket
close	transport/TServerSocket.cpp	/^void TServerSocket::close() {$/;"	f	class:apache::thrift::transport::TServerSocket
close	transport/TShortReadTransport.h	/^  void close() { transport_->close(); }$/;"	f	class:apache::thrift::transport::test::TShortReadTransport
close	transport/TSocket.cpp	/^void TSocket::close() {$/;"	f	class:apache::thrift::transport::TSocket
close	transport/TSocketPool.cpp	/^void TSocketPool::close() {$/;"	f	class:apache::thrift::transport::TSocketPool
close	transport/TTransport.h	/^  virtual void close() {$/;"	f	class:apache::thrift::transport::TTransport
close	transport/TTransportUtils.cpp	/^void TPipedFileReaderTransport::close() {$/;"	f	class:apache::thrift::transport::TPipedFileReaderTransport
close	transport/TTransportUtils.h	/^  void close() { srcTrans_->close(); }$/;"	f	class:apache::thrift::transport::TPipedTransport
close	transport/TZlibTransport.h	/^  void close() { transport_->close(); }$/;"	f	class:apache::thrift::transport::TZlibTransport
close_policy_	transport/TFDTransport.h	/^  ClosePolicy close_policy_;$/;"	m	class:apache::thrift::transport::TFDTransport
closing_	transport/TFileTransport.h	/^  volatile bool closing_;$/;"	m	class:apache::thrift::transport::TFileTransport
cmp	VirtualProfiling.cpp	/^  int cmp(Backtrace const& bt) const {$/;"	f	class:apache::thrift::Backtrace
cmp	VirtualProfiling.cpp	/^  int cmp(const Key& k) const {$/;"	f	class:apache::thrift::Key
cob_	async/TEvhttpClientChannel.h	/^  VoidCallback cob_;$/;"	m	class:apache::thrift::async::TEvhttpClientChannel
colon_	protocol/TJSONProtocol.cpp	/^  bool colon_;$/;"	m	class:apache::thrift::protocol::JSONPairContext	file:
commit	async/TConcurrentClientSyncInfo.cpp	/^void TConcurrentRecvSentry::commit()$/;"	f	class:apache::thrift::async::TConcurrentRecvSentry
commit	async/TConcurrentClientSyncInfo.cpp	/^void TConcurrentSendSentry::commit()$/;"	f	class:apache::thrift::async::TConcurrentSendSentry
committed_	async/TConcurrentClientSyncInfo.h	/^  bool committed_;$/;"	m	class:apache::thrift::async::TConcurrentRecvSentry
committed_	async/TConcurrentClientSyncInfo.h	/^  bool committed_;$/;"	m	class:apache::thrift::async::TConcurrentSendSentry
comp_level_	transport/TZlibTransport.h	/^  const int comp_level_;$/;"	m	class:apache::thrift::transport::TZlibTransport
compact	protocol/TCompactProtocol.tcc	/^namespace detail { namespace compact {$/;"	n	namespace:apache::thrift::protocol::detail	file:
complete	async/TEvhttpServer.cpp	/^void TEvhttpServer::complete(RequestContext* ctx, bool success) {$/;"	f	class:apache::thrift::async::TEvhttpServer
computeRead	transport/TBufferTransports.cpp	/^void TMemoryBuffer::computeRead(uint32_t len, uint8_t** out_start, uint32_t* out_give) {$/;"	f	class:apache::thrift::transport::TMemoryBuffer
concurrency	concurrency/BoostMonitor.cpp	/^namespace concurrency {$/;"	n	namespace:apache::thrift	file:
concurrency	concurrency/BoostMutex.cpp	/^namespace concurrency {$/;"	n	namespace:apache::thrift	file:
concurrency	concurrency/BoostThreadFactory.cpp	/^namespace concurrency {$/;"	n	namespace:apache::thrift	file:
concurrency	concurrency/BoostThreadFactory.h	/^namespace concurrency {$/;"	n	namespace:apache::thrift
concurrency	concurrency/Exception.h	/^namespace concurrency {$/;"	n	namespace:apache::thrift
concurrency	concurrency/FunctionRunner.h	/^namespace concurrency {$/;"	n	namespace:apache::thrift
concurrency	concurrency/Monitor.cpp	/^namespace concurrency {$/;"	n	namespace:apache::thrift	file:
concurrency	concurrency/Monitor.h	/^namespace concurrency {$/;"	n	namespace:apache::thrift
concurrency	concurrency/Mutex.cpp	/^namespace concurrency {$/;"	n	namespace:apache::thrift	file:
concurrency	concurrency/Mutex.h	/^namespace concurrency {$/;"	n	namespace:apache::thrift
concurrency	concurrency/PlatformThreadFactory.h	/^namespace concurrency {$/;"	n	namespace:apache::thrift
concurrency	concurrency/PosixThreadFactory.cpp	/^namespace concurrency {$/;"	n	namespace:apache::thrift	file:
concurrency	concurrency/PosixThreadFactory.h	/^namespace concurrency {$/;"	n	namespace:apache::thrift
concurrency	concurrency/StdMonitor.cpp	/^namespace concurrency {$/;"	n	namespace:apache::thrift	file:
concurrency	concurrency/StdMutex.cpp	/^namespace concurrency {$/;"	n	namespace:apache::thrift	file:
concurrency	concurrency/StdThreadFactory.cpp	/^namespace concurrency {$/;"	n	namespace:apache::thrift	file:
concurrency	concurrency/StdThreadFactory.h	/^namespace concurrency {$/;"	n	namespace:apache::thrift
concurrency	concurrency/Thread.h	/^namespace concurrency {$/;"	n	namespace:apache::thrift
concurrency	concurrency/ThreadManager.cpp	/^namespace concurrency {$/;"	n	namespace:apache::thrift	file:
concurrency	concurrency/ThreadManager.h	/^namespace concurrency {$/;"	n	namespace:apache::thrift
concurrency	concurrency/TimerManager.cpp	/^namespace concurrency {$/;"	n	namespace:apache::thrift	file:
concurrency	concurrency/TimerManager.h	/^namespace concurrency {$/;"	n	namespace:apache::thrift
concurrency	concurrency/Util.cpp	/^namespace concurrency {$/;"	n	namespace:apache::thrift	file:
concurrency	concurrency/Util.h	/^namespace concurrency {$/;"	n	namespace:apache::thrift
condInitialized_	concurrency/Monitor.cpp	/^  mutable bool condInitialized_;$/;"	m	class:apache::thrift::concurrency::Monitor::Impl	file:
conditionVariable_	concurrency/StdMonitor.cpp	/^  std::condition_variable_any conditionVariable_;$/;"	m	class:apache::thrift::concurrency::Monitor::Impl	file:
connMutex_	server/TNonblockingServer.h	/^  Mutex connMutex_;$/;"	m	class:apache::thrift::server::TNonblockingServer
connTimeout_	transport/TSocket.h	/^  int connTimeout_;$/;"	m	class:apache::thrift::transport::TSocket
conn_	async/TEvhttpClientChannel.h	/^  struct evhttp_connection* conn_;$/;"	m	class:apache::thrift::async::TEvhttpClientChannel	typeref:struct:apache::thrift::async::TEvhttpClientChannel::evhttp_connection
connectOverlap_	transport/TPipeServer.cpp	/^  TOverlappedWorkItem connectOverlap_;$/;"	m	class:apache::thrift::transport::TNamedPipeServer	file:
connectionContext_	server/TNonblockingServer.cpp	/^  void* connectionContext_;$/;"	m	class:apache::thrift::server::TNonblockingServer::TConnection	file:
connectionContext_	server/TNonblockingServer.cpp	/^  void* connectionContext_;$/;"	m	class:apache::thrift::server::TNonblockingServer::TConnection::Task	file:
connectionStackLimit_	server/TNonblockingServer.h	/^  size_t connectionStackLimit_;$/;"	m	class:apache::thrift::server::TNonblockingServer
connectionStack_	server/TNonblockingServer.h	/^  std::stack<TConnection*> connectionStack_;$/;"	m	class:apache::thrift::server::TNonblockingServer
connection_	qt/TQTcpServer.cpp	/^  shared_ptr<QTcpSocket> connection_;$/;"	m	struct:apache::thrift::async::TQTcpServer::ConnectionContext	file:
connection_	server/TNonblockingServer.cpp	/^  TConnection* connection_;$/;"	m	class:apache::thrift::server::TNonblockingServer::TConnection::Task	file:
consecutiveFailures_	transport/TSocketPool.h	/^  int consecutiveFailures_;$/;"	m	class:apache::thrift::transport::TSocketPoolServer
const_cast_sockopt	server/TNonblockingServer.h	/^inline const SOCKOPT_CAST_T* const_cast_sockopt(const T* v) {$/;"	f	namespace:apache::thrift::server
const_cast_sockopt	transport/TServerSocket.cpp	/^inline const SOCKOPT_CAST_T* const_cast_sockopt(const T* v) {$/;"	f
const_cast_sockopt	transport/TSocket.cpp	/^inline const SOCKOPT_CAST_T* const_cast_sockopt(const T* v) {$/;"	f
consume	qt/TQIODeviceTransport.cpp	/^void TQIODeviceTransport::consume(uint32_t len) {$/;"	f	class:apache::thrift::transport::TQIODeviceTransport
consume	transport/TBufferTransports.h	/^  void consume(uint32_t len) {$/;"	f	class:apache::thrift::transport::TBufferBase
consume	transport/TShortReadTransport.h	/^  void consume(uint32_t len) { return transport_->consume(len); }$/;"	f	class:apache::thrift::transport::test::TShortReadTransport
consume	transport/TTransport.h	/^  void consume(uint32_t len) {$/;"	f	class:apache::thrift::transport::TTransport
consume	transport/TVirtualTransport.h	/^  void consume(uint32_t len) { this->TTransport::consume_virt(len); }$/;"	f	class:apache::thrift::transport::TTransportDefaults
consume	transport/TZlibTransport.cpp	/^void TZlibTransport::consume(uint32_t len) {$/;"	f	class:apache::thrift::transport::TZlibTransport
consume_virt	transport/TTransport.h	/^  virtual void consume_virt(uint32_t \/* len *\/) {$/;"	f	class:apache::thrift::transport::TTransport
consume_virt	transport/TVirtualTransport.h	/^  virtual void consume_virt(uint32_t len) { static_cast<Transport_*>(this)->consume(len); }$/;"	f	class:apache::thrift::transport::TVirtualTransport
container_limit_	protocol/TBinaryProtocol.h	/^  int32_t container_limit_;$/;"	m	class:apache::thrift::protocol::TBinaryProtocolFactoryT
container_limit_	protocol/TBinaryProtocol.h	/^  int32_t container_limit_;$/;"	m	class:apache::thrift::protocol::TBinaryProtocolT
container_limit_	protocol/TCompactProtocol.h	/^  int32_t container_limit_;$/;"	m	class:apache::thrift::protocol::TCompactProtocolFactoryT
container_limit_	protocol/TCompactProtocol.h	/^  int32_t container_limit_;$/;"	m	class:apache::thrift::protocol::TCompactProtocolT
contentLength_	transport/THttpTransport.h	/^  uint32_t contentLength_;$/;"	m	class:apache::thrift::transport::THttpTransport
context_	TProcessor.h	/^  void* context_;$/;"	m	class:apache::thrift::TProcessorContextFreer
context_	protocol/TJSONProtocol.h	/^  boost::shared_ptr<TJSONContext> context_;$/;"	m	class:apache::thrift::protocol::TJSONProtocol
contexts_	protocol/TJSONProtocol.h	/^  std::stack<boost::shared_ptr<TJSONContext> > contexts_;$/;"	m	class:apache::thrift::protocol::TJSONProtocol
corruptedEventSleepTime_	transport/TFileTransport.h	/^  uint32_t corruptedEventSleepTime_;$/;"	m	class:apache::thrift::transport::TFileTransport
count_	transport/TSSLSocket.cpp	/^uint64_t TSSLSocketFactory::count_ = 0;$/;"	m	class:apache::thrift::transport::TSSLSocketFactory	file:
count_	transport/TSSLSocket.h	/^  static uint64_t count_;$/;"	m	class:apache::thrift::transport::TSSLSocketFactory
crbuf_	transport/TZlibTransport.h	/^  uint8_t* crbuf_;$/;"	m	class:apache::thrift::transport::TZlibTransport
crbuf_size_	transport/TZlibTransport.h	/^  uint32_t crbuf_size_;$/;"	m	class:apache::thrift::transport::TZlibTransport
create	concurrency/FunctionRunner.h	/^  static boost::shared_ptr<FunctionRunner> create(PthreadFuncPtr func, void* arg) {$/;"	f	class:apache::thrift::concurrency::FunctionRunner
create	concurrency/FunctionRunner.h	/^  static boost::shared_ptr<FunctionRunner> create(const VoidFunc& cob) {$/;"	f	class:apache::thrift::concurrency::FunctionRunner
create	windows/TWinsockSingleton.cpp	/^void TWinsockSingleton::create(void) {$/;"	f	class:apache::thrift::transport::TWinsockSingleton
createAndListenOnSocket	server/TNonblockingServer.cpp	/^void TNonblockingServer::createAndListenOnSocket() {$/;"	f	class:apache::thrift::server::TNonblockingServer
createAnonPipe	transport/TPipeServer.cpp	/^bool TAnonPipeServer::createAnonPipe() {$/;"	f	class:apache::thrift::transport::TAnonPipeServer
createConnection	server/TNonblockingServer.cpp	/^TNonblockingServer::TConnection* TNonblockingServer::createConnection(THRIFT_SOCKET socket,$/;"	f	class:apache::thrift::server::TNonblockingServer
createContext	server/TServer.h	/^  virtual void* createContext(boost::shared_ptr<TProtocol> input,$/;"	f	class:apache::thrift::server::TServerEventHandler
createNamedPipe	transport/TPipeServer.cpp	/^bool TNamedPipeServer::createNamedPipe(const TAutoCrit & \/*lockProof*\/) {$/;"	f	class:apache::thrift::transport::TNamedPipeServer
createNotificationPipe	server/TNonblockingServer.cpp	/^void TNonblockingIOThread::createNotificationPipe() {$/;"	f	class:apache::thrift::server::TNonblockingIOThread
createSSL	transport/TSSLSocket.cpp	/^SSL* SSLContext::createSSL() {$/;"	f	class:apache::thrift::transport::SSLContext
createSocket	transport/TSSLServerSocket.cpp	/^boost::shared_ptr<TSocket> TSSLServerSocket::createSocket(THRIFT_SOCKET client) {$/;"	f	class:apache::thrift::transport::TSSLServerSocket
createSocket	transport/TSSLSocket.cpp	/^boost::shared_ptr<TSSLSocket> TSSLSocketFactory::createSocket() {$/;"	f	class:apache::thrift::transport::TSSLSocketFactory
createSocket	transport/TSSLSocket.cpp	/^boost::shared_ptr<TSSLSocket> TSSLSocketFactory::createSocket(THRIFT_SOCKET socket) {$/;"	f	class:apache::thrift::transport::TSSLSocketFactory
createSocket	transport/TSSLSocket.cpp	/^boost::shared_ptr<TSSLSocket> TSSLSocketFactory::createSocket(const string& host, int port) {$/;"	f	class:apache::thrift::transport::TSSLSocketFactory
createSocket	transport/TServerSocket.cpp	/^shared_ptr<TSocket> TServerSocket::createSocket(THRIFT_SOCKET clientSocket) {$/;"	f	class:apache::thrift::transport::TServerSocket
cs	windows/Sync.h	/^  CRITICAL_SECTION cs;$/;"	m	struct:apache::thrift::TCriticalSection
cs_	windows/Sync.h	/^  CRITICAL_SECTION* cs_;$/;"	m	class:apache::thrift::TAutoCrit
ctxMap_	qt/TQTcpServer.h	/^  std::map<QT_PREPEND_NAMESPACE(QTcpSocket)*, boost::shared_ptr<ConnectionContext> > ctxMap_;$/;"	m	class:apache::thrift::async::TQTcpServer
ctx_	transport/TSSLSocket.h	/^  SSL_CTX* ctx_;$/;"	m	class:apache::thrift::transport::SSLContext
ctx_	transport/TSSLSocket.h	/^  boost::shared_ptr<SSLContext> ctx_;$/;"	m	class:apache::thrift::transport::TSSLSocket
ctx_	transport/TSSLSocket.h	/^  boost::shared_ptr<SSLContext> ctx_;$/;"	m	class:apache::thrift::transport::TSSLSocketFactory
currentEvent_	transport/TFileTransport.h	/^  eventInfo* currentEvent_;$/;"	m	class:apache::thrift::transport::TFileTransport
currentServer_	transport/TSocketPool.h	/^  boost::shared_ptr<TSocketPoolServer> currentServer_;$/;"	m	class:apache::thrift::transport::TSocketPool
currentTime	concurrency/Util.h	/^  static int64_t currentTime() { return currentTimeTicks(MS_PER_S); }$/;"	f	class:apache::thrift::concurrency::Util
currentTimeTicks	concurrency/Util.cpp	/^int64_t Util::currentTimeTicks(int64_t ticksPerSec) {$/;"	f	class:apache::thrift::concurrency::Util
currentTimeUsec	concurrency/Util.h	/^  static int64_t currentTimeUsec() { return currentTimeTicks(US_PER_S); }$/;"	f	class:apache::thrift::concurrency::Util
cwbuf_	transport/TZlibTransport.h	/^  uint8_t* cwbuf_;$/;"	m	class:apache::thrift::transport::TZlibTransport
cwbuf_size_	transport/TZlibTransport.h	/^  uint32_t cwbuf_size_;$/;"	m	class:apache::thrift::transport::TZlibTransport
data_	protocol/TJSONProtocol.h	/^    uint8_t data_;$/;"	m	class:apache::thrift::protocol::TJSONProtocol::LookaheadReader
deadWorkers_	concurrency/ThreadManager.cpp	/^  std::set<shared_ptr<Thread> > deadWorkers_;$/;"	m	class:apache::thrift::concurrency::ThreadManager::Impl	file:
decrementActiveProcessors	server/TNonblockingServer.h	/^  void decrementActiveProcessors() {$/;"	f	class:apache::thrift::server::TNonblockingServer
decrementInputRecursionDepth	protocol/TProtocol.h	/^  void decrementInputRecursionDepth() { --input_recursion_depth_; }$/;"	f	class:apache::thrift::protocol::TProtocol
decrementOutputRecursionDepth	protocol/TProtocol.h	/^  void decrementOutputRecursionDepth() { --output_recursion_depth_; }$/;"	f	class:apache::thrift::protocol::TProtocol
defaultSize	transport/TBufferTransports.h	/^  static const uint32_t defaultSize = 1024;$/;"	m	class:apache::thrift::transport::TMemoryBuffer
delayException	Thrift.h	/^TDelayedException* TDelayedException::delayException(const E& e) {$/;"	f	class:apache::thrift::TDelayedException
deleteContext	server/TServer.h	/^  virtual void deleteContext(void* serverContext,$/;"	f	class:apache::thrift::server::TServerEventHandler
deleteMonitor_	async/TConcurrentClientSyncInfo.cpp	/^void TConcurrentClientSyncInfo::deleteMonitor_($/;"	f	class:apache::thrift::async::TConcurrentClientSyncInfo
dequeueBuffer_	transport/TFileTransport.h	/^  TFileTransportBuffer* dequeueBuffer_;$/;"	m	class:apache::thrift::transport::TFileTransport
destroyer_of_fine_sockets	transport/TServerSocket.cpp	/^void destroyer_of_fine_sockets(THRIFT_SOCKET* ssock) {$/;"	f
detached_	concurrency/BoostThreadFactory.cpp	/^  bool detached_;$/;"	m	class:apache::thrift::concurrency::BoostThread	file:
detached_	concurrency/BoostThreadFactory.cpp	/^  bool detached_;$/;"	m	class:apache::thrift::concurrency::BoostThreadFactory::Impl	file:
detached_	concurrency/PosixThreadFactory.cpp	/^  bool detached_;$/;"	m	class:apache::thrift::concurrency::PosixThreadFactory::Impl	file:
detached_	concurrency/PosixThreadFactory.cpp	/^  bool detached_;$/;"	m	class:apache::thrift::concurrency::PthreadThread	file:
detached_	concurrency/StdThreadFactory.cpp	/^  bool detached_;$/;"	m	class:apache::thrift::concurrency::StdThread	file:
detached_	concurrency/StdThreadFactory.cpp	/^  bool detached_;$/;"	m	class:apache::thrift::concurrency::StdThreadFactory::Impl	file:
detail	protocol/TCompactProtocol.tcc	/^namespace detail { namespace compact {$/;"	n	namespace:apache::thrift::protocol	file:
dev_	qt/TQIODeviceTransport.h	/^  boost::shared_ptr<QIODevice> dev_;$/;"	m	class:apache::thrift::transport::TQIODeviceTransport
dispatchCall	gen-cpp-fb-s/FacebookService.cpp	/^bool FacebookServiceProcessor::dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) {$/;"	f	class:facebook::fb303::FacebookServiceProcessor
dispatchCall	gen-cpp-fb/FacebookService.cpp	/^bool FacebookServiceProcessor::dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) {$/;"	f	class:facebook::fb303::FacebookServiceProcessor
dispatcherThread_	concurrency/TimerManager.h	/^  boost::shared_ptr<Thread> dispatcherThread_;$/;"	m	class:apache::thrift::concurrency::TimerManager
dispatcher_	concurrency/TimerManager.h	/^  boost::shared_ptr<Dispatcher> dispatcher_;$/;"	m	class:apache::thrift::concurrency::TimerManager
disposeConnectedClient	server/TServerFramework.cpp	/^void TServerFramework::disposeConnectedClient(TConnectedClient* pClient) {$/;"	f	class:apache::thrift::server::TServerFramework
doneSubmittingEvent	windows/OverlappedSubmissionThread.h	/^  TAutoResetEvent doneSubmittingEvent;$/;"	m	struct:apache::thrift::transport::TOverlappedWorkItem
doubleToString	protocol/TJSONProtocol.cpp	/^std::string doubleToString(double d) {$/;"	f	namespace:apache::thrift::protocol::__anon4
drainPendingTask	server/TNonblockingServer.cpp	/^bool TNonblockingServer::drainPendingTask() {$/;"	f	class:apache::thrift::server::TNonblockingServer
dstTrans_	transport/TTransportUtils.h	/^  boost::shared_ptr<TTransport> dstTrans_;$/;"	m	class:apache::thrift::transport::TPipedTransport
dstTrans_	transport/TTransportUtils.h	/^  boost::shared_ptr<TTransport> dstTrans_;$/;"	m	class:apache::thrift::transport::TPipedTransportFactory
dyn_create	transport/TSSLSocket.cpp	/^static CRYPTO_dynlock_value* dyn_create(const char*, int) {$/;"	f	namespace:apache::thrift::transport
dyn_destroy	transport/TSSLSocket.cpp	/^static void dyn_destroy(struct CRYPTO_dynlock_value* lock, const char*, int) {$/;"	f	namespace:apache::thrift::transport
dyn_lock	transport/TSSLSocket.cpp	/^static void dyn_lock(int mode, struct CRYPTO_dynlock_value* lock, const char*, int) {$/;"	f	namespace:apache::thrift::transport
e_	Thrift.h	/^  E e_;$/;"	m	class:apache::thrift::TExceptionWrapper
eb_	async/TEvhttpServer.h	/^  struct event_base* eb_;$/;"	m	class:apache::thrift::async::TEvhttpServer	typeref:struct:apache::thrift::async::TEvhttpServer::event_base
eh_	async/TEvhttpServer.h	/^  struct evhttp* eh_;$/;"	m	class:apache::thrift::async::TEvhttpServer	typeref:struct:apache::thrift::async::TEvhttpServer::evhttp
enableMutexProfiling	concurrency/Mutex.cpp	/^void enableMutexProfiling(int32_t profilingSampleRate, MutexWaitCallback callback) {$/;"	f	namespace:apache::thrift::concurrency
endAsyncRead	transport/TPipe.cpp	/^uint32_t TWaitableNamedPipeImpl::endAsyncRead() {$/;"	f	class:apache::thrift::transport::TWaitableNamedPipeImpl
endItem	protocol/TDebugProtocol.cpp	/^uint32_t TDebugProtocol::endItem() {$/;"	f	class:apache::thrift::protocol::TDebugProtocol
end_unread_idx_	transport/TPipe.cpp	/^  uint32_t end_unread_idx_;$/;"	m	class:apache::thrift::transport::TWaitableNamedPipeImpl	file:
enqueueBuffer_	transport/TFileTransport.h	/^  TFileTransportBuffer* enqueueBuffer_;$/;"	m	class:apache::thrift::transport::TFileTransport
enqueueEvent	transport/TFileTransport.cpp	/^void TFileTransport::enqueueEvent(const uint8_t* buf, uint32_t eventLen) {$/;"	f	class:apache::thrift::transport::TFileTransport
ensureCanWrite	transport/TBufferTransports.cpp	/^void TMemoryBuffer::ensureCanWrite(uint32_t len) {$/;"	f	class:apache::thrift::transport::TMemoryBuffer
enums_	Thrift.h	/^  int* enums_;$/;"	m	class:apache::thrift::TEnumIterator
eofSleepTime_	transport/TFileTransport.h	/^  uint32_t eofSleepTime_;$/;"	m	class:apache::thrift::transport::TFileTransport
error	async/TEvhttpClientChannel.h	/^  virtual bool error() const { return false; }$/;"	f	class:apache::thrift::async::TEvhttpClientChannel
errorMessage	transport/TZlibTransport.h	/^  static std::string errorMessage(int status, const char* msg) {$/;"	f	class:apache::thrift::transport::TZlibTransportException
errorTimeWrapper	TOutput.cpp	/^void TOutput::errorTimeWrapper(const char* msg) {$/;"	f	class:apache::thrift::TOutput
escapeNum	protocol/TJSONProtocol.cpp	/^  virtual bool escapeNum() { return colon_; }$/;"	f	class:apache::thrift::protocol::JSONPairContext
escapeNum	protocol/TJSONProtocol.cpp	/^  virtual bool escapeNum() { return false; }$/;"	f	class:apache::thrift::protocol::TJSONContext
eventBase_	server/TNonblockingServer.h	/^  event_base* eventBase_;$/;"	m	class:apache::thrift::server::TNonblockingIOThread
eventBuffPos_	transport/TFileTransport.h	/^  uint32_t eventBuffPos_;$/;"	m	struct:apache::thrift::transport::eventInfo
eventBuff_	transport/TFileTransport.h	/^  uint8_t* eventBuff_;$/;"	m	struct:apache::thrift::transport::eventInfo
eventBufferSize_	transport/TFileTransport.h	/^  uint32_t eventBufferSize_;$/;"	m	class:apache::thrift::transport::TFileTransport
eventFlags_	server/TNonblockingServer.cpp	/^  short eventFlags_;$/;"	m	class:apache::thrift::server::TNonblockingServer::TConnection	file:
eventHandler	server/TNonblockingServer.cpp	/^  static void eventHandler(evutil_socket_t fd, short \/* which *\/, void* v) {$/;"	f	class:apache::thrift::server::TNonblockingServer::TConnection
eventHandler_	TProcessor.h	/^  boost::shared_ptr<TProcessorEventHandler> eventHandler_;$/;"	m	class:apache::thrift::TProcessor
eventHandler_	async/TAsyncProcessor.h	/^  boost::shared_ptr<TProcessorEventHandler> eventHandler_;$/;"	m	class:apache::thrift::async::TAsyncProcessor
eventHandler_	server/TConnectedClient.h	/^  boost::shared_ptr<apache::thrift::server::TServerEventHandler> eventHandler_;$/;"	m	class:apache::thrift::server::TConnectedClient
eventHandler_	server/TServer.h	/^  boost::shared_ptr<TServerEventHandler> eventHandler_;$/;"	m	class:apache::thrift::server::TServer
eventInfo	transport/TFileTransport.h	/^  eventInfo() : eventBuff_(NULL), eventSize_(0), eventBuffPos_(0){};$/;"	f	struct:apache::thrift::transport::eventInfo
eventInfo	transport/TFileTransport.h	/^typedef struct eventInfo {$/;"	s	namespace:apache::thrift::transport
eventInfo	transport/TFileTransport.h	/^} eventInfo;$/;"	t	namespace:apache::thrift::transport	typeref:struct:apache::thrift::transport::eventInfo
eventSizeBuffPos_	transport/TFileTransport.h	/^  uint8_t eventSizeBuffPos_;$/;"	m	struct:apache::thrift::transport::readState
eventSizeBuff_	transport/TFileTransport.h	/^  uint8_t eventSizeBuff_[4];$/;"	m	struct:apache::thrift::transport::readState
eventSize_	transport/TFileTransport.h	/^  uint32_t eventSize_;$/;"	m	struct:apache::thrift::transport::eventInfo
event_	server/TNonblockingServer.cpp	/^  struct event event_;$/;"	m	class:apache::thrift::server::TNonblockingServer::TConnection	typeref:struct:apache::thrift::server::TNonblockingServer::TConnection::event	file:
event_	transport/TFileTransport.h	/^  eventInfo* event_;$/;"	m	struct:apache::thrift::transport::readState
events	windows/WinFcntl.h	/^  SHORT events;$/;"	m	struct:thrift_pollfd
evutil_socket_t	server/TNonblockingServer.h	/^typedef THRIFT_SOCKET evutil_socket_t;$/;"	t	namespace:apache::thrift::server
expireCallback_	concurrency/ThreadManager.cpp	/^  ExpireCallback expireCallback_;$/;"	m	class:apache::thrift::concurrency::ThreadManager::Impl	file:
expireClose	server/TNonblockingServer.cpp	/^void TNonblockingServer::expireClose(boost::shared_ptr<Runnable> task) {$/;"	f	class:apache::thrift::server::TNonblockingServer
expireTime_	concurrency/ThreadManager.cpp	/^  int64_t expireTime_;$/;"	m	class:apache::thrift::concurrency::ThreadManager::Task	file:
expiredCount_	concurrency/ThreadManager.cpp	/^  size_t expiredCount_;$/;"	m	class:apache::thrift::concurrency::ThreadManager::Impl	file:
expiredTaskCount	concurrency/ThreadManager.cpp	/^  size_t expiredTaskCount() {$/;"	f	class:apache::thrift::concurrency::ThreadManager::Impl
f_	TOutput.h	/^  void (*f_)(const char*);$/;"	m	class:apache::thrift::TOutput
facebook	gen-cpp-fb-s/FacebookService.cpp	/^namespace facebook { namespace fb303 {$/;"	n	file:
facebook	gen-cpp-fb-s/FacebookService.h	/^namespace facebook { namespace fb303 {$/;"	n
facebook	gen-cpp-fb-s/facebooktest_constants.cpp	/^namespace facebook { namespace fb303 {$/;"	n	file:
facebook	gen-cpp-fb-s/facebooktest_constants.h	/^namespace facebook { namespace fb303 {$/;"	n
facebook	gen-cpp-fb-s/facebooktest_types.cpp	/^namespace facebook { namespace fb303 {$/;"	n	file:
facebook	gen-cpp-fb-s/facebooktest_types.h	/^namespace facebook { namespace fb303 {$/;"	n
facebook	gen-cpp-fb/FacebookService.cpp	/^namespace facebook { namespace fb303 {$/;"	n	file:
facebook	gen-cpp-fb/FacebookService.h	/^namespace facebook { namespace fb303 {$/;"	n
facebook	gen-cpp-fb/facebooktest_constants.cpp	/^namespace facebook { namespace fb303 {$/;"	n	file:
facebook	gen-cpp-fb/facebooktest_constants.h	/^namespace facebook { namespace fb303 {$/;"	n
facebook	gen-cpp-fb/facebooktest_types.cpp	/^namespace facebook { namespace fb303 {$/;"	n	file:
facebook	gen-cpp-fb/facebooktest_types.h	/^namespace facebook { namespace fb303 {$/;"	n
facebooktestConstants	gen-cpp-fb-s/facebooktest_constants.cpp	/^facebooktestConstants::facebooktestConstants() {$/;"	f	class:facebook::fb303::facebooktestConstants
facebooktestConstants	gen-cpp-fb-s/facebooktest_constants.h	/^class facebooktestConstants {$/;"	c	namespace:facebook::fb303
facebooktestConstants	gen-cpp-fb/facebooktest_constants.cpp	/^facebooktestConstants::facebooktestConstants() {$/;"	f	class:facebook::fb303::facebooktestConstants
facebooktestConstants	gen-cpp-fb/facebooktest_constants.h	/^class facebooktestConstants {$/;"	c	namespace:facebook::fb303
facebooktest_CONSTANTS_H	gen-cpp-fb-s/facebooktest_constants.h	/^#define facebooktest_CONSTANTS_H$/;"	d
facebooktest_CONSTANTS_H	gen-cpp-fb/facebooktest_constants.h	/^#define facebooktest_CONSTANTS_H$/;"	d
facebooktest_TYPES_H	gen-cpp-fb-s/facebooktest_types.h	/^#define facebooktest_TYPES_H$/;"	d
facebooktest_TYPES_H	gen-cpp-fb/facebooktest_types.h	/^#define facebooktest_TYPES_H$/;"	d
factoryInputTransport_	server/TNonblockingServer.cpp	/^  boost::shared_ptr<TTransport> factoryInputTransport_;$/;"	m	class:apache::thrift::server::TNonblockingServer::TConnection	file:
factoryOutputTransport_	server/TNonblockingServer.cpp	/^  boost::shared_ptr<TTransport> factoryOutputTransport_;$/;"	m	class:apache::thrift::server::TNonblockingServer::TConnection	file:
factory_	transport/TSSLServerSocket.h	/^  boost::shared_ptr<TSSLSocketFactory> factory_;$/;"	m	class:apache::thrift::transport::TSSLServerSocket
fb303	gen-cpp-fb-s/FacebookService.cpp	/^namespace facebook { namespace fb303 {$/;"	n	namespace:facebook	file:
fb303	gen-cpp-fb-s/FacebookService.h	/^namespace facebook { namespace fb303 {$/;"	n	namespace:facebook
fb303	gen-cpp-fb-s/facebooktest_constants.cpp	/^namespace facebook { namespace fb303 {$/;"	n	namespace:facebook	file:
fb303	gen-cpp-fb-s/facebooktest_constants.h	/^namespace facebook { namespace fb303 {$/;"	n	namespace:facebook
fb303	gen-cpp-fb-s/facebooktest_types.cpp	/^namespace facebook { namespace fb303 {$/;"	n	namespace:facebook	file:
fb303	gen-cpp-fb-s/facebooktest_types.h	/^namespace facebook { namespace fb303 {$/;"	n	namespace:facebook
fb303	gen-cpp-fb/FacebookService.cpp	/^namespace facebook { namespace fb303 {$/;"	n	namespace:facebook	file:
fb303	gen-cpp-fb/FacebookService.h	/^namespace facebook { namespace fb303 {$/;"	n	namespace:facebook
fb303	gen-cpp-fb/facebooktest_constants.cpp	/^namespace facebook { namespace fb303 {$/;"	n	namespace:facebook	file:
fb303	gen-cpp-fb/facebooktest_constants.h	/^namespace facebook { namespace fb303 {$/;"	n	namespace:facebook
fb303	gen-cpp-fb/facebooktest_types.cpp	/^namespace facebook { namespace fb303 {$/;"	n	namespace:facebook	file:
fb303	gen-cpp-fb/facebooktest_types.h	/^namespace facebook { namespace fb303 {$/;"	n	namespace:facebook
fb_status	gen-cpp-fb-s/facebooktest_types.h	/^struct fb_status {$/;"	s	namespace:facebook::fb303
fb_status	gen-cpp-fb/facebooktest_types.h	/^struct fb_status {$/;"	s	namespace:facebook::fb303
fd	windows/WinFcntl.h	/^  THRIFT_SOCKET fd;$/;"	m	struct:thrift_pollfd
fd_	transport/TFDTransport.h	/^  int fd_;$/;"	m	class:apache::thrift::transport::TFDTransport
fd_	transport/TFileTransport.h	/^  int fd_;$/;"	m	class:apache::thrift::transport::TFileTransport
fieldId	protocol/TCompactProtocol.h	/^    int16_t fieldId;$/;"	m	struct:apache::thrift::protocol::TCompactProtocolT::__anon2
fieldType	protocol/TCompactProtocol.h	/^    TType fieldType;$/;"	m	struct:apache::thrift::protocol::TCompactProtocolT::__anon2
fieldTypeName	protocol/TDebugProtocol.cpp	/^string TDebugProtocol::fieldTypeName(TType type) {$/;"	f	class:apache::thrift::protocol::TDebugProtocol
filename_	transport/TFileTransport.h	/^  std::string filename_;$/;"	m	class:apache::thrift::transport::TFileTransport
finish	async/TAsyncProtocolProcessor.cpp	/^\/* static *\/ void TAsyncProtocolProcessor::finish($/;"	f	class:apache::thrift::async::TAsyncProtocolProcessor
finish	async/TEvhttpClientChannel.cpp	/^void TEvhttpClientChannel::finish(struct evhttp_request* req) {$/;"	f	class:apache::thrift::async::TEvhttpClientChannel
finish	qt/TQTcpServer.cpp	/^void TQTcpServer::finish(shared_ptr<ConnectionContext> ctx, bool healthy) {$/;"	f	class:apache::thrift::async::TQTcpServer
finish	transport/TZlibTransport.cpp	/^void TZlibTransport::finish() {$/;"	f	class:apache::thrift::transport::TZlibTransport
first_	protocol/TJSONProtocol.cpp	/^  bool first_;$/;"	m	class:apache::thrift::protocol::JSONListContext	file:
first_	protocol/TJSONProtocol.cpp	/^  bool first_;$/;"	m	class:apache::thrift::protocol::JSONPairContext	file:
flags_	windows/TWinsockSingleton.cpp	/^boost::once_flag TWinsockSingleton::flags_ = BOOST_ONCE_INIT;$/;"	m	class:apache::thrift::transport::TWinsockSingleton	file:
flags_	windows/TWinsockSingleton.cpp	/^std::once_flag TWinsockSingleton::flags_;$/;"	m	class:apache::thrift::transport::TWinsockSingleton	file:
flags_	windows/TWinsockSingleton.h	/^  static boost::once_flag flags_;$/;"	m	class:apache::thrift::transport::TWinsockSingleton
flags_	windows/TWinsockSingleton.h	/^  static std::once_flag flags_;$/;"	m	class:apache::thrift::transport::TWinsockSingleton
flush	qt/TQIODeviceTransport.cpp	/^void TQIODeviceTransport::flush() {$/;"	f	class:apache::thrift::transport::TQIODeviceTransport
flush	transport/TBufferTransports.cpp	/^void TBufferedTransport::flush() {$/;"	f	class:apache::thrift::transport::TBufferedTransport
flush	transport/TBufferTransports.cpp	/^void TFramedTransport::flush() {$/;"	f	class:apache::thrift::transport::TFramedTransport
flush	transport/TFileTransport.cpp	/^void TFileTransport::flush() {$/;"	f	class:apache::thrift::transport::TFileTransport
flush	transport/THttpClient.cpp	/^void THttpClient::flush() {$/;"	f	class:apache::thrift::transport::THttpClient
flush	transport/THttpServer.cpp	/^void THttpServer::flush() {$/;"	f	class:apache::thrift::transport::THttpServer
flush	transport/TSSLSocket.cpp	/^void TSSLSocket::flush() {$/;"	f	class:apache::thrift::transport::TSSLSocket
flush	transport/TShortReadTransport.h	/^  void flush() { transport_->flush(); }$/;"	f	class:apache::thrift::transport::test::TShortReadTransport
flush	transport/TTransport.h	/^  virtual void flush() {$/;"	f	class:apache::thrift::transport::TTransport
flush	transport/TTransportUtils.cpp	/^void TPipedFileReaderTransport::flush() {$/;"	f	class:apache::thrift::transport::TPipedFileReaderTransport
flush	transport/TTransportUtils.cpp	/^void TPipedTransport::flush() {$/;"	f	class:apache::thrift::transport::TPipedTransport
flush	transport/TZlibTransport.cpp	/^void TZlibTransport::flush() {$/;"	f	class:apache::thrift::transport::TZlibTransport
flushMaxBytes_	transport/TFileTransport.h	/^  uint32_t flushMaxBytes_;$/;"	m	class:apache::thrift::transport::TFileTransport
flushMaxUs_	transport/TFileTransport.h	/^  uint32_t flushMaxUs_;$/;"	m	class:apache::thrift::transport::TFileTransport
flushToTransport	transport/TZlibTransport.cpp	/^void TZlibTransport::flushToTransport(int flush) {$/;"	f	class:apache::thrift::transport::TZlibTransport
flushToZlib	transport/TZlibTransport.cpp	/^void TZlibTransport::flushToZlib(const uint8_t* buf, int len, int flush) {$/;"	f	class:apache::thrift::transport::TZlibTransport
flushed_	transport/TFileTransport.h	/^  Monitor flushed_;$/;"	m	class:apache::thrift::transport::TFileTransport
fnamePending_	async/TConcurrentClientSyncInfo.h	/^  std::string fnamePending_;$/;"	m	class:apache::thrift::async::TConcurrentClientSyncInfo
forceClose	server/TNonblockingServer.cpp	/^  void forceClose() {$/;"	f	class:apache::thrift::server::TNonblockingServer::TConnection
forceFlush_	transport/TFileTransport.h	/^  volatile bool forceFlush_;$/;"	m	class:apache::thrift::transport::TFileTransport
freeContext	TProcessor.h	/^  virtual void freeContext(void* ctx, const char* fn_name) {$/;"	f	class:apache::thrift::TProcessorEventHandler
freeMonitors_	async/TConcurrentClientSyncInfo.h	/^  std::vector<MonitorPtr> freeMonitors_;$/;"	m	class:apache::thrift::async::TConcurrentClientSyncInfo
frequency_	processor/StatsProcessor.h	/^  bool frequency_;$/;"	m	class:apache::thrift::processor::StatsProcessor
frequency_map_	processor/StatsProcessor.h	/^  std::map<std::string, int64_t> frequency_map_;$/;"	m	class:apache::thrift::processor::StatsProcessor
fromWire16	protocol/TProtocol.h	/^  static uint16_t fromWire16(uint16_t x) {return THRIFT_letohs(x);}$/;"	f	struct:apache::thrift::protocol::TNetworkLittleEndian
fromWire16	protocol/TProtocol.h	/^  static uint16_t fromWire16(uint16_t x) {return ntohs(x);}$/;"	f	struct:apache::thrift::protocol::TNetworkBigEndian
fromWire32	protocol/TProtocol.h	/^  static uint32_t fromWire32(uint32_t x) {return THRIFT_letohl(x);}$/;"	f	struct:apache::thrift::protocol::TNetworkLittleEndian
fromWire32	protocol/TProtocol.h	/^  static uint32_t fromWire32(uint32_t x) {return ntohl(x);}$/;"	f	struct:apache::thrift::protocol::TNetworkBigEndian
fromWire64	protocol/TProtocol.h	/^  static uint64_t fromWire64(uint64_t x) {return THRIFT_letohll(x);}$/;"	f	struct:apache::thrift::protocol::TNetworkLittleEndian
fromWire64	protocol/TProtocol.h	/^  static uint64_t fromWire64(uint64_t x) {return THRIFT_ntohll(x);}$/;"	f	struct:apache::thrift::protocol::TNetworkBigEndian
fullProb_	transport/TShortReadTransport.h	/^  double fullProb_;$/;"	m	class:apache::thrift::transport::test::TShortReadTransport
func_	concurrency/FunctionRunner.h	/^  VoidFunc func_;$/;"	m	class:apache::thrift::concurrency::FunctionRunner
g	concurrency/Monitor.h	/^  Guard g;$/;"	m	class:apache::thrift::concurrency::Synchronized
g_facebooktest_constants	gen-cpp-fb-s/facebooktest_constants.cpp	/^const facebooktestConstants g_facebooktest_constants;$/;"	m	namespace:facebook::fb303	file:
g_facebooktest_constants	gen-cpp-fb/facebooktest_constants.cpp	/^const facebooktestConstants g_facebooktest_constants;$/;"	m	namespace:facebook::fb303	file:
generateSeqId	async/TConcurrentClientSyncInfo.cpp	/^int32_t TConcurrentClientSyncInfo::generateSeqId()$/;"	f	class:apache::thrift::async::TConcurrentClientSyncInfo
generic_calls	VirtualProfiling.cpp	/^BacktraceMap generic_calls;$/;"	m	namespace:apache::thrift	file:
generic_calls_mutex	VirtualProfiling.cpp	/^Mutex generic_calls_mutex;$/;"	m	namespace:apache::thrift	file:
get	transport/TSSLSocket.h	/^  SSL_CTX* get() { return ctx_; }$/;"	f	class:apache::thrift::transport::SSLContext
getAnonymous	transport/TPipeServer.cpp	/^bool TPipeServer::getAnonymous() {$/;"	f	class:apache::thrift::transport::TPipeServer
getAsyncServer	async/TAsyncProcessor.h	/^  const TEventServer* getAsyncServer() { return asyncServer_; }$/;"	f	class:apache::thrift::async::TAsyncProcessor
getBacktrace	VirtualProfiling.cpp	/^  const Backtrace* getBacktrace() const { return backtrace_; }$/;"	f	class:apache::thrift::Key
getBuffer	transport/TBufferTransports.h	/^  void getBuffer(uint8_t** bufPtr, uint32_t* sz) {$/;"	f	class:apache::thrift::transport::TMemoryBuffer
getBufferAsString	transport/TBufferTransports.h	/^  std::string getBufferAsString() {$/;"	f	class:apache::thrift::transport::TMemoryBuffer
getBufferSize	transport/TPipeServer.cpp	/^int TPipeServer::getBufferSize() {$/;"	f	class:apache::thrift::transport::TPipeServer
getCachedAddress	transport/TSocket.cpp	/^sockaddr* TSocket::getCachedAddress(socklen_t* len) const {$/;"	f	class:apache::thrift::transport::TSocket
getChunkSize	transport/TFileTransport.h	/^  uint32_t getChunkSize() { return chunkSize_; }$/;"	f	class:apache::thrift::transport::TFileTransport
getClientRdPipeHandle	transport/TPipeServer.cpp	/^  virtual HANDLE getClientRdPipeHandle() { return ClientAnonRead_.h; }$/;"	f	class:apache::thrift::transport::TAnonPipeServer
getClientRdPipeHandle	transport/TPipeServer.cpp	/^  virtual HANDLE getClientRdPipeHandle() { return INVALID_HANDLE_VALUE; }$/;"	f	class:apache::thrift::transport::TNamedPipeServer
getClientRdPipeHandle	transport/TPipeServer.cpp	/^HANDLE TPipeServer::getClientRdPipeHandle() {$/;"	f	class:apache::thrift::transport::TPipeServer
getClientWrtPipeHandle	transport/TPipeServer.cpp	/^  virtual HANDLE getClientWrtPipeHandle() { return ClientAnonWrite_.h; }$/;"	f	class:apache::thrift::transport::TAnonPipeServer
getClientWrtPipeHandle	transport/TPipeServer.cpp	/^  virtual HANDLE getClientWrtPipeHandle() { return INVALID_HANDLE_VALUE; }$/;"	f	class:apache::thrift::transport::TNamedPipeServer
getClientWrtPipeHandle	transport/TPipeServer.cpp	/^HANDLE TPipeServer::getClientWrtPipeHandle() {$/;"	f	class:apache::thrift::transport::TPipeServer
getCompactType	protocol/TCompactProtocol.tcc	/^int8_t TCompactProtocolT<Transport_>::getCompactType(const TType ttype) {$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
getConcurrentClientCount	server/TServerFramework.cpp	/^int64_t TServerFramework::getConcurrentClientCount() const {$/;"	f	class:apache::thrift::server::TServerFramework
getConcurrentClientCountHWM	server/TServerFramework.cpp	/^int64_t TServerFramework::getConcurrentClientCountHWM() const {$/;"	f	class:apache::thrift::server::TServerFramework
getConcurrentClientLimit	server/TServerFramework.cpp	/^int64_t TServerFramework::getConcurrentClientLimit() const {$/;"	f	class:apache::thrift::server::TServerFramework
getConnTimeout	transport/TPipe.cpp	/^long TPipe::getConnTimeout() {$/;"	f	class:apache::thrift::transport::TPipe
getConnectionContext	server/TNonblockingServer.cpp	/^  void* getConnectionContext() { return connectionContext_; }$/;"	f	class:apache::thrift::server::TNonblockingServer::TConnection
getConnectionStackLimit	server/TNonblockingServer.h	/^  size_t getConnectionStackLimit() const { return connectionStackLimit_; }$/;"	f	class:apache::thrift::server::TNonblockingServer
getContext	TProcessor.h	/^  virtual void* getContext(const char* fn_name, void* serverContext) {$/;"	f	class:apache::thrift::TProcessorEventHandler
getCounter	gen-cpp-fb/FacebookService.cpp	/^int64_t FacebookServiceClient::getCounter(const std::string& key)$/;"	f	class:facebook::fb303::FacebookServiceClient
getCounter	gen-cpp-fb/FacebookService.cpp	/^int64_t FacebookServiceConcurrentClient::getCounter(const std::string& key)$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
getCounter	gen-cpp-fb/FacebookService.h	/^  int64_t getCounter(const std::string& \/* key *\/) {$/;"	f	class:facebook::fb303::FacebookServiceNull
getCounter	gen-cpp-fb/FacebookService.h	/^  int64_t getCounter(const std::string& key) {$/;"	f	class:facebook::fb303::FacebookServiceMultiface
getCounter	gen-cpp-fb/FacebookService_server.skeleton.cpp	/^  int64_t getCounter(const std::string& key) {$/;"	f	class:FacebookServiceHandler
getCounters	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceClient::getCounters(std::map<std::string, int64_t> & _return)$/;"	f	class:facebook::fb303::FacebookServiceClient
getCounters	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceConcurrentClient::getCounters(std::map<std::string, int64_t> & _return)$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
getCounters	gen-cpp-fb/FacebookService.h	/^  void getCounters(std::map<std::string, int64_t> & \/* _return *\/) {$/;"	f	class:facebook::fb303::FacebookServiceNull
getCounters	gen-cpp-fb/FacebookService.h	/^  void getCounters(std::map<std::string, int64_t> & _return) {$/;"	f	class:facebook::fb303::FacebookServiceMultiface
getCounters	gen-cpp-fb/FacebookService_server.skeleton.cpp	/^  void getCounters(std::map<std::string, int64_t> & _return) {$/;"	f	class:FacebookServiceHandler
getCpuProfile	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceClient::getCpuProfile(std::string& _return, const int32_t profileDurationInSec)$/;"	f	class:facebook::fb303::FacebookServiceClient
getCpuProfile	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceConcurrentClient::getCpuProfile(std::string& _return, const int32_t profileDurationInSec)$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
getCpuProfile	gen-cpp-fb/FacebookService.h	/^  void getCpuProfile(std::string& \/* _return *\/, const int32_t \/* profileDurationInSec *\/) {$/;"	f	class:facebook::fb303::FacebookServiceNull
getCpuProfile	gen-cpp-fb/FacebookService.h	/^  void getCpuProfile(std::string& _return, const int32_t profileDurationInSec) {$/;"	f	class:facebook::fb303::FacebookServiceMultiface
getCpuProfile	gen-cpp-fb/FacebookService_server.skeleton.cpp	/^  void getCpuProfile(std::string& _return, const int32_t profileDurationInSec) {$/;"	f	class:FacebookServiceHandler
getCurChunk	transport/TFileTransport.cpp	/^uint32_t TFileTransport::getCurChunk() {$/;"	f	class:apache::thrift::transport::TFileTransport
getCurChunk	transport/TTransportUtils.cpp	/^uint32_t TPipedFileReaderTransport::getCurChunk() {$/;"	f	class:apache::thrift::transport::TPipedFileReaderTransport
getCurrentThreadId	concurrency/BoostThreadFactory.cpp	/^  Thread::id_t getCurrentThreadId() const { return boost::this_thread::get_id(); }$/;"	f	class:apache::thrift::concurrency::BoostThreadFactory::Impl
getCurrentThreadId	concurrency/BoostThreadFactory.cpp	/^Thread::id_t BoostThreadFactory::getCurrentThreadId() const {$/;"	f	class:apache::thrift::concurrency::BoostThreadFactory
getCurrentThreadId	concurrency/PosixThreadFactory.cpp	/^  Thread::id_t getCurrentThreadId() const {$/;"	f	class:apache::thrift::concurrency::PosixThreadFactory::Impl
getCurrentThreadId	concurrency/PosixThreadFactory.cpp	/^Thread::id_t PosixThreadFactory::getCurrentThreadId() const {$/;"	f	class:apache::thrift::concurrency::PosixThreadFactory
getCurrentThreadId	concurrency/StdThreadFactory.cpp	/^  Thread::id_t getCurrentThreadId() const { return std::this_thread::get_id(); }$/;"	f	class:apache::thrift::concurrency::StdThreadFactory::Impl
getCurrentThreadId	concurrency/StdThreadFactory.cpp	/^Thread::id_t StdThreadFactory::getCurrentThreadId() const {$/;"	f	class:apache::thrift::concurrency::StdThreadFactory
getDepth	VirtualProfiling.cpp	/^  int getDepth() const { return numCallers_ - skip_; }$/;"	f	class:apache::thrift::Backtrace
getEofSleepTimeUs	transport/TFileTransport.h	/^  uint32_t getEofSleepTimeUs() { return eofSleepTime_; }$/;"	f	class:apache::thrift::transport::TFileTransport
getEventBase	async/TEvhttpServer.cpp	/^struct event_base* TEvhttpServer::getEventBase() {$/;"	f	class:apache::thrift::async::TEvhttpServer
getEventBase	server/TNonblockingServer.h	/^  event_base* getEventBase() const { return eventBase_; }$/;"	f	class:apache::thrift::server::TNonblockingIOThread
getEventBufferSize	transport/TFileTransport.h	/^  uint32_t getEventBufferSize() { return eventBufferSize_; }$/;"	f	class:apache::thrift::transport::TFileTransport
getEventHandler	TProcessor.h	/^  boost::shared_ptr<TProcessorEventHandler> getEventHandler() { return eventHandler_; }$/;"	f	class:apache::thrift::TProcessor
getEventHandler	async/TAsyncProcessor.h	/^  boost::shared_ptr<TProcessorEventHandler> getEventHandler() { return eventHandler_; }$/;"	f	class:apache::thrift::async::TAsyncProcessor
getEventHandler	server/TServer.h	/^  boost::shared_ptr<TServerEventHandler> getEventHandler() { return eventHandler_; }$/;"	f	class:apache::thrift::server::TServer
getEventSize	transport/TFileTransport.h	/^  inline uint32_t getEventSize() {$/;"	f	struct:apache::thrift::transport::readState
getExpireTime	concurrency/ThreadManager.cpp	/^  int64_t getExpireTime() const { return expireTime_; }$/;"	f	class:apache::thrift::concurrency::ThreadManager::Task
getFD	transport/TFDTransport.h	/^  int getFD() { return fd_; }$/;"	f	class:apache::thrift::transport::TFDTransport
getFileReaderTransport	transport/TTransportUtils.h	/^  boost::shared_ptr<TFileReaderTransport> getFileReaderTransport($/;"	f	class:apache::thrift::transport::TPipedFileReaderTransportFactory
getFlushMaxBytes	transport/TFileTransport.h	/^  uint32_t getFlushMaxBytes() { return flushMaxBytes_; }$/;"	f	class:apache::thrift::transport::TFileTransport
getFlushMaxUs	transport/TFileTransport.h	/^  uint32_t getFlushMaxUs() { return flushMaxUs_; }$/;"	f	class:apache::thrift::transport::TFileTransport
getFrame	VirtualProfiling.cpp	/^  void* getFrame(int index) const {$/;"	f	class:apache::thrift::Backtrace
getHandler	gen-cpp-fb-s/FacebookService.h	/^  virtual FacebookServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {$/;"	f	class:facebook::fb303::FacebookServiceIfSingletonFactory
getHandler	gen-cpp-fb/FacebookService.h	/^  virtual FacebookServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {$/;"	f	class:facebook::fb303::FacebookServiceIfSingletonFactory
getHost	transport/TSocket.cpp	/^std::string TSocket::getHost() {$/;"	f	class:apache::thrift::transport::TSocket
getIOThreadNumber	server/TNonblockingServer.cpp	/^  int getIOThreadNumber() const { return ioThread_->getThreadNumber(); }$/;"	f	class:apache::thrift::server::TNonblockingServer::TConnection
getId	concurrency/BoostThreadFactory.cpp	/^  Thread::id_t getId() { return thread_.get() ? thread_->get_id() : boost::thread::id(); }$/;"	f	class:apache::thrift::concurrency::BoostThread
getId	concurrency/PosixThreadFactory.cpp	/^  Thread::id_t getId() {$/;"	f	class:apache::thrift::concurrency::PthreadThread
getId	concurrency/StdThreadFactory.cpp	/^  Thread::id_t getId() { return thread_.get() ? thread_->get_id() : std::thread::id(); }$/;"	f	class:apache::thrift::concurrency::StdThread
getIdleBufferMemLimit	server/TNonblockingServer.h	/^  size_t getIdleBufferMemLimit() const { return idleReadBufferLimit_; }$/;"	f	class:apache::thrift::server::TNonblockingServer
getIdleReadBufferLimit	server/TNonblockingServer.h	/^  size_t getIdleReadBufferLimit() const { return idleReadBufferLimit_; }$/;"	f	class:apache::thrift::server::TNonblockingServer
getIdleWriteBufferLimit	server/TNonblockingServer.h	/^  size_t getIdleWriteBufferLimit() const { return idleWriteBufferLimit_; }$/;"	f	class:apache::thrift::server::TNonblockingServer
getInputProtocol	gen-cpp-fb-s/FacebookService.h	/^  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {$/;"	f	class:facebook::fb303::FacebookServiceClient
getInputProtocol	gen-cpp-fb-s/FacebookService.h	/^  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
getInputProtocol	gen-cpp-fb/FacebookService.h	/^  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {$/;"	f	class:facebook::fb303::FacebookServiceClient
getInputProtocol	gen-cpp-fb/FacebookService.h	/^  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
getInputProtocolFactory	server/TServer.h	/^  boost::shared_ptr<TProtocolFactory> getInputProtocolFactory() { return inputProtocolFactory_; }$/;"	f	class:apache::thrift::server::TServer
getInputTransport	protocol/TProtocol.h	/^  inline boost::shared_ptr<TTransport> getInputTransport() { return ptrans_; }$/;"	f	class:apache::thrift::protocol::TProtocol
getInputTransportFactory	server/TServer.h	/^  boost::shared_ptr<TTransportFactory> getInputTransportFactory() { return inputTransportFactory_; }$/;"	f	class:apache::thrift::server::TServer
getListenPort	server/TNonblockingServer.h	/^  int getListenPort() { return listenPort_; }$/;"	f	class:apache::thrift::server::TNonblockingServer
getMaxActiveProcessors	server/TNonblockingServer.h	/^  size_t getMaxActiveProcessors() const { return maxActiveProcessors_; }$/;"	f	class:apache::thrift::server::TNonblockingServer
getMaxConnections	server/TNonblockingServer.h	/^  size_t getMaxConnections() const { return maxConnections_; }$/;"	f	class:apache::thrift::server::TNonblockingServer
getMaxCorruptedEvents	transport/TFileTransport.h	/^  uint32_t getMaxCorruptedEvents() { return maxCorruptedEvents_; }$/;"	f	class:apache::thrift::transport::TFileTransport
getMaxEventSize	transport/TFileTransport.h	/^  uint32_t getMaxEventSize() { return maxEventSize_; }$/;"	f	class:apache::thrift::transport::TFileTransport
getMaxFrameSize	server/TNonblockingServer.h	/^  size_t getMaxFrameSize() const { return maxFrameSize_; }$/;"	f	class:apache::thrift::server::TNonblockingServer
getMaxFrameSize	transport/TBufferTransports.h	/^  uint32_t getMaxFrameSize() { return maxFrameSize_; }$/;"	f	class:apache::thrift::transport::TFramedTransport
getName	gen-cpp-fb-s/FacebookService.cpp	/^void FacebookServiceClient::getName(std::string& _return)$/;"	f	class:facebook::fb303::FacebookServiceClient
getName	gen-cpp-fb-s/FacebookService.cpp	/^void FacebookServiceConcurrentClient::getName(std::string& _return)$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
getName	gen-cpp-fb-s/FacebookService.h	/^  void getName(std::string& \/* _return *\/) {$/;"	f	class:facebook::fb303::FacebookServiceNull
getName	gen-cpp-fb-s/FacebookService.h	/^  void getName(std::string& _return) {$/;"	f	class:facebook::fb303::FacebookServiceMultiface
getName	gen-cpp-fb-s/FacebookService_server.skeleton.cpp	/^  void getName(std::string& _return) {$/;"	f	class:FacebookServiceHandler
getName	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceClient::getName(std::string& _return)$/;"	f	class:facebook::fb303::FacebookServiceClient
getName	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceConcurrentClient::getName(std::string& _return)$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
getName	gen-cpp-fb/FacebookService.h	/^  void getName(std::string& \/* _return *\/) {$/;"	f	class:facebook::fb303::FacebookServiceNull
getName	gen-cpp-fb/FacebookService.h	/^  void getName(std::string& _return) {$/;"	f	class:facebook::fb303::FacebookServiceMultiface
getName	gen-cpp-fb/FacebookService_server.skeleton.cpp	/^  void getName(std::string& _return) {$/;"	f	class:FacebookServiceHandler
getNativeWaitHandle	transport/TPipe.cpp	/^  virtual HANDLE getNativeWaitHandle() { return INVALID_HANDLE_VALUE; }$/;"	f	class:apache::thrift::transport::TPipeImpl
getNativeWaitHandle	transport/TPipe.cpp	/^  virtual HANDLE getNativeWaitHandle() { return ready_event_.h; }$/;"	f	class:apache::thrift::transport::TWaitableNamedPipeImpl
getNativeWaitHandle	transport/TPipe.cpp	/^HANDLE TPipe::getNativeWaitHandle() {$/;"	f	class:apache::thrift::transport::TPipe
getNativeWaitHandle	transport/TPipeServer.cpp	/^  virtual HANDLE getNativeWaitHandle() { return NULL; }$/;"	f	class:apache::thrift::transport::TPipeServerImpl
getNativeWaitHandle	transport/TPipeServer.cpp	/^  virtual HANDLE getNativeWaitHandle() { return listen_event_.h; }$/;"	f	class:apache::thrift::transport::TNamedPipeServer
getNativeWaitHandle	transport/TPipeServer.cpp	/^HANDLE TPipeServer::getNativeWaitHandle() {$/;"	f	class:apache::thrift::transport::TPipeServer
getNext	transport/TFileTransport.cpp	/^eventInfo* TFileTransportBuffer::getNext() {$/;"	f	class:apache::thrift::transport::TFileTransportBuffer
getNextFlushTime	transport/TFileTransport.cpp	/^void TFileTransport::getNextFlushTime(struct timeval* ts_next_flush) {$/;"	f	class:apache::thrift::transport::TFileTransport
getNotificationRecvFD	server/TNonblockingServer.h	/^  evutil_socket_t getNotificationRecvFD() const { return notificationPipeFDs_[0]; }$/;"	f	class:apache::thrift::server::TNonblockingIOThread
getNotificationSendFD	server/TNonblockingServer.h	/^  evutil_socket_t getNotificationSendFD() const { return notificationPipeFDs_[1]; }$/;"	f	class:apache::thrift::server::TNonblockingIOThread
getNumActiveConnections	server/TNonblockingServer.h	/^  size_t getNumActiveConnections() const { return getNumConnections() - getNumIdleConnections(); }$/;"	f	class:apache::thrift::server::TNonblockingServer
getNumActiveProcessors	server/TNonblockingServer.h	/^  size_t getNumActiveProcessors() const { return numActiveProcessors_; }$/;"	f	class:apache::thrift::server::TNonblockingServer
getNumChunks	transport/TFileTransport.cpp	/^uint32_t TFileTransport::getNumChunks() {$/;"	f	class:apache::thrift::transport::TFileTransport
getNumChunks	transport/TTransportUtils.cpp	/^uint32_t TPipedFileReaderTransport::getNumChunks() {$/;"	f	class:apache::thrift::transport::TPipedFileReaderTransport
getNumConnections	server/TNonblockingServer.h	/^  size_t getNumConnections() const { return numTConnections_; }$/;"	f	class:apache::thrift::server::TNonblockingServer
getNumIOThreads	server/TNonblockingServer.h	/^  size_t getNumIOThreads() const { return numIOThreads_; }$/;"	f	class:apache::thrift::server::TNonblockingServer
getNumIdleConnections	server/TNonblockingServer.h	/^  size_t getNumIdleConnections() const { return connectionStack_.size(); }$/;"	f	class:apache::thrift::server::TNonblockingServer
getOption	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceClient::getOption(std::string& _return, const std::string& key)$/;"	f	class:facebook::fb303::FacebookServiceClient
getOption	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceConcurrentClient::getOption(std::string& _return, const std::string& key)$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
getOption	gen-cpp-fb/FacebookService.h	/^  void getOption(std::string& \/* _return *\/, const std::string& \/* key *\/) {$/;"	f	class:facebook::fb303::FacebookServiceNull
getOption	gen-cpp-fb/FacebookService.h	/^  void getOption(std::string& _return, const std::string& key) {$/;"	f	class:facebook::fb303::FacebookServiceMultiface
getOption	gen-cpp-fb/FacebookService_server.skeleton.cpp	/^  void getOption(std::string& _return, const std::string& key) {$/;"	f	class:FacebookServiceHandler
getOptions	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceClient::getOptions(std::map<std::string, std::string> & _return)$/;"	f	class:facebook::fb303::FacebookServiceClient
getOptions	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceConcurrentClient::getOptions(std::map<std::string, std::string> & _return)$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
getOptions	gen-cpp-fb/FacebookService.h	/^  void getOptions(std::map<std::string, std::string> & \/* _return *\/) {$/;"	f	class:facebook::fb303::FacebookServiceNull
getOptions	gen-cpp-fb/FacebookService.h	/^  void getOptions(std::map<std::string, std::string> & _return) {$/;"	f	class:facebook::fb303::FacebookServiceMultiface
getOptions	gen-cpp-fb/FacebookService_server.skeleton.cpp	/^  void getOptions(std::map<std::string, std::string> & _return) {$/;"	f	class:FacebookServiceHandler
getOrigin	transport/TBufferTransports.h	/^  virtual const std::string getOrigin() { return transport_->getOrigin(); }$/;"	f	class:apache::thrift::transport::TBufferedTransport
getOrigin	transport/TBufferTransports.h	/^  virtual const std::string getOrigin() { return transport_->getOrigin(); }$/;"	f	class:apache::thrift::transport::TFramedTransport
getOrigin	transport/THttpTransport.cpp	/^const std::string THttpTransport::getOrigin() {$/;"	f	class:apache::thrift::transport::THttpTransport
getOrigin	transport/TSocket.cpp	/^const std::string TSocket::getOrigin() {$/;"	f	class:apache::thrift::transport::TSocket
getOrigin	transport/TTransport.h	/^  virtual const std::string getOrigin() { return "Unknown"; }$/;"	f	class:apache::thrift::transport::TTransport
getOutputProtocol	gen-cpp-fb-s/FacebookService.h	/^  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {$/;"	f	class:facebook::fb303::FacebookServiceClient
getOutputProtocol	gen-cpp-fb-s/FacebookService.h	/^  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
getOutputProtocol	gen-cpp-fb/FacebookService.h	/^  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {$/;"	f	class:facebook::fb303::FacebookServiceClient
getOutputProtocol	gen-cpp-fb/FacebookService.h	/^  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
getOutputProtocolFactory	server/TServer.h	/^  boost::shared_ptr<TProtocolFactory> getOutputProtocolFactory() { return outputProtocolFactory_; }$/;"	f	class:apache::thrift::server::TServer
getOutputTransport	protocol/TProtocol.h	/^  inline boost::shared_ptr<TTransport> getOutputTransport() { return ptrans_; }$/;"	f	class:apache::thrift::protocol::TProtocol
getOutputTransportFactory	server/TServer.h	/^  boost::shared_ptr<TTransportFactory> getOutputTransportFactory() {$/;"	f	class:apache::thrift::server::TServer
getOverloadAction	server/TNonblockingServer.h	/^  TOverloadAction getOverloadAction() const { return overloadAction_; }$/;"	f	class:apache::thrift::server::TNonblockingServer
getOverloadHysteresis	server/TNonblockingServer.h	/^  double getOverloadHysteresis() const { return overloadHysteresis_; }$/;"	f	class:apache::thrift::server::TNonblockingServer
getPassword	transport/TSSLSocket.h	/^  virtual void getPassword(std::string& \/* password *\/, int \/* size *\/) {}$/;"	f	class:apache::thrift::transport::TSSLSocketFactory
getPeerAddress	transport/TSocket.cpp	/^std::string TSocket::getPeerAddress() {$/;"	f	class:apache::thrift::transport::TSocket
getPeerHost	transport/TSocket.cpp	/^std::string TSocket::getPeerHost() {$/;"	f	class:apache::thrift::transport::TSocket
getPeerPort	transport/TSocket.cpp	/^int TSocket::getPeerPort() {$/;"	f	class:apache::thrift::transport::TSocket
getPending	async/TConcurrentClientSyncInfo.cpp	/^bool TConcurrentClientSyncInfo::getPending($/;"	f	class:apache::thrift::async::TConcurrentClientSyncInfo
getPipeHandle	transport/TPipe.cpp	/^  virtual HANDLE getPipeHandle() { return PipeRd_.h; }$/;"	f	class:apache::thrift::transport::TAnonPipeImpl
getPipeHandle	transport/TPipe.cpp	/^  virtual HANDLE getPipeHandle() { return Pipe_.h; }$/;"	f	class:apache::thrift::transport::TNamedPipeImpl
getPipeHandle	transport/TPipe.cpp	/^  virtual HANDLE getPipeHandle() { return Pipe_.h; }$/;"	f	class:apache::thrift::transport::TWaitableNamedPipeImpl
getPipeHandle	transport/TPipe.cpp	/^HANDLE TPipe::getPipeHandle() {$/;"	f	class:apache::thrift::transport::TPipe
getPipeHandle	transport/TPipeServer.cpp	/^  virtual HANDLE getPipeHandle() { return PipeR_.h; }$/;"	f	class:apache::thrift::transport::TAnonPipeServer
getPipeHandle	transport/TPipeServer.cpp	/^  virtual HANDLE getPipeHandle() { return Pipe_.h; }$/;"	f	class:apache::thrift::transport::TNamedPipeServer
getPipeHandle	transport/TPipeServer.cpp	/^HANDLE TPipeServer::getPipeHandle() {$/;"	f	class:apache::thrift::transport::TPipeServer
getPipedTransport	processor/PeekProcessor.cpp	/^boost::shared_ptr<TTransport> PeekProcessor::getPipedTransport(boost::shared_ptr<TTransport> in) {$/;"	f	class:apache::thrift::processor::PeekProcessor
getPipename	transport/TPipe.cpp	/^string TPipe::getPipename() {$/;"	f	class:apache::thrift::transport::TPipe
getPipename	transport/TPipeServer.cpp	/^string TPipeServer::getPipename() {$/;"	f	class:apache::thrift::transport::TPipeServer
getPort	transport/TServerSocket.cpp	/^int TServerSocket::getPort() {$/;"	f	class:apache::thrift::transport::TServerSocket
getPort	transport/TSocket.cpp	/^int TSocket::getPort() {$/;"	f	class:apache::thrift::transport::TSocket
getPriority	concurrency/PosixThreadFactory.cpp	/^  PRIORITY getPriority() const { return priority_; }$/;"	f	class:apache::thrift::concurrency::PosixThreadFactory::Impl
getPriority	concurrency/PosixThreadFactory.cpp	/^PosixThreadFactory::PRIORITY PosixThreadFactory::getPriority() const {$/;"	f	class:apache::thrift::concurrency::PosixThreadFactory
getProcessor	TProcessor.h	/^  boost::shared_ptr<TProcessor> getProcessor(const TConnectionInfo&) { return processor_; }$/;"	f	class:apache::thrift::TSingletonProcessorFactory
getProcessor	gen-cpp-fb-s/FacebookService.cpp	/^::boost::shared_ptr< ::apache::thrift::TProcessor > FacebookServiceProcessorFactory::getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) {$/;"	f	class:facebook::fb303::FacebookServiceProcessorFactory
getProcessor	gen-cpp-fb/FacebookService.cpp	/^::boost::shared_ptr< ::apache::thrift::TProcessor > FacebookServiceProcessorFactory::getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) {$/;"	f	class:facebook::fb303::FacebookServiceProcessorFactory
getProcessor	server/TServer.h	/^  boost::shared_ptr<TProcessor> getProcessor(boost::shared_ptr<TProtocol> inputProtocol,$/;"	f	class:apache::thrift::server::TServer
getProcessorFactory	server/TServer.h	/^  boost::shared_ptr<TProcessorFactory> getProcessorFactory() { return processorFactory_; }$/;"	f	class:apache::thrift::server::TServer
getProtocol	protocol/TBinaryProtocol.h	/^  boost::shared_ptr<TProtocol> getProtocol(boost::shared_ptr<TTransport> trans) {$/;"	f	class:apache::thrift::protocol::TBinaryProtocolFactoryT
getProtocol	protocol/TCompactProtocol.h	/^  boost::shared_ptr<TProtocol> getProtocol(boost::shared_ptr<TTransport> trans) {$/;"	f	class:apache::thrift::protocol::TCompactProtocolFactoryT
getProtocol	protocol/TDebugProtocol.h	/^  boost::shared_ptr<TProtocol> getProtocol(boost::shared_ptr<TTransport> trans) {$/;"	f	class:apache::thrift::protocol::TDebugProtocolFactory
getProtocol	protocol/TJSONProtocol.h	/^  boost::shared_ptr<TProtocol> getProtocol(boost::shared_ptr<TTransport> trans) {$/;"	f	class:apache::thrift::protocol::TJSONProtocolFactory
getReadBuffSize	transport/TFileTransport.h	/^  uint32_t getReadBuffSize() { return readBuffSize_; }$/;"	f	class:apache::thrift::transport::TFileTransport
getReadMutex	async/TConcurrentClientSyncInfo.h	/^  ::apache::thrift::concurrency::Mutex &getReadMutex() {return readMutex_;}$/;"	f	class:apache::thrift::async::TConcurrentClientSyncInfo
getReadTimeout	transport/TFileTransport.h	/^  int32_t getReadTimeout() { return readTimeout_; }$/;"	f	class:apache::thrift::transport::TFileTransport
getReadTimeout	transport/TTransportUtils.cpp	/^int32_t TPipedFileReaderTransport::getReadTimeout() {$/;"	f	class:apache::thrift::transport::TPipedFileReaderTransport
getRecursionLimit	protocol/TProtocol.h	/^  uint32_t getRecursionLimit() const {return recursion_limit_;}$/;"	f	class:apache::thrift::protocol::TProtocol
getResizeBufferEveryN	server/TNonblockingServer.h	/^  int32_t getResizeBufferEveryN() const { return resizeBufferEveryN_; }$/;"	f	class:apache::thrift::server::TNonblockingServer
getRunnable	concurrency/ThreadManager.cpp	/^  shared_ptr<Runnable> getRunnable() { return runnable_; }$/;"	f	class:apache::thrift::concurrency::ThreadManager::Task
getServer	server/TNonblockingServer.cpp	/^  TNonblockingServer* getServer() const { return server_; }$/;"	f	class:apache::thrift::server::TNonblockingServer::TConnection
getServer	server/TNonblockingServer.h	/^  TNonblockingServer* getServer() const { return server_; }$/;"	f	class:apache::thrift::server::TNonblockingIOThread
getServerEventHandler	server/TNonblockingServer.cpp	/^  boost::shared_ptr<TServerEventHandler> getServerEventHandler() { return serverEventHandler_; }$/;"	f	class:apache::thrift::server::TNonblockingServer::TConnection
getServerTransport	server/TServer.h	/^  boost::shared_ptr<TServerTransport> getServerTransport() { return serverTransport_; }$/;"	f	class:apache::thrift::server::TServer
getServers	transport/TSocketPool.cpp	/^void TSocketPool::getServers(vector<shared_ptr<TSocketPoolServer> >& servers) {$/;"	f	class:apache::thrift::transport::TSocketPool
getSocketFD	transport/TSocket.h	/^  THRIFT_SOCKET getSocketFD() { return socket_; }$/;"	f	class:apache::thrift::transport::TSocket
getSocketInfo	transport/TSocket.cpp	/^string TSocket::getSocketInfo() {$/;"	f	class:apache::thrift::transport::TSocket
getStackSize	concurrency/PosixThreadFactory.cpp	/^  int getStackSize() const { return stackSize_; }$/;"	f	class:apache::thrift::concurrency::PosixThreadFactory::Impl
getStackSize	concurrency/PosixThreadFactory.cpp	/^int PosixThreadFactory::getStackSize() const {$/;"	f	class:apache::thrift::concurrency::PosixThreadFactory
getState	server/TNonblockingServer.cpp	/^  TAppState getState() const { return appState_; }$/;"	f	class:apache::thrift::server::TNonblockingServer::TConnection
getStatus	gen-cpp-fb/FacebookService.cpp	/^fb_status::type FacebookServiceClient::getStatus()$/;"	f	class:facebook::fb303::FacebookServiceClient
getStatus	gen-cpp-fb/FacebookService.cpp	/^fb_status::type FacebookServiceConcurrentClient::getStatus()$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
getStatus	gen-cpp-fb/FacebookService.h	/^  fb_status::type getStatus() {$/;"	f	class:facebook::fb303::FacebookServiceMultiface
getStatus	gen-cpp-fb/FacebookService.h	/^  fb_status::type getStatus() {$/;"	f	class:facebook::fb303::FacebookServiceNull
getStatus	gen-cpp-fb/FacebookService_server.skeleton.cpp	/^  fb_status::type getStatus() {$/;"	f	class:FacebookServiceHandler
getStatusDetails	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceClient::getStatusDetails(std::string& _return)$/;"	f	class:facebook::fb303::FacebookServiceClient
getStatusDetails	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceConcurrentClient::getStatusDetails(std::string& _return)$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
getStatusDetails	gen-cpp-fb/FacebookService.h	/^  void getStatusDetails(std::string& \/* _return *\/) {$/;"	f	class:facebook::fb303::FacebookServiceNull
getStatusDetails	gen-cpp-fb/FacebookService.h	/^  void getStatusDetails(std::string& _return) {$/;"	f	class:facebook::fb303::FacebookServiceMultiface
getStatusDetails	gen-cpp-fb/FacebookService_server.skeleton.cpp	/^  void getStatusDetails(std::string& _return) {$/;"	f	class:FacebookServiceHandler
getTConnection	server/TNonblockingServer.cpp	/^  TConnection* getTConnection() { return connection_; }$/;"	f	class:apache::thrift::server::TNonblockingServer::TConnection::Task
getTSocket	server/TNonblockingServer.cpp	/^  boost::shared_ptr<TSocket> getTSocket() const { return tSocket_; }$/;"	f	class:apache::thrift::server::TNonblockingServer::TConnection
getTType	protocol/TCompactProtocol.tcc	/^TType TCompactProtocolT<Transport_>::getTType(int8_t type) {$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
getTargetTransport	transport/TTransportUtils.h	/^  boost::shared_ptr<TTransport> getTargetTransport() { return dstTrans_; }$/;"	f	class:apache::thrift::transport::TPipedTransport
getTaskExpiration	server/TThreadPoolServer.cpp	/^int64_t TThreadPoolServer::getTaskExpiration() const {$/;"	f	class:apache::thrift::server::TThreadPoolServer
getTaskExpireTime	server/TNonblockingServer.h	/^  int64_t getTaskExpireTime() const { return taskExpireTime_; }$/;"	f	class:apache::thrift::server::TNonblockingServer
getThread	server/TNonblockingServer.h	/^  boost::shared_ptr<Thread> getThread() const { return thread_; }$/;"	f	class:apache::thrift::server::TNonblockingIOThread
getThreadId	server/TNonblockingServer.h	/^  Thread::id_t getThreadId() const { return threadId_; }$/;"	f	class:apache::thrift::server::TNonblockingIOThread
getThreadManager	server/TNonblockingServer.h	/^  boost::shared_ptr<ThreadManager> getThreadManager() { return threadManager_; }$/;"	f	class:apache::thrift::server::TNonblockingServer
getThreadManager	server/TThreadPoolServer.cpp	/^boost::shared_ptr<apache::thrift::concurrency::ThreadManager> TThreadPoolServer::getThreadManager()$/;"	f	class:apache::thrift::server::TThreadPoolServer
getThreadNumber	server/TNonblockingServer.h	/^  int getThreadNumber() const { return number_; }$/;"	f	class:apache::thrift::server::TNonblockingIOThread
getTimeRFC1123	transport/THttpServer.cpp	/^std::string THttpServer::getTimeRFC1123() {$/;"	f	class:apache::thrift::transport::THttpServer
getTimeout	server/TThreadPoolServer.cpp	/^int64_t TThreadPoolServer::getTimeout() const {$/;"	f	class:apache::thrift::server::TThreadPoolServer
getTransport	protocol/TProtocol.h	/^  inline boost::shared_ptr<TTransport> getTransport() { return ptrans_; }$/;"	f	class:apache::thrift::protocol::TProtocol
getTransport	transport/TBufferTransports.h	/^  virtual boost::shared_ptr<TTransport> getTransport(boost::shared_ptr<TTransport> trans) {$/;"	f	class:apache::thrift::transport::TBufferedTransportFactory
getTransport	transport/TBufferTransports.h	/^  virtual boost::shared_ptr<TTransport> getTransport(boost::shared_ptr<TTransport> trans) {$/;"	f	class:apache::thrift::transport::TFramedTransportFactory
getTransport	transport/THttpServer.h	/^  virtual boost::shared_ptr<TTransport> getTransport(boost::shared_ptr<TTransport> trans) {$/;"	f	class:apache::thrift::transport::THttpServerTransportFactory
getTransport	transport/TTransport.h	/^  virtual boost::shared_ptr<TTransport> getTransport(boost::shared_ptr<TTransport> trans) {$/;"	f	class:apache::thrift::transport::TTransportFactory
getTransport	transport/TTransportUtils.h	/^  boost::shared_ptr<TTransport> getTransport(boost::shared_ptr<TTransport> srcTrans) {$/;"	f	class:apache::thrift::transport::TPipedFileReaderTransportFactory
getTransport	transport/TTransportUtils.h	/^  virtual boost::shared_ptr<TTransport> getTransport(boost::shared_ptr<TTransport> srcTrans) {$/;"	f	class:apache::thrift::transport::TPipedTransportFactory
getTransport	transport/TZlibTransport.h	/^  virtual boost::shared_ptr<TTransport> getTransport(boost::shared_ptr<TTransport> trans) {$/;"	f	class:apache::thrift::transport::TZlibTransportFactory
getType	TApplicationException.h	/^  TApplicationExceptionType getType() { return type_; }$/;"	f	class:apache::thrift::TApplicationException
getType	protocol/TProtocolException.h	/^  TProtocolExceptionType getType() { return type_; }$/;"	f	class:apache::thrift::protocol::TProtocolException
getType	transport/TTransportException.h	/^  TTransportExceptionType getType() const throw() { return type_; }$/;"	f	class:apache::thrift::transport::TTransportException
getTypeIDForTypeName	protocol/TJSONProtocol.cpp	/^static TType getTypeIDForTypeName(const std::string& name) {$/;"	f	namespace:apache::thrift::protocol
getTypeName	VirtualProfiling.cpp	/^  const char* getTypeName() const { return typeName1_; }$/;"	f	class:apache::thrift::Key
getTypeName2	VirtualProfiling.cpp	/^  const char* getTypeName2() const { return typeName2_; }$/;"	f	class:apache::thrift::Key
getTypeNameForTypeID	protocol/TJSONProtocol.cpp	/^static const std::string& getTypeNameForTypeID(TType typeID) {$/;"	f	namespace:apache::thrift::protocol
getUnderlyingImpl	concurrency/BoostMutex.cpp	/^void* Mutex::getUnderlyingImpl() const {$/;"	f	class:apache::thrift::concurrency::Mutex
getUnderlyingImpl	concurrency/Mutex.cpp	/^  void* getUnderlyingImpl() const { return (void*)&pthread_mutex_; }$/;"	f	class:apache::thrift::concurrency::Mutex::impl
getUnderlyingImpl	concurrency/Mutex.cpp	/^void* Mutex::getUnderlyingImpl() const {$/;"	f	class:apache::thrift::concurrency::Mutex
getUnderlyingImpl	concurrency/StdMutex.cpp	/^void* Mutex::getUnderlyingImpl() const {$/;"	f	class:apache::thrift::concurrency::Mutex
getUnderlyingTransport	transport/TBufferTransports.h	/^  boost::shared_ptr<TTransport> getUnderlyingTransport() { return transport_; }$/;"	f	class:apache::thrift::transport::TBufferedTransport
getUnderlyingTransport	transport/TBufferTransports.h	/^  boost::shared_ptr<TTransport> getUnderlyingTransport() { return transport_; }$/;"	f	class:apache::thrift::transport::TFramedTransport
getUnderlyingTransport	transport/TShortReadTransport.h	/^  boost::shared_ptr<TTransport> getUnderlyingTransport() { return transport_; }$/;"	f	class:apache::thrift::transport::test::TShortReadTransport
getUseLowMinRto	transport/TSocket.cpp	/^bool TSocket::getUseLowMinRto() {$/;"	f	class:apache::thrift::transport::TSocket
getUserEventBase	server/TNonblockingServer.h	/^  event_base* getUserEventBase() const { return userEventBase_; }$/;"	f	class:apache::thrift::server::TNonblockingServer
getVersion	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceClient::getVersion(std::string& _return)$/;"	f	class:facebook::fb303::FacebookServiceClient
getVersion	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceConcurrentClient::getVersion(std::string& _return)$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
getVersion	gen-cpp-fb/FacebookService.h	/^  void getVersion(std::string& \/* _return *\/) {$/;"	f	class:facebook::fb303::FacebookServiceNull
getVersion	gen-cpp-fb/FacebookService.h	/^  void getVersion(std::string& _return) {$/;"	f	class:facebook::fb303::FacebookServiceMultiface
getVersion	gen-cpp-fb/FacebookService_server.skeleton.cpp	/^  void getVersion(std::string& _return) {$/;"	f	class:FacebookServiceHandler
getWriteBufferDefaultSize	server/TNonblockingServer.h	/^  size_t getWriteBufferDefaultSize() const { return writeBufferDefaultSize_; }$/;"	f	class:apache::thrift::server::TNonblockingServer
getWriteMutex	async/TConcurrentClientSyncInfo.h	/^  ::apache::thrift::concurrency::Mutex &getWriteMutex() {return writeMutex_;}$/;"	f	class:apache::thrift::async::TConcurrentClientSyncInfo
getWritePtr	transport/TBufferTransports.h	/^  uint8_t* getWritePtr(uint32_t len) {$/;"	f	class:apache::thrift::transport::TMemoryBuffer
getWrtPipeHandle	transport/TPipe.cpp	/^  virtual HANDLE getWrtPipeHandle() { return INVALID_HANDLE_VALUE; }$/;"	f	class:apache::thrift::transport::TPipeImpl
getWrtPipeHandle	transport/TPipe.cpp	/^  virtual HANDLE getWrtPipeHandle() { return PipeWrt_.h; }$/;"	f	class:apache::thrift::transport::TAnonPipeImpl
getWrtPipeHandle	transport/TPipe.cpp	/^HANDLE TPipe::getWrtPipeHandle() {$/;"	f	class:apache::thrift::transport::TPipe
getWrtPipeHandle	transport/TPipeServer.cpp	/^  virtual HANDLE getWrtPipeHandle() { return INVALID_HANDLE_VALUE; }$/;"	f	class:apache::thrift::transport::TNamedPipeServer
getWrtPipeHandle	transport/TPipeServer.cpp	/^  virtual HANDLE getWrtPipeHandle() { return PipeW_.h; }$/;"	f	class:apache::thrift::transport::TAnonPipeServer
getWrtPipeHandle	transport/TPipeServer.cpp	/^HANDLE TPipeServer::getWrtPipeHandle() {$/;"	f	class:apache::thrift::transport::TPipeServer
getZlibMessage	transport/TZlibTransport.h	/^  std::string getZlibMessage() { return zlib_msg_; }$/;"	f	class:apache::thrift::transport::TZlibTransportException
getZlibStatus	transport/TZlibTransport.h	/^  int getZlibStatus() { return zlib_status_; }$/;"	f	class:apache::thrift::transport::TZlibTransportException
get_current	concurrency/Thread.h	/^  static inline id_t get_current() { return boost::this_thread::get_id(); }$/;"	f	class:apache::thrift::concurrency::Thread
get_frequency_map	processor/StatsProcessor.h	/^  const std::map<std::string, int64_t>& get_frequency_map() { return frequency_map_; }$/;"	f	class:apache::thrift::processor::StatsProcessor
good	async/TEvhttpClientChannel.h	/^  virtual bool good() const { return true; }$/;"	f	class:apache::thrift::async::TEvhttpClientChannel
h	windows/OverlappedSubmissionThread.h	/^  HANDLE h;$/;"	m	struct:apache::thrift::transport::TOverlappedWorkItem
h	windows/Sync.h	/^  HANDLE h;$/;"	m	struct:apache::thrift::TAutoHandle
h	windows/Sync.h	/^  HANDLE h;$/;"	m	struct:apache::thrift::TAutoResetEvent
h	windows/Sync.h	/^  HANDLE h;$/;"	m	struct:apache::thrift::TManualResetEvent
handleEvent	server/TNonblockingServer.cpp	/^void TNonblockingServer::handleEvent(THRIFT_SOCKET fd, short which) {$/;"	f	class:apache::thrift::server::TNonblockingServer
handlerError	TProcessor.h	/^  virtual void handlerError(void* ctx, const char* fn_name) {$/;"	f	class:apache::thrift::TProcessorEventHandler
handlerFactory_	TProcessor.h	/^  boost::shared_ptr<HandlerFactory_> handlerFactory_;$/;"	m	class:apache::thrift::ReleaseHandler
handlerFactory_	gen-cpp-fb-s/FacebookService.h	/^  ::boost::shared_ptr< FacebookServiceIfFactory > handlerFactory_;$/;"	m	class:facebook::fb303::FacebookServiceProcessorFactory
handlerFactory_	gen-cpp-fb/FacebookService.h	/^  ::boost::shared_ptr< FacebookServiceIfFactory > handlerFactory_;$/;"	m	class:facebook::fb303::FacebookServiceProcessorFactory
handler_	TProcessor.h	/^  apache::thrift::TProcessorEventHandler* handler_;$/;"	m	class:apache::thrift::TProcessorContextFreer
hasBoolValue	protocol/TCompactProtocol.h	/^    bool hasBoolValue;$/;"	m	struct:apache::thrift::protocol::TCompactProtocolT::__anon3
hasData_	protocol/TJSONProtocol.h	/^    bool hasData_;$/;"	m	class:apache::thrift::protocol::TJSONProtocol::LookaheadReader
hash	VirtualProfiling.cpp	/^  size_t hash() const {$/;"	f	class:apache::thrift::Backtrace
hash	VirtualProfiling.cpp	/^  size_t hash() const {$/;"	f	class:apache::thrift::Key
hexChar	protocol/TJSONProtocol.cpp	/^static uint8_t hexChar(uint8_t val) {$/;"	f	namespace:apache::thrift::protocol
hexVal	protocol/TJSONProtocol.cpp	/^static uint8_t hexVal(uint8_t ch) {$/;"	f	namespace:apache::thrift::protocol
host_	async/TEvhttpClientChannel.h	/^  std::string host_;$/;"	m	class:apache::thrift::async::TEvhttpClientChannel
host_	transport/THttpClient.h	/^  std::string host_;$/;"	m	class:apache::thrift::transport::THttpClient
host_	transport/TSocket.h	/^  std::string host_;$/;"	m	class:apache::thrift::transport::TSocket
host_	transport/TSocketPool.h	/^  std::string host_;$/;"	m	class:apache::thrift::transport::TSocketPoolServer
httpBufLen_	transport/THttpTransport.h	/^  uint32_t httpBufLen_;$/;"	m	class:apache::thrift::transport::THttpTransport
httpBufSize_	transport/THttpTransport.h	/^  uint32_t httpBufSize_;$/;"	m	class:apache::thrift::transport::THttpTransport
httpBuf_	transport/THttpTransport.h	/^  char* httpBuf_;$/;"	m	class:apache::thrift::transport::THttpTransport
httpPos_	transport/THttpTransport.h	/^  uint32_t httpPos_;$/;"	m	class:apache::thrift::transport::THttpTransport
hwm_	server/TServerFramework.h	/^  int64_t hwm_;$/;"	m	class:apache::thrift::server::TServerFramework
i32ToZigzag	protocol/TCompactProtocol.tcc	/^uint32_t TCompactProtocolT<Transport_>::i32ToZigzag(const int32_t n) {$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
i64ToZigzag	protocol/TCompactProtocol.tcc	/^uint64_t TCompactProtocolT<Transport_>::i64ToZigzag(const int64_t l) {$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
ibuf	async/TEvhttpServer.cpp	/^  boost::shared_ptr<apache::thrift::transport::TMemoryBuffer> ibuf;$/;"	m	struct:apache::thrift::async::TEvhttpServer::RequestContext	file:
idMap_	concurrency/ThreadManager.cpp	/^  std::map<const Thread::id_t, shared_ptr<Thread> > idMap_;$/;"	m	class:apache::thrift::concurrency::ThreadManager::Impl	file:
id_t	concurrency/Thread.h	/^  typedef boost::thread::id id_t;$/;"	t	class:apache::thrift::concurrency::Thread
idleCount_	concurrency/ThreadManager.cpp	/^  size_t idleCount_;$/;"	m	class:apache::thrift::concurrency::ThreadManager::Impl	file:
idleReadBufferLimit_	server/TNonblockingServer.h	/^  size_t idleReadBufferLimit_;$/;"	m	class:apache::thrift::server::TNonblockingServer
idleWorkerCount	concurrency/ThreadManager.cpp	/^  size_t idleWorkerCount() const { return idleCount_; }$/;"	f	class:apache::thrift::concurrency::ThreadManager::Impl
idleWriteBufferLimit_	server/TNonblockingServer.h	/^  size_t idleWriteBufferLimit_;$/;"	m	class:apache::thrift::server::TNonblockingServer
idle_	concurrency/ThreadManager.cpp	/^  bool idle_;$/;"	m	class:apache::thrift::concurrency::ThreadManager::Worker	file:
iface_	gen-cpp-fb-s/FacebookService.h	/^  boost::shared_ptr<FacebookServiceIf> iface_;$/;"	m	class:facebook::fb303::FacebookServiceIfSingletonFactory
iface_	gen-cpp-fb-s/FacebookService.h	/^  boost::shared_ptr<FacebookServiceIf> iface_;$/;"	m	class:facebook::fb303::FacebookServiceProcessor
iface_	gen-cpp-fb/FacebookService.h	/^  boost::shared_ptr<FacebookServiceIf> iface_;$/;"	m	class:facebook::fb303::FacebookServiceIfSingletonFactory
iface_	gen-cpp-fb/FacebookService.h	/^  boost::shared_ptr<FacebookServiceIf> iface_;$/;"	m	class:facebook::fb303::FacebookServiceProcessor
ifaces_	gen-cpp-fb-s/FacebookService.h	/^  std::vector<boost::shared_ptr<FacebookServiceIf> > ifaces_;$/;"	m	class:facebook::fb303::FacebookServiceMultiface
ifaces_	gen-cpp-fb/FacebookService.h	/^  std::vector<boost::shared_ptr<FacebookServiceIf> > ifaces_;$/;"	m	class:facebook::fb303::FacebookServiceMultiface
ii_	Thrift.h	/^  int ii_;$/;"	m	class:apache::thrift::TEnumIterator
impl	concurrency/BoostMutex.cpp	/^class Mutex::impl : public boost::timed_mutex {};$/;"	c	class:apache::thrift::concurrency::Mutex	file:
impl	concurrency/Mutex.cpp	/^  impl() : initialized_(false) {$/;"	f	class:apache::thrift::concurrency::ReadWriteMutex::impl
impl	concurrency/Mutex.cpp	/^  impl(Initializer init) : initialized_(false) {$/;"	f	class:apache::thrift::concurrency::Mutex::impl
impl	concurrency/Mutex.cpp	/^class Mutex::impl {$/;"	c	class:apache::thrift::concurrency::Mutex	file:
impl	concurrency/Mutex.cpp	/^class ReadWriteMutex::impl {$/;"	c	class:apache::thrift::concurrency::ReadWriteMutex	file:
impl	concurrency/StdMutex.cpp	/^class Mutex::impl : public std::timed_mutex {};$/;"	c	class:apache::thrift::concurrency::Mutex	file:
impl_	concurrency/BoostThreadFactory.h	/^  boost::shared_ptr<Impl> impl_;$/;"	m	class:apache::thrift::concurrency::BoostThreadFactory
impl_	concurrency/Monitor.h	/^  Impl* impl_;$/;"	m	class:apache::thrift::concurrency::Monitor
impl_	concurrency/Mutex.h	/^  boost::shared_ptr<impl> impl_;$/;"	m	class:apache::thrift::concurrency::Mutex
impl_	concurrency/Mutex.h	/^  boost::shared_ptr<impl> impl_;$/;"	m	class:apache::thrift::concurrency::ReadWriteMutex
impl_	concurrency/PosixThreadFactory.h	/^  boost::shared_ptr<Impl> impl_;$/;"	m	class:apache::thrift::concurrency::PosixThreadFactory
impl_	concurrency/StdThreadFactory.h	/^  boost::shared_ptr<Impl> impl_;$/;"	m	class:apache::thrift::concurrency::StdThreadFactory
impl_	transport/TPipe.h	/^  boost::shared_ptr<TPipeImpl> impl_;$/;"	m	class:apache::thrift::transport::TPipe
impl_	transport/TPipeServer.h	/^  boost::shared_ptr<TPipeServerImpl> impl_;$/;"	m	class:apache::thrift::transport::TPipeServer
increase_max_fds	server/TServer.cpp	/^int increase_max_fds(int max_fds = (1 << 24)) {$/;"	f	namespace:apache::thrift::server
incrementActiveProcessors	server/TNonblockingServer.h	/^  void incrementActiveProcessors() {$/;"	f	class:apache::thrift::server::TNonblockingServer
incrementInputRecursionDepth	protocol/TProtocol.h	/^  void incrementInputRecursionDepth() {$/;"	f	class:apache::thrift::protocol::TProtocol
incrementOutputRecursionDepth	protocol/TProtocol.h	/^  void incrementOutputRecursionDepth() {$/;"	f	class:apache::thrift::protocol::TProtocol
indentDown	protocol/TDebugProtocol.cpp	/^void TDebugProtocol::indentDown() {$/;"	f	class:apache::thrift::protocol::TDebugProtocol
indentUp	protocol/TDebugProtocol.cpp	/^void TDebugProtocol::indentUp() {$/;"	f	class:apache::thrift::protocol::TDebugProtocol
indent_inc	protocol/TDebugProtocol.h	/^  static const int indent_inc = 2;$/;"	m	class:apache::thrift::protocol::TDebugProtocol
indent_str_	protocol/TDebugProtocol.h	/^  std::string indent_str_;$/;"	m	class:apache::thrift::protocol::TDebugProtocol
init	concurrency/BoostMonitor.cpp	/^  void init(Mutex* mutex) { mutex_ = mutex; }$/;"	f	class:apache::thrift::concurrency::Monitor::Impl	file:
init	concurrency/Monitor.cpp	/^  void init(Mutex* mutex) {$/;"	f	class:apache::thrift::concurrency::Monitor::Impl	file:
init	concurrency/StdMonitor.cpp	/^  void init(Mutex* mutex) { mutex_ = mutex; }$/;"	f	class:apache::thrift::concurrency::Monitor::Impl	file:
init	server/TNonblockingServer.cpp	/^void TNonblockingServer::TConnection::init(THRIFT_SOCKET socket,$/;"	f	class:apache::thrift::server::TNonblockingServer::TConnection
init	server/TNonblockingServer.h	/^  void init(int port) {$/;"	f	class:apache::thrift::server::TNonblockingServer
init	transport/THttpTransport.cpp	/^void THttpTransport::init() {$/;"	f	class:apache::thrift::transport::THttpTransport
init	windows/TWinsockSingleton.cpp	/^void TWinsockSingleton::init(void) {$/;"	f	class:apache::thrift::transport::TWinsockSingleton
initBufferAndWriteThread	transport/TFileTransport.cpp	/^bool TFileTransport::initBufferAndWriteThread() {$/;"	f	class:apache::thrift::transport::TFileTransport
initCommon	transport/TBufferTransports.h	/^  void initCommon(uint8_t* buf, uint32_t size, bool owner, uint32_t wPos) {$/;"	f	class:apache::thrift::transport::TMemoryBuffer
initPointers	transport/TBufferTransports.h	/^  void initPointers() {$/;"	f	class:apache::thrift::transport::TBufferedTransport
initPointers	transport/TBufferTransports.h	/^  void initPointers() {$/;"	f	class:apache::thrift::transport::TFramedTransport
initZlib	transport/TZlibTransport.cpp	/^void TZlibTransport::initZlib() {$/;"	f	class:apache::thrift::transport::TZlibTransport
init_with_kind	concurrency/Mutex.cpp	/^static void init_with_kind(pthread_mutex_t* mutex, int kind) {$/;"	f	namespace:apache::thrift::concurrency
initialize	processor/PeekProcessor.cpp	/^void PeekProcessor::initialize(boost::shared_ptr<TProcessor> actualProcessor,$/;"	f	class:apache::thrift::processor::PeekProcessor
initializeOpenSSL	transport/TSSLSocket.cpp	/^void initializeOpenSSL() {$/;"	f	namespace:apache::thrift::transport
initializeTargetTransport	transport/TTransportUtils.h	/^  virtual void initializeTargetTransport(boost::shared_ptr<TTransport> dstTrans) {$/;"	f	class:apache::thrift::transport::TPipedTransportFactory
initialized_	concurrency/Mutex.cpp	/^  mutable bool initialized_;$/;"	m	class:apache::thrift::concurrency::Mutex::impl	file:
initialized_	concurrency/Mutex.cpp	/^  mutable bool initialized_;$/;"	m	class:apache::thrift::concurrency::ReadWriteMutex::impl	file:
initiateNamedConnect	transport/TPipeServer.cpp	/^void TNamedPipeServer::initiateNamedConnect(const TAutoCrit &lockProof) {$/;"	f	class:apache::thrift::transport::TNamedPipeServer
input	TProcessor.h	/^  boost::shared_ptr<protocol::TProtocol> input;$/;"	m	struct:apache::thrift::TConnectionInfo
inputProtocolFactory_	server/TServer.h	/^  boost::shared_ptr<TProtocolFactory> inputProtocolFactory_;$/;"	m	class:apache::thrift::server::TServer
inputProtocolFactory_	transport/TFileTransport.h	/^  boost::shared_ptr<TProtocolFactory> inputProtocolFactory_;$/;"	m	class:apache::thrift::transport::TFileProcessor
inputProtocol_	server/TConnectedClient.h	/^  boost::shared_ptr<apache::thrift::protocol::TProtocol> inputProtocol_;$/;"	m	class:apache::thrift::server::TConnectedClient
inputProtocol_	server/TNonblockingServer.cpp	/^  boost::shared_ptr<TProtocol> inputProtocol_;$/;"	m	class:apache::thrift::server::TNonblockingServer::TConnection	file:
inputTransportFactory_	server/TServer.h	/^  boost::shared_ptr<TTransportFactory> inputTransportFactory_;$/;"	m	class:apache::thrift::server::TServer
inputTransport_	server/TNonblockingServer.cpp	/^  boost::shared_ptr<TMemoryBuffer> inputTransport_;$/;"	m	class:apache::thrift::server::TNonblockingServer::TConnection	file:
inputTransport_	transport/TFileTransport.h	/^  boost::shared_ptr<TFileReaderTransport> inputTransport_;$/;"	m	class:apache::thrift::transport::TFileProcessor
input_	server/TNonblockingServer.cpp	/^  boost::shared_ptr<TProtocol> input_;$/;"	m	class:apache::thrift::server::TNonblockingServer::TConnection::Task	file:
input_ended_	transport/TZlibTransport.h	/^  bool input_ended_;$/;"	m	class:apache::thrift::transport::TZlibTransport
input_recursion_depth_	protocol/TProtocol.h	/^  uint32_t input_recursion_depth_;$/;"	m	class:apache::thrift::protocol::TProtocol
instanceGuard_	windows/OverlappedSubmissionThread.cpp	/^TCriticalSection TOverlappedSubmissionThread::instanceGuard_;$/;"	m	class:apache::thrift::transport::TOverlappedSubmissionThread	file:
instanceGuard_	windows/OverlappedSubmissionThread.h	/^  static TCriticalSection instanceGuard_;$/;"	m	class:apache::thrift::transport::TOverlappedSubmissionThread
instanceRefCount_	windows/OverlappedSubmissionThread.cpp	/^uint32_t TOverlappedSubmissionThread::instanceRefCount_ = 0;$/;"	m	class:apache::thrift::transport::TOverlappedSubmissionThread	file:
instanceRefCount_	windows/OverlappedSubmissionThread.h	/^  static uint32_t instanceRefCount_;$/;"	m	class:apache::thrift::transport::TOverlappedSubmissionThread
instance_	windows/OverlappedSubmissionThread.cpp	/^TOverlappedSubmissionThread* TOverlappedSubmissionThread::instance_;$/;"	m	class:apache::thrift::transport::TOverlappedSubmissionThread	file:
instance_	windows/OverlappedSubmissionThread.h	/^  static TOverlappedSubmissionThread* instance_;$/;"	m	class:apache::thrift::transport::TOverlappedSubmissionThread
instance_ptr	windows/TWinsockSingleton.h	/^  typedef boost::scoped_ptr<TWinsockSingleton> instance_ptr;$/;"	t	class:apache::thrift::transport::TWinsockSingleton
instance_ptr_	windows/TWinsockSingleton.h	/^  static instance_ptr instance_ptr_;$/;"	m	class:apache::thrift::transport::TWinsockSingleton
int16_t	windows/config.h	/^typedef boost::int16_t int16_t;$/;"	t
int32_t	windows/config.h	/^typedef boost::int32_t int32_t;$/;"	t
int64_t	windows/config.h	/^typedef boost::int64_t int64_t;$/;"	t
int8_t	windows/config.h	/^typedef boost::int8_t int8_t;$/;"	t
interrupt	transport/TPipeServer.cpp	/^  virtual void interrupt() {$/;"	f	class:apache::thrift::transport::TNamedPipeServer
interrupt	transport/TPipeServer.cpp	/^  virtual void interrupt() {} \/\/ not currently implemented$/;"	f	class:apache::thrift::transport::TAnonPipeServer
interrupt	transport/TPipeServer.cpp	/^void TPipeServer::interrupt() {$/;"	f	class:apache::thrift::transport::TPipeServer
interrupt	transport/TServerSocket.cpp	/^void TServerSocket::interrupt() {$/;"	f	class:apache::thrift::transport::TServerSocket
interrupt	transport/TServerTransport.h	/^  virtual void interrupt() {}$/;"	f	class:apache::thrift::transport::TServerTransport
interruptChildren	transport/TServerSocket.cpp	/^void TServerSocket::interruptChildren() {$/;"	f	class:apache::thrift::transport::TServerSocket
interruptChildren	transport/TServerTransport.h	/^  virtual void interruptChildren() {}$/;"	f	class:apache::thrift::transport::TServerTransport
interruptListener_	transport/TSocket.h	/^  boost::shared_ptr<THRIFT_SOCKET> interruptListener_;$/;"	m	class:apache::thrift::transport::TSocket
interruptSockReader_	transport/TServerSocket.h	/^  THRIFT_SOCKET interruptSockReader_;                          \/\/ is used in select\/poll with serverSocket_ for interruptability$/;"	m	class:apache::thrift::transport::TServerSocket
interruptSockWriter_	transport/TServerSocket.h	/^  THRIFT_SOCKET interruptSockWriter_;                          \/\/ is notified on interrupt()$/;"	m	class:apache::thrift::transport::TServerSocket
interruptableChildren_	transport/TServerSocket.h	/^  bool interruptableChildren_;$/;"	m	class:apache::thrift::transport::TServerSocket
intervalMs_	concurrency/FunctionRunner.h	/^  int intervalMs_;$/;"	m	class:apache::thrift::concurrency::FunctionRunner
ioThreadFactory_	server/TNonblockingServer.h	/^  boost::shared_ptr<PlatformThreadFactory> ioThreadFactory_;$/;"	m	class:apache::thrift::server::TNonblockingServer
ioThread_	server/TNonblockingServer.cpp	/^  TNonblockingIOThread* ioThread_;$/;"	m	class:apache::thrift::server::TNonblockingServer::TConnection	file:
ioThreads_	server/TNonblockingServer.h	/^  std::vector<boost::shared_ptr<TNonblockingIOThread> > ioThreads_;$/;"	m	class:apache::thrift::server::TNonblockingServer
iprot_	gen-cpp-fb-s/FacebookService.h	/^  ::apache::thrift::protocol::TProtocol* iprot_;$/;"	m	class:facebook::fb303::FacebookServiceClient
iprot_	gen-cpp-fb-s/FacebookService.h	/^  ::apache::thrift::protocol::TProtocol* iprot_;$/;"	m	class:facebook::fb303::FacebookServiceConcurrentClient
iprot_	gen-cpp-fb/FacebookService.h	/^  ::apache::thrift::protocol::TProtocol* iprot_;$/;"	m	class:facebook::fb303::FacebookServiceClient
iprot_	gen-cpp-fb/FacebookService.h	/^  ::apache::thrift::protocol::TProtocol* iprot_;$/;"	m	class:facebook::fb303::FacebookServiceConcurrentClient
iprot_	qt/TQTcpServer.cpp	/^  shared_ptr<TProtocol> iprot_;$/;"	m	struct:apache::thrift::async::TQTcpServer::ConnectionContext	file:
ipv4	transport/TSocket.h	/^    sockaddr_in ipv4;$/;"	m	union:apache::thrift::transport::TSocket::__anon6
ipv6	transport/TSocket.h	/^    sockaddr_in6 ipv6;$/;"	m	union:apache::thrift::transport::TSocket::__anon6
isActive	concurrency/ThreadManager.cpp	/^  bool isActive() const {$/;"	f	class:apache::thrift::concurrency::ThreadManager::Worker	file:
isAnonymous_	transport/TPipe.h	/^  bool isAnonymous_;$/;"	m	class:apache::thrift::transport::TPipe
isAnonymous_	transport/TPipeServer.h	/^  bool isAnonymous_;$/;"	m	class:apache::thrift::transport::TPipeServer
isBufferedDataAvailable	transport/TPipe.cpp	/^  virtual bool isBufferedDataAvailable() { return begin_unread_idx_ < end_unread_idx_; }$/;"	f	class:apache::thrift::transport::TWaitableNamedPipeImpl
isBufferedDataAvailable	transport/TPipe.cpp	/^  virtual bool isBufferedDataAvailable() { return false; }$/;"	f	class:apache::thrift::transport::TPipeImpl
isDetached	concurrency/BoostThreadFactory.cpp	/^  bool isDetached() const { return detached_; }$/;"	f	class:apache::thrift::concurrency::BoostThreadFactory::Impl
isDetached	concurrency/BoostThreadFactory.cpp	/^bool BoostThreadFactory::isDetached() const {$/;"	f	class:apache::thrift::concurrency::BoostThreadFactory
isDetached	concurrency/PosixThreadFactory.cpp	/^  bool isDetached() const { return detached_; }$/;"	f	class:apache::thrift::concurrency::PosixThreadFactory::Impl
isDetached	concurrency/PosixThreadFactory.cpp	/^bool PosixThreadFactory::isDetached() const {$/;"	f	class:apache::thrift::concurrency::PosixThreadFactory
isDetached	concurrency/StdThreadFactory.cpp	/^  bool isDetached() const { return detached_; }$/;"	f	class:apache::thrift::concurrency::StdThreadFactory::Impl
isDetached	concurrency/StdThreadFactory.cpp	/^bool StdThreadFactory::isDetached() const {$/;"	f	class:apache::thrift::concurrency::StdThreadFactory
isEmpty	transport/TFileTransport.cpp	/^bool TFileTransportBuffer::isEmpty() {$/;"	f	class:apache::thrift::transport::TFileTransportBuffer
isEventCorrupted	transport/TFileTransport.cpp	/^bool TFileTransport::isEventCorrupted() {$/;"	f	class:apache::thrift::transport::TFileTransport
isFull	transport/TFileTransport.cpp	/^bool TFileTransportBuffer::isFull() {$/;"	f	class:apache::thrift::transport::TFileTransportBuffer
isJSONNumeric	protocol/TJSONProtocol.cpp	/^static bool isJSONNumeric(uint8_t ch) {$/;"	f	namespace:apache::thrift::protocol
isOpen	qt/TQIODeviceTransport.cpp	/^bool TQIODeviceTransport::isOpen() {$/;"	f	class:apache::thrift::transport::TQIODeviceTransport
isOpen	transport/TBufferTransports.h	/^  bool isOpen() { return transport_->isOpen(); }$/;"	f	class:apache::thrift::transport::TBufferedTransport
isOpen	transport/TBufferTransports.h	/^  bool isOpen() { return transport_->isOpen(); }$/;"	f	class:apache::thrift::transport::TFramedTransport
isOpen	transport/TBufferTransports.h	/^  bool isOpen() { return true; }$/;"	f	class:apache::thrift::transport::TMemoryBuffer
isOpen	transport/TFDTransport.h	/^  bool isOpen() { return fd_ >= 0; }$/;"	f	class:apache::thrift::transport::TFDTransport
isOpen	transport/TFileTransport.h	/^  bool isOpen() { return true; }$/;"	f	class:apache::thrift::transport::TFileTransport
isOpen	transport/THttpTransport.h	/^  bool isOpen() { return transport_->isOpen(); }$/;"	f	class:apache::thrift::transport::THttpTransport
isOpen	transport/TPipe.cpp	/^bool TPipe::isOpen() {$/;"	f	class:apache::thrift::transport::TPipe
isOpen	transport/TSSLSocket.cpp	/^bool TSSLSocket::isOpen() {$/;"	f	class:apache::thrift::transport::TSSLSocket
isOpen	transport/TShortReadTransport.h	/^  bool isOpen() { return transport_->isOpen(); }$/;"	f	class:apache::thrift::transport::test::TShortReadTransport
isOpen	transport/TSocket.cpp	/^bool TSocket::isOpen() {$/;"	f	class:apache::thrift::transport::TSocket
isOpen	transport/TTransport.h	/^  virtual bool isOpen() { return false; } \/\/传输层是否打开$/;"	f	class:apache::thrift::transport::TTransport
isOpen	transport/TTransportUtils.cpp	/^bool TPipedFileReaderTransport::isOpen() {$/;"	f	class:apache::thrift::transport::TPipedFileReaderTransport
isOpen	transport/TTransportUtils.h	/^  bool isOpen() { return srcTrans_->isOpen(); }$/;"	f	class:apache::thrift::transport::TPipedTransport
isOpen	transport/TTransportUtils.h	/^  bool isOpen() { return true; }$/;"	f	class:apache::thrift::transport::TNullTransport
isOpen	transport/TZlibTransport.cpp	/^bool TZlibTransport::isOpen() {$/;"	f	class:apache::thrift::transport::TZlibTransport
isThreadPoolProcessing	server/TNonblockingServer.h	/^  bool isThreadPoolProcessing() const { return threadPoolProcessing_; }$/;"	f	class:apache::thrift::server::TNonblockingServer
is_current	concurrency/Thread.h	/^  static inline bool is_current(id_t t) { return t == boost::this_thread::get_id(); }$/;"	f	class:apache::thrift::concurrency::Thread
join	concurrency/BoostThreadFactory.cpp	/^  void join() {$/;"	f	class:apache::thrift::concurrency::BoostThread
join	concurrency/PosixThreadFactory.cpp	/^  void join() {$/;"	f	class:apache::thrift::concurrency::PthreadThread
join	concurrency/StdThreadFactory.cpp	/^  void join() {$/;"	f	class:apache::thrift::concurrency::StdThread
join	concurrency/ThreadManager.cpp	/^  void join() { stopImpl(true); }$/;"	f	class:apache::thrift::concurrency::ThreadManager::Impl
join	server/TNonblockingServer.cpp	/^void TNonblockingIOThread::join() {$/;"	f	class:apache::thrift::server::TNonblockingIOThread
kBase64DecodeTable	protocol/TBase64Utils.cpp	/^static const uint8_t kBase64DecodeTable[256] = {$/;"	m	namespace:apache::thrift::protocol	file:
kBase64EncodeTable	protocol/TBase64Utils.cpp	/^static const uint8_t* kBase64EncodeTable$/;"	m	namespace:apache::thrift::protocol	file:
kEscapeCharVals	protocol/TJSONProtocol.cpp	/^const static uint8_t kEscapeCharVals[7] = {$/;"	m	namespace:apache::thrift::protocol	file:
kJSONArrayEnd	protocol/TJSONProtocol.cpp	/^static const uint8_t kJSONArrayEnd = ']';$/;"	m	namespace:apache::thrift::protocol	file:
kJSONArrayStart	protocol/TJSONProtocol.cpp	/^static const uint8_t kJSONArrayStart = '[';$/;"	m	namespace:apache::thrift::protocol	file:
kJSONBackslash	protocol/TJSONProtocol.cpp	/^static const uint8_t kJSONBackslash = '\\\\';$/;"	m	namespace:apache::thrift::protocol	file:
kJSONCharTable	protocol/TJSONProtocol.cpp	/^static const uint8_t kJSONCharTable[0x30] = {$/;"	m	namespace:apache::thrift::protocol	file:
kJSONElemSeparator	protocol/TJSONProtocol.cpp	/^static const uint8_t kJSONElemSeparator = ',';$/;"	m	namespace:apache::thrift::protocol	file:
kJSONEscapeChar	protocol/TJSONProtocol.cpp	/^static const uint8_t kJSONEscapeChar = 'u';$/;"	m	namespace:apache::thrift::protocol	file:
kJSONNewline	protocol/TJSONProtocol.cpp	/^static const uint8_t kJSONNewline = '\\n';$/;"	m	namespace:apache::thrift::protocol	file:
kJSONObjectEnd	protocol/TJSONProtocol.cpp	/^static const uint8_t kJSONObjectEnd = '}';$/;"	m	namespace:apache::thrift::protocol	file:
kJSONObjectStart	protocol/TJSONProtocol.cpp	/^static const uint8_t kJSONObjectStart = '{';$/;"	m	namespace:apache::thrift::protocol	file:
kJSONPairSeparator	protocol/TJSONProtocol.cpp	/^static const uint8_t kJSONPairSeparator = ':';$/;"	m	namespace:apache::thrift::protocol	file:
kJSONStringDelimiter	protocol/TJSONProtocol.cpp	/^static const uint8_t kJSONStringDelimiter = '"';$/;"	m	namespace:apache::thrift::protocol	file:
kJSONZeroChar	protocol/TJSONProtocol.cpp	/^static const uint8_t kJSONZeroChar = '0';$/;"	m	namespace:apache::thrift::protocol	file:
kThriftVersion1	protocol/TJSONProtocol.cpp	/^static const uint32_t kThriftVersion1 = 1;$/;"	m	namespace:apache::thrift::protocol	file:
keepAlive_	transport/TServerSocket.h	/^  bool keepAlive_;$/;"	m	class:apache::thrift::transport::TServerSocket
keepAlive_	transport/TSocket.h	/^  bool keepAlive_;$/;"	m	class:apache::thrift::transport::TSocket
key	gen-cpp-fb-s/FacebookService.h	/^  bool key :1;$/;"	m	struct:facebook::fb303::_FacebookService_setOption_args__isset
key	gen-cpp-fb-s/FacebookService.h	/^  const std::string* key;$/;"	m	class:facebook::fb303::FacebookService_setOption_pargs
key	gen-cpp-fb-s/FacebookService.h	/^  std::string key;$/;"	m	class:facebook::fb303::FacebookService_setOption_args
key	gen-cpp-fb/FacebookService.h	/^  bool key :1;$/;"	m	struct:facebook::fb303::_FacebookService_getCounter_args__isset
key	gen-cpp-fb/FacebookService.h	/^  bool key :1;$/;"	m	struct:facebook::fb303::_FacebookService_getOption_args__isset
key	gen-cpp-fb/FacebookService.h	/^  bool key :1;$/;"	m	struct:facebook::fb303::_FacebookService_setOption_args__isset
key	gen-cpp-fb/FacebookService.h	/^  const std::string* key;$/;"	m	class:facebook::fb303::FacebookService_getCounter_pargs
key	gen-cpp-fb/FacebookService.h	/^  const std::string* key;$/;"	m	class:facebook::fb303::FacebookService_getOption_pargs
key	gen-cpp-fb/FacebookService.h	/^  const std::string* key;$/;"	m	class:facebook::fb303::FacebookService_setOption_pargs
key	gen-cpp-fb/FacebookService.h	/^  std::string key;$/;"	m	class:facebook::fb303::FacebookService_getCounter_args
key	gen-cpp-fb/FacebookService.h	/^  std::string key;$/;"	m	class:facebook::fb303::FacebookService_getOption_args
key	gen-cpp-fb/FacebookService.h	/^  std::string key;$/;"	m	class:facebook::fb303::FacebookService_setOption_args
largestWriteBufferSize_	server/TNonblockingServer.cpp	/^  size_t largestWriteBufferSize_;$/;"	m	class:apache::thrift::server::TNonblockingServer::TConnection	file:
lastBadChunk_	transport/TFileTransport.h	/^  uint32_t lastBadChunk_;$/;"	m	class:apache::thrift::transport::TFileTransport
lastDispatchPtr_	transport/TFileTransport.h	/^  int32_t lastDispatchPtr_;$/;"	m	struct:apache::thrift::transport::readState
lastFailTime_	transport/TSocketPool.h	/^  time_t lastFailTime_;$/;"	m	class:apache::thrift::transport::TSocketPoolServer
lastFieldId_	protocol/TCompactProtocol.h	/^  int16_t lastFieldId_;$/;"	m	class:apache::thrift::protocol::TCompactProtocolT
lastField_	protocol/TCompactProtocol.h	/^  std::stack<int16_t> lastField_;$/;"	m	class:apache::thrift::protocol::TCompactProtocolT
last_error	windows/OverlappedSubmissionThread.h	/^  DWORD last_error;$/;"	m	struct:apache::thrift::transport::TOverlappedWorkItem
limit_	server/TServerFramework.h	/^  int64_t limit_;$/;"	m	class:apache::thrift::server::TServerFramework
lingerOn_	transport/TSocket.h	/^  bool lingerOn_;$/;"	m	class:apache::thrift::transport::TSocket
lingerVal_	transport/TSocket.h	/^  int lingerVal_;$/;"	m	class:apache::thrift::transport::TSocket
list_idx_	protocol/TDebugProtocol.h	/^  std::vector<int> list_idx_;$/;"	m	class:apache::thrift::protocol::TDebugProtocol
listen	transport/TPipeServer.cpp	/^void TPipeServer::listen() {$/;"	f	class:apache::thrift::transport::TPipeServer
listen	transport/TServerSocket.cpp	/^void TServerSocket::listen() {$/;"	f	class:apache::thrift::transport::TServerSocket
listen	transport/TServerTransport.h	/^  virtual void listen() {}$/;"	f	class:apache::thrift::transport::TServerTransport
listenCallback_	transport/TServerSocket.h	/^  socket_func_t listenCallback_;$/;"	m	class:apache::thrift::transport::TServerSocket
listenHandler	server/TNonblockingServer.h	/^  static void listenHandler(evutil_socket_t fd, short which, void* v) {$/;"	f	class:apache::thrift::server::TNonblockingIOThread
listenPort_	server/TNonblockingServer.h	/^  int listenPort_;$/;"	m	class:apache::thrift::server::TNonblockingServer
listenSocket	server/TNonblockingServer.cpp	/^void TNonblockingServer::listenSocket(THRIFT_SOCKET s) {$/;"	f	class:apache::thrift::server::TNonblockingServer
listenSocket_	server/TNonblockingServer.h	/^  THRIFT_SOCKET listenSocket_;$/;"	m	class:apache::thrift::server::TNonblockingIOThread
listen_event_	transport/TPipeServer.cpp	/^  TManualResetEvent listen_event_;$/;"	m	class:apache::thrift::transport::TNamedPipeServer	file:
listening_	transport/TServerSocket.h	/^  bool listening_;$/;"	m	class:apache::thrift::transport::TServerSocket
loadCertificate	transport/TSSLSocket.cpp	/^void TSSLSocketFactory::loadCertificate(const char* path, const char* format) {$/;"	f	class:apache::thrift::transport::TSSLSocketFactory
loadPrivateKey	transport/TSSLSocket.cpp	/^void TSSLSocketFactory::loadPrivateKey(const char* path, const char* format) {$/;"	f	class:apache::thrift::transport::TSSLSocketFactory
loadTrustedCertificates	transport/TSSLSocket.cpp	/^void TSSLSocketFactory::loadTrustedCertificates(const char* path) {$/;"	f	class:apache::thrift::transport::TSSLSocketFactory
local_open	transport/TSocket.cpp	/^void TSocket::local_open() {$/;"	f	class:apache::thrift::transport::TSocket
lock	concurrency/BoostMonitor.cpp	/^  void lock() { mutex().lock(); }$/;"	f	class:apache::thrift::concurrency::Monitor::Impl
lock	concurrency/BoostMonitor.cpp	/^void Monitor::lock() const {$/;"	f	class:apache::thrift::concurrency::Monitor
lock	concurrency/BoostMutex.cpp	/^void Mutex::lock() const {$/;"	f	class:apache::thrift::concurrency::Mutex
lock	concurrency/Monitor.cpp	/^  void lock() { mutex().lock(); }$/;"	f	class:apache::thrift::concurrency::Monitor::Impl
lock	concurrency/Monitor.cpp	/^void Monitor::lock() const {$/;"	f	class:apache::thrift::concurrency::Monitor
lock	concurrency/Mutex.cpp	/^  void lock() const {$/;"	f	class:apache::thrift::concurrency::Mutex::impl
lock	concurrency/Mutex.cpp	/^void Mutex::lock() const {$/;"	f	class:apache::thrift::concurrency::Mutex
lock	concurrency/StdMonitor.cpp	/^  void lock() { mutex_->lock(); }$/;"	f	class:apache::thrift::concurrency::Monitor::Impl
lock	concurrency/StdMonitor.cpp	/^void Monitor::lock() const {$/;"	f	class:apache::thrift::concurrency::Monitor
lock	concurrency/StdMutex.cpp	/^void Mutex::lock() const {$/;"	f	class:apache::thrift::concurrency::Mutex
main	gen-cpp-fb-s/FacebookService_server.skeleton.cpp	/^int main(int argc, char **argv) {$/;"	f
main	gen-cpp-fb/FacebookService_server.skeleton.cpp	/^int main(int argc, char **argv) {$/;"	f
makePersistent	VirtualProfiling.cpp	/^  void makePersistent() {$/;"	f	class:apache::thrift::Key
manager_	concurrency/ThreadManager.cpp	/^  ThreadManager::Impl* manager_;$/;"	m	class:apache::thrift::concurrency::ThreadManager::Worker	file:
manager_	concurrency/TimerManager.cpp	/^  TimerManager* manager_;$/;"	m	class:apache::thrift::concurrency::TimerManager::Dispatcher	file:
manualOpenSSLInitialization_	transport/TSSLSocket.cpp	/^bool TSSLSocketFactory::manualOpenSSLInitialization_ = false;$/;"	m	class:apache::thrift::transport::TSSLSocketFactory	file:
manualOpenSSLInitialization_	transport/TSSLSocket.h	/^  static bool manualOpenSSLInitialization_;$/;"	m	class:apache::thrift::transport::TSSLSocketFactory
markBad_	async/TConcurrentClientSyncInfo.cpp	/^void TConcurrentClientSyncInfo::markBad_(const Guard &)$/;"	f	class:apache::thrift::async::TConcurrentClientSyncInfo
matchName	transport/TSSLSocket.cpp	/^bool matchName(const char* host, const char* pattern, int size) {$/;"	f	namespace:apache::thrift::transport
maxActiveProcessors_	server/TNonblockingServer.h	/^  size_t maxActiveProcessors_;$/;"	m	class:apache::thrift::server::TNonblockingServer
maxConnections_	server/TNonblockingServer.h	/^  size_t maxConnections_;$/;"	m	class:apache::thrift::server::TNonblockingServer
maxConsecutiveFailures_	transport/TSocketPool.h	/^  int maxConsecutiveFailures_;$/;"	m	class:apache::thrift::transport::TSocketPool
maxCorruptedEvents_	transport/TFileTransport.h	/^  uint32_t maxCorruptedEvents_;$/;"	m	class:apache::thrift::transport::TFileTransport
maxEventSize_	transport/TFileTransport.h	/^  uint32_t maxEventSize_;$/;"	m	class:apache::thrift::transport::TFileTransport
maxFrameSize_	server/TNonblockingServer.h	/^  size_t maxFrameSize_;$/;"	m	class:apache::thrift::server::TNonblockingServer
maxFrameSize_	transport/TBufferTransports.h	/^  uint32_t maxFrameSize_;$/;"	m	class:apache::thrift::transport::TFramedTransport
maxMonitor_	concurrency/ThreadManager.cpp	/^  Monitor maxMonitor_;$/;"	m	class:apache::thrift::concurrency::ThreadManager::Impl	file:
maxRecvRetries_	transport/TSocket.h	/^  int maxRecvRetries_;$/;"	m	class:apache::thrift::transport::TSocket
maxconns_	transport/TPipeServer.cpp	/^  uint32_t maxconns_;$/;"	m	class:apache::thrift::transport::TNamedPipeServer	file:
maxconns_	transport/TPipeServer.h	/^  uint32_t maxconns_;$/;"	m	class:apache::thrift::transport::TPipeServer
maybeGetProfilingStartTime	concurrency/Mutex.cpp	/^static inline int64_t maybeGetProfilingStartTime() {$/;"	f	namespace:apache::thrift::concurrency
memoryBuffer_	processor/PeekProcessor.h	/^  boost::shared_ptr<apache::thrift::transport::TMemoryBuffer> memoryBuffer_;$/;"	m	class:apache::thrift::processor::PeekProcessor
message_	Thrift.h	/^  std::string message_;$/;"	m	class:apache::thrift::TException
method_	TProcessor.h	/^  const char* method_;$/;"	m	class:apache::thrift::TProcessorContextFreer
mode	transport/TFileTransport.h	/^  enum mode { WRITE, READ };$/;"	g	class:apache::thrift::transport::TFileTransportBuffer
mon_	server/TServerFramework.h	/^  apache::thrift::concurrency::Monitor mon_;$/;"	m	class:apache::thrift::server::TServerFramework
monitor_	concurrency/ThreadManager.cpp	/^  Monitor monitor_;$/;"	m	class:apache::thrift::concurrency::SimpleThreadManager	file:
monitor_	concurrency/ThreadManager.cpp	/^  Monitor monitor_;$/;"	m	class:apache::thrift::concurrency::ThreadManager::Impl	file:
monitor_	concurrency/TimerManager.h	/^  Monitor monitor_;$/;"	m	class:apache::thrift::concurrency::TimerManager
mtypePending_	async/TConcurrentClientSyncInfo.h	/^  ::apache::thrift::protocol::TMessageType mtypePending_;$/;"	m	class:apache::thrift::async::TConcurrentClientSyncInfo
mutex	concurrency/BoostMonitor.cpp	/^  Mutex& mutex() { return *mutex_; }$/;"	f	class:apache::thrift::concurrency::Monitor::Impl
mutex	concurrency/BoostMonitor.cpp	/^Mutex& Monitor::mutex() const {$/;"	f	class:apache::thrift::concurrency::Monitor
mutex	concurrency/Monitor.cpp	/^  Mutex& mutex() { return *mutex_; }$/;"	f	class:apache::thrift::concurrency::Monitor::Impl
mutex	concurrency/Monitor.cpp	/^Mutex& Monitor::mutex() const {$/;"	f	class:apache::thrift::concurrency::Monitor
mutex	concurrency/StdMonitor.cpp	/^  Mutex& mutex() { return *mutex_; }$/;"	f	class:apache::thrift::concurrency::Monitor::Impl
mutex	concurrency/StdMonitor.cpp	/^Mutex& Monitor::mutex() const {$/;"	f	class:apache::thrift::concurrency::Monitor
mutex	transport/TSSLSocket.cpp	/^  Mutex mutex;$/;"	m	struct:CRYPTO_dynlock_value	file:
mutexProfilingCallback	concurrency/Mutex.cpp	/^static MutexWaitCallback mutexProfilingCallback = 0;$/;"	m	namespace:apache::thrift::concurrency	file:
mutexProfilingCounter	concurrency/Mutex.cpp	/^volatile static sig_atomic_t mutexProfilingCounter = 0;$/;"	m	namespace:apache::thrift::concurrency	file:
mutexProfilingSampleRate	concurrency/Mutex.cpp	/^static sig_atomic_t mutexProfilingSampleRate = 0;$/;"	m	namespace:apache::thrift::concurrency	file:
mutex_	concurrency/BoostMonitor.cpp	/^  Mutex* mutex_;$/;"	m	class:apache::thrift::concurrency::Monitor::Impl	file:
mutex_	concurrency/Monitor.cpp	/^  Mutex* mutex_;$/;"	m	class:apache::thrift::concurrency::Monitor::Impl	file:
mutex_	concurrency/Mutex.h	/^  Mutex mutex_;$/;"	m	class:apache::thrift::concurrency::NoStarveReadWriteMutex
mutex_	concurrency/Mutex.h	/^  const Mutex* mutex_;$/;"	m	class:apache::thrift::concurrency::Guard
mutex_	concurrency/StdMonitor.cpp	/^  Mutex* mutex_;$/;"	m	class:apache::thrift::concurrency::Monitor::Impl	file:
mutex_	concurrency/ThreadManager.cpp	/^  Mutex mutex_;$/;"	m	class:apache::thrift::concurrency::ThreadManager::Impl	file:
mutex_	transport/TFileTransport.h	/^  Mutex mutex_;$/;"	m	class:apache::thrift::transport::TFileTransport
mutex_	transport/TSSLSocket.cpp	/^Mutex TSSLSocketFactory::mutex_;$/;"	m	class:apache::thrift::transport::TSSLSocketFactory	file:
mutex_	transport/TSSLSocket.h	/^  static concurrency::Mutex mutex_;$/;"	m	class:apache::thrift::transport::TSSLSocketFactory
mutexes	transport/TSSLSocket.cpp	/^static boost::shared_array<Mutex> mutexes;$/;"	m	namespace:apache::thrift::transport	file:
nConnectionsDropped_	server/TNonblockingServer.h	/^  uint32_t nConnectionsDropped_;$/;"	m	class:apache::thrift::server::TNonblockingServer
nTotalConnectionsDropped_	server/TNonblockingServer.h	/^  uint64_t nTotalConnectionsDropped_;$/;"	m	class:apache::thrift::server::TNonblockingServer
n_	Thrift.h	/^  const int n_;$/;"	m	class:apache::thrift::TEnumIterator
name	processor/TMultiplexedProcessor.h	/^  std::string name;$/;"	m	class:apache::thrift::protocol::StoredMessageProtocol
name	protocol/TCompactProtocol.h	/^    const char* name;$/;"	m	struct:apache::thrift::protocol::TCompactProtocolT::__anon2
names_	Thrift.h	/^  const char** names_;$/;"	m	class:apache::thrift::TEnumIterator
newMonitor_	async/TConcurrentClientSyncInfo.cpp	/^TConcurrentClientSyncInfo::newMonitor_(const Guard &)$/;"	f	class:apache::thrift::async::TConcurrentClientSyncInfo
newSimpleThreadManager	concurrency/ThreadManager.cpp	/^shared_ptr<ThreadManager> ThreadManager::newSimpleThreadManager(size_t count,$/;"	f	class:apache::thrift::concurrency::ThreadManager
newThread	concurrency/BoostThreadFactory.cpp	/^  shared_ptr<Thread> newThread(shared_ptr<Runnable> runnable) const {$/;"	f	class:apache::thrift::concurrency::BoostThreadFactory::Impl
newThread	concurrency/BoostThreadFactory.cpp	/^shared_ptr<Thread> BoostThreadFactory::newThread(shared_ptr<Runnable> runnable) const {$/;"	f	class:apache::thrift::concurrency::BoostThreadFactory
newThread	concurrency/PosixThreadFactory.cpp	/^  shared_ptr<Thread> newThread(shared_ptr<Runnable> runnable) const {$/;"	f	class:apache::thrift::concurrency::PosixThreadFactory::Impl
newThread	concurrency/PosixThreadFactory.cpp	/^shared_ptr<Thread> PosixThreadFactory::newThread(shared_ptr<Runnable> runnable) const {$/;"	f	class:apache::thrift::concurrency::PosixThreadFactory
newThread	concurrency/StdThreadFactory.cpp	/^  boost::shared_ptr<Thread> newThread(boost::shared_ptr<Runnable> runnable) const {$/;"	f	class:apache::thrift::concurrency::StdThreadFactory::Impl
newThread	concurrency/StdThreadFactory.cpp	/^boost::shared_ptr<Thread> StdThreadFactory::newThread(boost::shared_ptr<Runnable> runnable) const {$/;"	f	class:apache::thrift::concurrency::StdThreadFactory
newThreadManager	concurrency/ThreadManager.cpp	/^shared_ptr<ThreadManager> ThreadManager::newThreadManager() {$/;"	f	class:apache::thrift::concurrency::ThreadManager
newlyConnectedClient	server/TServerFramework.cpp	/^void TServerFramework::newlyConnectedClient(const boost::shared_ptr<TConnectedClient>& pClient) {$/;"	f	class:apache::thrift::server::TServerFramework
nextIOThread_	server/TNonblockingServer.h	/^  uint32_t nextIOThread_;$/;"	m	class:apache::thrift::server::TNonblockingServer
nextseqid_	async/TConcurrentClientSyncInfo.h	/^  int32_t nextseqid_;$/;"	m	class:apache::thrift::async::TConcurrentClientSyncInfo
noDelay_	transport/TSocket.h	/^  bool noDelay_;$/;"	m	class:apache::thrift::transport::TSocket
notEmpty_	transport/TFileTransport.h	/^  Monitor notFull_, notEmpty_;$/;"	m	class:apache::thrift::transport::TFileTransport
notFull_	transport/TFileTransport.h	/^  Monitor notFull_, notEmpty_;$/;"	m	class:apache::thrift::transport::TFileTransport
notificationEvent_	server/TNonblockingServer.h	/^  struct event notificationEvent_;$/;"	m	class:apache::thrift::server::TNonblockingIOThread	typeref:struct:apache::thrift::server::TNonblockingIOThread::event
notificationPipeFDs_	server/TNonblockingServer.h	/^  evutil_socket_t notificationPipeFDs_[2];$/;"	m	class:apache::thrift::server::TNonblockingIOThread
notify	concurrency/BoostMonitor.cpp	/^  void notify() { notify_one(); }$/;"	f	class:apache::thrift::concurrency::Monitor::Impl
notify	concurrency/BoostMonitor.cpp	/^void Monitor::notify() const {$/;"	f	class:apache::thrift::concurrency::Monitor
notify	concurrency/Monitor.cpp	/^  void notify() {$/;"	f	class:apache::thrift::concurrency::Monitor::Impl
notify	concurrency/Monitor.cpp	/^void Monitor::notify() const {$/;"	f	class:apache::thrift::concurrency::Monitor
notify	concurrency/StdMonitor.cpp	/^  void notify() { conditionVariable_.notify_one(); }$/;"	f	class:apache::thrift::concurrency::Monitor::Impl
notify	concurrency/StdMonitor.cpp	/^void Monitor::notify() const {$/;"	f	class:apache::thrift::concurrency::Monitor
notify	server/TNonblockingServer.cpp	/^bool TNonblockingIOThread::notify(TNonblockingServer::TConnection* conn) {$/;"	f	class:apache::thrift::server::TNonblockingIOThread
notify	transport/TServerSocket.cpp	/^void TServerSocket::notify(THRIFT_SOCKET notifySocket) {$/;"	f	class:apache::thrift::transport::TServerSocket
notifyAll	concurrency/BoostMonitor.cpp	/^  void notifyAll() { notify_all(); }$/;"	f	class:apache::thrift::concurrency::Monitor::Impl
notifyAll	concurrency/BoostMonitor.cpp	/^void Monitor::notifyAll() const {$/;"	f	class:apache::thrift::concurrency::Monitor
notifyAll	concurrency/Monitor.cpp	/^  void notifyAll() {$/;"	f	class:apache::thrift::concurrency::Monitor::Impl
notifyAll	concurrency/Monitor.cpp	/^void Monitor::notifyAll() const {$/;"	f	class:apache::thrift::concurrency::Monitor
notifyAll	concurrency/StdMonitor.cpp	/^  void notifyAll() { conditionVariable_.notify_all(); }$/;"	f	class:apache::thrift::concurrency::Monitor::Impl
notifyAll	concurrency/StdMonitor.cpp	/^void Monitor::notifyAll() const {$/;"	f	class:apache::thrift::concurrency::Monitor
notifyHandler	server/TNonblockingServer.cpp	/^void TNonblockingIOThread::notifyHandler(evutil_socket_t fd, short which, void* v) {$/;"	f	class:apache::thrift::server::TNonblockingIOThread
notifyIOThread	server/TNonblockingServer.cpp	/^  bool notifyIOThread() { return ioThread_->notify(this); }$/;"	f	class:apache::thrift::server::TNonblockingServer::TConnection
numActiveProcessors_	server/TNonblockingServer.h	/^  size_t numActiveProcessors_;$/;"	m	class:apache::thrift::server::TNonblockingServer
numCallers_	VirtualProfiling.cpp	/^  int numCallers_;$/;"	m	class:apache::thrift::Backtrace	file:
numCorruptedEventsInChunk_	transport/TFileTransport.h	/^  uint32_t numCorruptedEventsInChunk_;$/;"	m	class:apache::thrift::transport::TFileTransport
numIOThreads_	server/TNonblockingServer.h	/^  size_t numIOThreads_;$/;"	m	class:apache::thrift::server::TNonblockingServer
numRetries_	transport/TSocketPool.h	/^  int numRetries_;$/;"	m	class:apache::thrift::transport::TSocketPool
numTConnections_	server/TNonblockingServer.h	/^  size_t numTConnections_;$/;"	m	class:apache::thrift::server::TNonblockingServer
number_	server/TNonblockingServer.h	/^  const int number_;$/;"	m	class:apache::thrift::server::TNonblockingIOThread
obuf	async/TEvhttpServer.cpp	/^  boost::shared_ptr<apache::thrift::transport::TMemoryBuffer> obuf;$/;"	m	struct:apache::thrift::async::TEvhttpServer::RequestContext	file:
offset_	transport/TFileTransport.h	/^  off_t offset_;$/;"	m	class:apache::thrift::transport::TFileTransport
onClientConnected	server/TSimpleServer.cpp	/^void TSimpleServer::onClientConnected(const shared_ptr<TConnectedClient>& pClient) {$/;"	f	class:apache::thrift::server::TSimpleServer
onClientConnected	server/TThreadPoolServer.cpp	/^void TThreadPoolServer::onClientConnected(const shared_ptr<TConnectedClient>& pClient) {$/;"	f	class:apache::thrift::server::TThreadPoolServer
onClientConnected	server/TThreadedServer.cpp	/^void TThreadedServer::onClientConnected(const shared_ptr<TConnectedClient>& pClient) {$/;"	f	class:apache::thrift::server::TThreadedServer
onClientDisconnected	server/TSimpleServer.cpp	/^void TSimpleServer::onClientDisconnected(TConnectedClient*) {$/;"	f	class:apache::thrift::server::TSimpleServer
onClientDisconnected	server/TThreadPoolServer.cpp	/^void TThreadPoolServer::onClientDisconnected(TConnectedClient*) {$/;"	f	class:apache::thrift::server::TThreadPoolServer
onClientDisconnected	server/TThreadedServer.cpp	/^void TThreadedServer::onClientDisconnected(TConnectedClient* pClient) {$/;"	f	class:apache::thrift::server::TThreadedServer
opaqueContext_	server/TConnectedClient.h	/^  void* opaqueContext_;$/;"	m	class:apache::thrift::server::TConnectedClient
open	qt/TQIODeviceTransport.cpp	/^void TQIODeviceTransport::open() {$/;"	f	class:apache::thrift::transport::TQIODeviceTransport
open	transport/TBufferTransports.h	/^  void open() { transport_->open(); }$/;"	f	class:apache::thrift::transport::TBufferedTransport
open	transport/TBufferTransports.h	/^  void open() { transport_->open(); }$/;"	f	class:apache::thrift::transport::TFramedTransport
open	transport/TBufferTransports.h	/^  void open() {}$/;"	f	class:apache::thrift::transport::TMemoryBuffer
open	transport/TFDTransport.h	/^  void open() {}$/;"	f	class:apache::thrift::transport::TFDTransport
open	transport/THttpTransport.h	/^  void open() { transport_->open(); }$/;"	f	class:apache::thrift::transport::THttpTransport
open	transport/TPipe.cpp	/^void TPipe::open() {$/;"	f	class:apache::thrift::transport::TPipe
open	transport/TSSLSocket.cpp	/^void TSSLSocket::open() {$/;"	f	class:apache::thrift::transport::TSSLSocket
open	transport/TShortReadTransport.h	/^  void open() { transport_->open(); }$/;"	f	class:apache::thrift::transport::test::TShortReadTransport
open	transport/TSocket.cpp	/^void TSocket::open() {$/;"	f	class:apache::thrift::transport::TSocket
open	transport/TSocketPool.cpp	/^void TSocketPool::open() {$/;"	f	class:apache::thrift::transport::TSocketPool
open	transport/TTransport.h	/^  virtual void open() {$/;"	f	class:apache::thrift::transport::TTransport
open	transport/TTransportUtils.cpp	/^void TPipedFileReaderTransport::open() {$/;"	f	class:apache::thrift::transport::TPipedFileReaderTransport
open	transport/TTransportUtils.h	/^  void open() { srcTrans_->open(); }$/;"	f	class:apache::thrift::transport::TPipedTransport
open	transport/TTransportUtils.h	/^  void open() {}$/;"	f	class:apache::thrift::transport::TNullTransport
open	transport/TZlibTransport.h	/^  void open() { transport_->open(); }$/;"	f	class:apache::thrift::transport::TZlibTransport
openConnection	transport/TSocket.cpp	/^void TSocket::openConnection(struct addrinfo* res) {$/;"	f	class:apache::thrift::transport::TSocket
openLogFile	transport/TFileTransport.cpp	/^void TFileTransport::openLogFile() {$/;"	f	class:apache::thrift::transport::TFileTransport
openSSLInitialized	transport/TSSLSocket.cpp	/^static bool openSSLInitialized = false;$/;"	m	namespace:apache::thrift::transport	file:
operator !=	Thrift.h	/^  bool operator!=(const TEnumIterator& end) {$/;"	f	class:apache::thrift::TEnumIterator
operator !=	gen-cpp-fb-s/FacebookService.h	/^  bool operator != (const FacebookService_getName_args &rhs) const {$/;"	f	class:facebook::fb303::FacebookService_getName_args
operator !=	gen-cpp-fb-s/FacebookService.h	/^  bool operator != (const FacebookService_getName_result &rhs) const {$/;"	f	class:facebook::fb303::FacebookService_getName_result
operator !=	gen-cpp-fb-s/FacebookService.h	/^  bool operator != (const FacebookService_setOption_args &rhs) const {$/;"	f	class:facebook::fb303::FacebookService_setOption_args
operator !=	gen-cpp-fb-s/FacebookService.h	/^  bool operator != (const FacebookService_setOption_result &rhs) const {$/;"	f	class:facebook::fb303::FacebookService_setOption_result
operator !=	gen-cpp-fb-s/FacebookService.h	/^  bool operator != (const FacebookService_shutdown_args &rhs) const {$/;"	f	class:facebook::fb303::FacebookService_shutdown_args
operator !=	gen-cpp-fb/FacebookService.h	/^  bool operator != (const FacebookService_aliveSince_args &rhs) const {$/;"	f	class:facebook::fb303::FacebookService_aliveSince_args
operator !=	gen-cpp-fb/FacebookService.h	/^  bool operator != (const FacebookService_aliveSince_result &rhs) const {$/;"	f	class:facebook::fb303::FacebookService_aliveSince_result
operator !=	gen-cpp-fb/FacebookService.h	/^  bool operator != (const FacebookService_getCounter_args &rhs) const {$/;"	f	class:facebook::fb303::FacebookService_getCounter_args
operator !=	gen-cpp-fb/FacebookService.h	/^  bool operator != (const FacebookService_getCounter_result &rhs) const {$/;"	f	class:facebook::fb303::FacebookService_getCounter_result
operator !=	gen-cpp-fb/FacebookService.h	/^  bool operator != (const FacebookService_getCounters_args &rhs) const {$/;"	f	class:facebook::fb303::FacebookService_getCounters_args
operator !=	gen-cpp-fb/FacebookService.h	/^  bool operator != (const FacebookService_getCounters_result &rhs) const {$/;"	f	class:facebook::fb303::FacebookService_getCounters_result
operator !=	gen-cpp-fb/FacebookService.h	/^  bool operator != (const FacebookService_getCpuProfile_args &rhs) const {$/;"	f	class:facebook::fb303::FacebookService_getCpuProfile_args
operator !=	gen-cpp-fb/FacebookService.h	/^  bool operator != (const FacebookService_getCpuProfile_result &rhs) const {$/;"	f	class:facebook::fb303::FacebookService_getCpuProfile_result
operator !=	gen-cpp-fb/FacebookService.h	/^  bool operator != (const FacebookService_getName_args &rhs) const {$/;"	f	class:facebook::fb303::FacebookService_getName_args
operator !=	gen-cpp-fb/FacebookService.h	/^  bool operator != (const FacebookService_getName_result &rhs) const {$/;"	f	class:facebook::fb303::FacebookService_getName_result
operator !=	gen-cpp-fb/FacebookService.h	/^  bool operator != (const FacebookService_getOption_args &rhs) const {$/;"	f	class:facebook::fb303::FacebookService_getOption_args
operator !=	gen-cpp-fb/FacebookService.h	/^  bool operator != (const FacebookService_getOption_result &rhs) const {$/;"	f	class:facebook::fb303::FacebookService_getOption_result
operator !=	gen-cpp-fb/FacebookService.h	/^  bool operator != (const FacebookService_getOptions_args &rhs) const {$/;"	f	class:facebook::fb303::FacebookService_getOptions_args
operator !=	gen-cpp-fb/FacebookService.h	/^  bool operator != (const FacebookService_getOptions_result &rhs) const {$/;"	f	class:facebook::fb303::FacebookService_getOptions_result
operator !=	gen-cpp-fb/FacebookService.h	/^  bool operator != (const FacebookService_getStatusDetails_args &rhs) const {$/;"	f	class:facebook::fb303::FacebookService_getStatusDetails_args
operator !=	gen-cpp-fb/FacebookService.h	/^  bool operator != (const FacebookService_getStatusDetails_result &rhs) const {$/;"	f	class:facebook::fb303::FacebookService_getStatusDetails_result
operator !=	gen-cpp-fb/FacebookService.h	/^  bool operator != (const FacebookService_getStatus_args &rhs) const {$/;"	f	class:facebook::fb303::FacebookService_getStatus_args
operator !=	gen-cpp-fb/FacebookService.h	/^  bool operator != (const FacebookService_getStatus_result &rhs) const {$/;"	f	class:facebook::fb303::FacebookService_getStatus_result
operator !=	gen-cpp-fb/FacebookService.h	/^  bool operator != (const FacebookService_getVersion_args &rhs) const {$/;"	f	class:facebook::fb303::FacebookService_getVersion_args
operator !=	gen-cpp-fb/FacebookService.h	/^  bool operator != (const FacebookService_getVersion_result &rhs) const {$/;"	f	class:facebook::fb303::FacebookService_getVersion_result
operator !=	gen-cpp-fb/FacebookService.h	/^  bool operator != (const FacebookService_reinitialize_args &rhs) const {$/;"	f	class:facebook::fb303::FacebookService_reinitialize_args
operator !=	gen-cpp-fb/FacebookService.h	/^  bool operator != (const FacebookService_setOption_args &rhs) const {$/;"	f	class:facebook::fb303::FacebookService_setOption_args
operator !=	gen-cpp-fb/FacebookService.h	/^  bool operator != (const FacebookService_setOption_result &rhs) const {$/;"	f	class:facebook::fb303::FacebookService_setOption_result
operator !=	gen-cpp-fb/FacebookService.h	/^  bool operator != (const FacebookService_shutdown_args &rhs) const {$/;"	f	class:facebook::fb303::FacebookService_shutdown_args
operator ()	TOutput.h	/^  inline void operator()(const char* message) { f_(message); }$/;"	f	class:apache::thrift::TOutput
operator ()	TProcessor.h	/^  void operator()(typename HandlerFactory_::Handler* handler) {$/;"	f	class:apache::thrift::ReleaseHandler
operator ()	VirtualProfiling.cpp	/^    size_t operator()(Key const& k) const { return k.hash(); }$/;"	f	class:apache::thrift::Key::Hash
operator ()	VirtualProfiling.cpp	/^  bool operator()(std::pair<Key, size_t> bt1, std::pair<Key, size_t> bt2) const {$/;"	f	class:apache::thrift::CountGreater
operator *	Thrift.h	/^  std::pair<int, const char*> operator*() const { return std::make_pair(enums_[ii_], names_[ii_]); }$/;"	f	class:apache::thrift::TEnumIterator
operator ++	Thrift.h	/^  int operator++() { return ++ii_; }$/;"	f	class:apache::thrift::TEnumIterator
operator ->	windows/OverlappedSubmissionThread.h	/^  TOverlappedSubmissionThread* operator->() { return p; }$/;"	f	class:apache::thrift::transport::TAutoOverlapThread
operator =	VirtualProfiling.cpp	/^  void operator=(Backtrace const& bt) {$/;"	f	class:apache::thrift::Backtrace
operator =	VirtualProfiling.cpp	/^  void operator=(const Key& k) {$/;"	f	class:apache::thrift::Key
operator ==	VirtualProfiling.cpp	/^  bool operator==(Backtrace const& bt) const { return (cmp(bt) == 0); }$/;"	f	class:apache::thrift::Backtrace
operator ==	VirtualProfiling.cpp	/^  bool operator==(const Key& k) const { return cmp(k) == 0; }$/;"	f	class:apache::thrift::Key
operator ==	gen-cpp-fb-s/FacebookService.h	/^  bool operator == (const FacebookService_getName_args & \/* rhs *\/) const$/;"	f	class:facebook::fb303::FacebookService_getName_args
operator ==	gen-cpp-fb-s/FacebookService.h	/^  bool operator == (const FacebookService_getName_result & rhs) const$/;"	f	class:facebook::fb303::FacebookService_getName_result
operator ==	gen-cpp-fb-s/FacebookService.h	/^  bool operator == (const FacebookService_setOption_args & rhs) const$/;"	f	class:facebook::fb303::FacebookService_setOption_args
operator ==	gen-cpp-fb-s/FacebookService.h	/^  bool operator == (const FacebookService_setOption_result & \/* rhs *\/) const$/;"	f	class:facebook::fb303::FacebookService_setOption_result
operator ==	gen-cpp-fb-s/FacebookService.h	/^  bool operator == (const FacebookService_shutdown_args & \/* rhs *\/) const$/;"	f	class:facebook::fb303::FacebookService_shutdown_args
operator ==	gen-cpp-fb/FacebookService.h	/^  bool operator == (const FacebookService_aliveSince_args & \/* rhs *\/) const$/;"	f	class:facebook::fb303::FacebookService_aliveSince_args
operator ==	gen-cpp-fb/FacebookService.h	/^  bool operator == (const FacebookService_aliveSince_result & rhs) const$/;"	f	class:facebook::fb303::FacebookService_aliveSince_result
operator ==	gen-cpp-fb/FacebookService.h	/^  bool operator == (const FacebookService_getCounter_args & rhs) const$/;"	f	class:facebook::fb303::FacebookService_getCounter_args
operator ==	gen-cpp-fb/FacebookService.h	/^  bool operator == (const FacebookService_getCounter_result & rhs) const$/;"	f	class:facebook::fb303::FacebookService_getCounter_result
operator ==	gen-cpp-fb/FacebookService.h	/^  bool operator == (const FacebookService_getCounters_args & \/* rhs *\/) const$/;"	f	class:facebook::fb303::FacebookService_getCounters_args
operator ==	gen-cpp-fb/FacebookService.h	/^  bool operator == (const FacebookService_getCounters_result & rhs) const$/;"	f	class:facebook::fb303::FacebookService_getCounters_result
operator ==	gen-cpp-fb/FacebookService.h	/^  bool operator == (const FacebookService_getCpuProfile_args & rhs) const$/;"	f	class:facebook::fb303::FacebookService_getCpuProfile_args
operator ==	gen-cpp-fb/FacebookService.h	/^  bool operator == (const FacebookService_getCpuProfile_result & rhs) const$/;"	f	class:facebook::fb303::FacebookService_getCpuProfile_result
operator ==	gen-cpp-fb/FacebookService.h	/^  bool operator == (const FacebookService_getName_args & \/* rhs *\/) const$/;"	f	class:facebook::fb303::FacebookService_getName_args
operator ==	gen-cpp-fb/FacebookService.h	/^  bool operator == (const FacebookService_getName_result & rhs) const$/;"	f	class:facebook::fb303::FacebookService_getName_result
operator ==	gen-cpp-fb/FacebookService.h	/^  bool operator == (const FacebookService_getOption_args & rhs) const$/;"	f	class:facebook::fb303::FacebookService_getOption_args
operator ==	gen-cpp-fb/FacebookService.h	/^  bool operator == (const FacebookService_getOption_result & rhs) const$/;"	f	class:facebook::fb303::FacebookService_getOption_result
operator ==	gen-cpp-fb/FacebookService.h	/^  bool operator == (const FacebookService_getOptions_args & \/* rhs *\/) const$/;"	f	class:facebook::fb303::FacebookService_getOptions_args
operator ==	gen-cpp-fb/FacebookService.h	/^  bool operator == (const FacebookService_getOptions_result & rhs) const$/;"	f	class:facebook::fb303::FacebookService_getOptions_result
operator ==	gen-cpp-fb/FacebookService.h	/^  bool operator == (const FacebookService_getStatusDetails_args & \/* rhs *\/) const$/;"	f	class:facebook::fb303::FacebookService_getStatusDetails_args
operator ==	gen-cpp-fb/FacebookService.h	/^  bool operator == (const FacebookService_getStatusDetails_result & rhs) const$/;"	f	class:facebook::fb303::FacebookService_getStatusDetails_result
operator ==	gen-cpp-fb/FacebookService.h	/^  bool operator == (const FacebookService_getStatus_args & \/* rhs *\/) const$/;"	f	class:facebook::fb303::FacebookService_getStatus_args
operator ==	gen-cpp-fb/FacebookService.h	/^  bool operator == (const FacebookService_getStatus_result & rhs) const$/;"	f	class:facebook::fb303::FacebookService_getStatus_result
operator ==	gen-cpp-fb/FacebookService.h	/^  bool operator == (const FacebookService_getVersion_args & \/* rhs *\/) const$/;"	f	class:facebook::fb303::FacebookService_getVersion_args
operator ==	gen-cpp-fb/FacebookService.h	/^  bool operator == (const FacebookService_getVersion_result & rhs) const$/;"	f	class:facebook::fb303::FacebookService_getVersion_result
operator ==	gen-cpp-fb/FacebookService.h	/^  bool operator == (const FacebookService_reinitialize_args & \/* rhs *\/) const$/;"	f	class:facebook::fb303::FacebookService_reinitialize_args
operator ==	gen-cpp-fb/FacebookService.h	/^  bool operator == (const FacebookService_setOption_args & rhs) const$/;"	f	class:facebook::fb303::FacebookService_setOption_args
operator ==	gen-cpp-fb/FacebookService.h	/^  bool operator == (const FacebookService_setOption_result & \/* rhs *\/) const$/;"	f	class:facebook::fb303::FacebookService_setOption_result
operator ==	gen-cpp-fb/FacebookService.h	/^  bool operator == (const FacebookService_shutdown_args & \/* rhs *\/) const$/;"	f	class:facebook::fb303::FacebookService_shutdown_args
operator ==	windows/Operators.h	/^inline bool operator==(const TEnumIterator&, const TEnumIterator&) {$/;"	f	namespace:apache::thrift
operator bool	concurrency/Mutex.h	/^  operator bool() const { return (mutex_ != NULL); }$/;"	f	class:apache::thrift::concurrency::Guard
oprot_	gen-cpp-fb-s/FacebookService.h	/^  ::apache::thrift::protocol::TProtocol* oprot_;$/;"	m	class:facebook::fb303::FacebookServiceClient
oprot_	gen-cpp-fb-s/FacebookService.h	/^  ::apache::thrift::protocol::TProtocol* oprot_;$/;"	m	class:facebook::fb303::FacebookServiceConcurrentClient
oprot_	gen-cpp-fb/FacebookService.h	/^  ::apache::thrift::protocol::TProtocol* oprot_;$/;"	m	class:facebook::fb303::FacebookServiceClient
oprot_	gen-cpp-fb/FacebookService.h	/^  ::apache::thrift::protocol::TProtocol* oprot_;$/;"	m	class:facebook::fb303::FacebookServiceConcurrentClient
oprot_	qt/TQTcpServer.cpp	/^  shared_ptr<TProtocol> oprot_;$/;"	m	struct:apache::thrift::async::TQTcpServer::ConnectionContext	file:
origin_	transport/THttpTransport.h	/^  std::string origin_;$/;"	m	class:apache::thrift::transport::THttpTransport
output	TProcessor.h	/^  boost::shared_ptr<protocol::TProtocol> output;$/;"	m	struct:apache::thrift::TConnectionInfo
outputProtocolFactory_	server/TServer.h	/^  boost::shared_ptr<TProtocolFactory> outputProtocolFactory_;$/;"	m	class:apache::thrift::server::TServer
outputProtocolFactory_	transport/TFileTransport.h	/^  boost::shared_ptr<TProtocolFactory> outputProtocolFactory_;$/;"	m	class:apache::thrift::transport::TFileProcessor
outputProtocol_	server/TConnectedClient.h	/^  boost::shared_ptr<apache::thrift::protocol::TProtocol> outputProtocol_;$/;"	m	class:apache::thrift::server::TConnectedClient
outputProtocol_	server/TNonblockingServer.cpp	/^  boost::shared_ptr<TProtocol> outputProtocol_;$/;"	m	class:apache::thrift::server::TNonblockingServer::TConnection	file:
outputTransportFactory_	server/TServer.h	/^  boost::shared_ptr<TTransportFactory> outputTransportFactory_;$/;"	m	class:apache::thrift::server::TServer
outputTransport_	server/TNonblockingServer.cpp	/^  boost::shared_ptr<TMemoryBuffer> outputTransport_;$/;"	m	class:apache::thrift::server::TNonblockingServer::TConnection	file:
outputTransport_	transport/TFileTransport.h	/^  boost::shared_ptr<TTransport> outputTransport_;$/;"	m	class:apache::thrift::transport::TFileProcessor
output_	server/TNonblockingServer.cpp	/^  boost::shared_ptr<TProtocol> output_;$/;"	m	class:apache::thrift::server::TNonblockingServer::TConnection::Task	file:
output_finished_	transport/TZlibTransport.h	/^  bool output_finished_;$/;"	m	class:apache::thrift::transport::TZlibTransport
output_recursion_depth_	protocol/TProtocol.h	/^  uint32_t output_recursion_depth_;$/;"	m	class:apache::thrift::protocol::TProtocol
overlap	windows/OverlappedSubmissionThread.h	/^  OVERLAPPED overlap;$/;"	m	struct:apache::thrift::transport::TOverlappedWorkItem
overlappedResults	windows/OverlappedSubmissionThread.cpp	/^uint32_t TOverlappedWorkItem::overlappedResults(bool signal_failure) {$/;"	f	class:apache::thrift::transport::TOverlappedWorkItem
overloadAction_	server/TNonblockingServer.h	/^  TOverloadAction overloadAction_;$/;"	m	class:apache::thrift::server::TNonblockingServer
overloadHysteresis_	server/TNonblockingServer.h	/^  double overloadHysteresis_;$/;"	m	class:apache::thrift::server::TNonblockingServer
overloaded_	server/TNonblockingServer.h	/^  bool overloaded_;$/;"	m	class:apache::thrift::server::TNonblockingServer
overrideDefaultPasswordCallback	transport/TSSLSocket.cpp	/^void TSSLSocketFactory::overrideDefaultPasswordCallback() {$/;"	f	class:apache::thrift::transport::TSSLSocketFactory
ownEventBase_	server/TNonblockingServer.h	/^  bool ownEventBase_;$/;"	m	class:apache::thrift::server::TNonblockingIOThread
ownedMutex_	concurrency/BoostMonitor.cpp	/^  boost::scoped_ptr<Mutex> ownedMutex_;$/;"	m	class:apache::thrift::concurrency::Monitor::Impl	file:
ownedMutex_	concurrency/Monitor.cpp	/^  scoped_ptr<Mutex> ownedMutex_;$/;"	m	class:apache::thrift::concurrency::Monitor::Impl	file:
ownedMutex_	concurrency/StdMonitor.cpp	/^  const std::unique_ptr<Mutex> ownedMutex_;$/;"	m	class:apache::thrift::concurrency::Monitor::Impl	file:
owner_	transport/TBufferTransports.h	/^  bool owner_;$/;"	m	class:apache::thrift::transport::TMemoryBuffer
p	windows/OverlappedSubmissionThread.h	/^  TOverlappedSubmissionThread* p;$/;"	m	class:apache::thrift::transport::TAutoOverlapThread
pChildInterruptSockReader_	transport/TServerSocket.h	/^  boost::shared_ptr<THRIFT_SOCKET> pChildInterruptSockReader_; \/\/ if interruptableChildren_ this is shared with child TSockets$/;"	m	class:apache::thrift::transport::TServerSocket
parseChunkSize	transport/THttpTransport.cpp	/^uint32_t THttpTransport::parseChunkSize(char* line) {$/;"	f	class:apache::thrift::transport::THttpTransport
parseHeader	transport/THttpClient.cpp	/^void THttpClient::parseHeader(char* header) {$/;"	f	class:apache::thrift::transport::THttpClient
parseHeader	transport/THttpServer.cpp	/^void THttpServer::parseHeader(char* header) {$/;"	f	class:apache::thrift::transport::THttpServer
parseStatusLine	transport/THttpClient.cpp	/^bool THttpClient::parseStatusLine(char* status) {$/;"	f	class:apache::thrift::transport::THttpClient
parseStatusLine	transport/THttpServer.cpp	/^bool THttpServer::parseStatusLine(char* status) {$/;"	f	class:apache::thrift::transport::THttpServer
passwordCallback	transport/TSSLSocket.cpp	/^int TSSLSocketFactory::passwordCallback(char* password, int size, int, void* data) {$/;"	f	class:apache::thrift::transport::TSSLSocketFactory
path_	async/TEvhttpClientChannel.h	/^  std::string path_;$/;"	m	class:apache::thrift::async::TEvhttpClientChannel
path_	transport/THttpClient.h	/^  std::string path_;$/;"	m	class:apache::thrift::transport::THttpClient
path_	transport/TServerSocket.h	/^  std::string path_;$/;"	m	class:apache::thrift::transport::TServerSocket
path_	transport/TSocket.h	/^  std::string path_;$/;"	m	class:apache::thrift::transport::TSocket
peek	processor/PeekProcessor.cpp	/^void PeekProcessor::peek(boost::shared_ptr<TProtocol> in, TType ftype, int16_t fid) {$/;"	f	class:apache::thrift::processor::PeekProcessor
peek	protocol/TJSONProtocol.h	/^    uint8_t peek() {$/;"	f	class:apache::thrift::protocol::TJSONProtocol::LookaheadReader
peek	qt/TQIODeviceTransport.cpp	/^bool TQIODeviceTransport::peek() {$/;"	f	class:apache::thrift::transport::TQIODeviceTransport
peek	transport/TBufferTransports.h	/^  bool peek() { return (rBase_ < rBound_) || transport_->peek(); }$/;"	f	class:apache::thrift::transport::TFramedTransport
peek	transport/TBufferTransports.h	/^  bool peek() { return (rBase_ < wBase_); }$/;"	f	class:apache::thrift::transport::TMemoryBuffer
peek	transport/TBufferTransports.h	/^  bool peek() {$/;"	f	class:apache::thrift::transport::TBufferedTransport
peek	transport/TFileTransport.cpp	/^bool TFileTransport::peek() {$/;"	f	class:apache::thrift::transport::TFileTransport
peek	transport/THttpTransport.h	/^  bool peek() { return transport_->peek(); }$/;"	f	class:apache::thrift::transport::THttpTransport
peek	transport/TPipe.cpp	/^bool TPipe::peek() {$/;"	f	class:apache::thrift::transport::TPipe
peek	transport/TSSLSocket.cpp	/^bool TSSLSocket::peek() {$/;"	f	class:apache::thrift::transport::TSSLSocket
peek	transport/TShortReadTransport.h	/^  bool peek() { return transport_->peek(); }$/;"	f	class:apache::thrift::transport::test::TShortReadTransport
peek	transport/TSocket.cpp	/^bool TSocket::peek() {$/;"	f	class:apache::thrift::transport::TSocket
peek	transport/TTransport.h	/^  virtual bool peek() { return isOpen(); }$/;"	f	class:apache::thrift::transport::TTransport
peek	transport/TTransportUtils.cpp	/^bool TPipedFileReaderTransport::peek() {$/;"	f	class:apache::thrift::transport::TPipedFileReaderTransport
peek	transport/TTransportUtils.h	/^  bool peek() {$/;"	f	class:apache::thrift::transport::TPipedTransport
peek	transport/TZlibTransport.cpp	/^bool TZlibTransport::peek() {$/;"	f	class:apache::thrift::transport::TZlibTransport
peekBuffer	processor/PeekProcessor.cpp	/^void PeekProcessor::peekBuffer(uint8_t* buffer, uint32_t size) {$/;"	f	class:apache::thrift::processor::PeekProcessor
peekEnd	processor/PeekProcessor.cpp	/^void PeekProcessor::peekEnd() {$/;"	f	class:apache::thrift::processor::PeekProcessor
peekName	processor/PeekProcessor.cpp	/^void PeekProcessor::peekName(const std::string& fname) {$/;"	f	class:apache::thrift::processor::PeekProcessor
peerAddress_	transport/TSocket.h	/^  std::string peerAddress_;$/;"	m	class:apache::thrift::transport::TSocket
peerHost_	transport/TSocket.h	/^  std::string peerHost_;$/;"	m	class:apache::thrift::transport::TSocket
peerPort_	transport/TSocket.h	/^  int peerPort_;$/;"	m	class:apache::thrift::transport::TSocket
pendingTaskCount	concurrency/ThreadManager.cpp	/^  size_t pendingTaskCount() const {$/;"	f	class:apache::thrift::concurrency::ThreadManager::Impl
pendingTaskCountMax	concurrency/ThreadManager.cpp	/^  size_t pendingTaskCountMax() const {$/;"	f	class:apache::thrift::concurrency::ThreadManager::Impl
pendingTaskCountMax	concurrency/ThreadManager.cpp	/^  void pendingTaskCountMax(const size_t value) {$/;"	f	class:apache::thrift::concurrency::ThreadManager::Impl
pendingTaskCountMax_	concurrency/ThreadManager.cpp	/^  const size_t pendingTaskCountMax_;$/;"	m	class:apache::thrift::concurrency::SimpleThreadManager	file:
pendingTaskCountMax_	concurrency/ThreadManager.cpp	/^  size_t pendingTaskCountMax_;$/;"	m	class:apache::thrift::concurrency::ThreadManager::Impl	file:
performRecovery	transport/TFileTransport.cpp	/^void TFileTransport::performRecovery() {$/;"	f	class:apache::thrift::transport::TFileTransport
perror	TOutput.cpp	/^void TOutput::perror(const char* message, int errno_copy) {$/;"	f	class:apache::thrift::TOutput
perror	TOutput.h	/^  inline void perror(const std::string& message, int errno_copy) {$/;"	f	class:apache::thrift::TOutput
pfact_	async/TAsyncProtocolProcessor.h	/^  boost::shared_ptr<apache::thrift::protocol::TProtocolFactory> pfact_;$/;"	m	class:apache::thrift::async::TAsyncProtocolProcessor
pfact_	qt/TQTcpServer.h	/^  boost::shared_ptr<apache::thrift::protocol::TProtocolFactory> pfact_;$/;"	m	class:apache::thrift::async::TQTcpServer
pipeOnRead_	transport/TTransportUtils.h	/^  bool pipeOnRead_;$/;"	m	class:apache::thrift::transport::TPipedTransport
pipeOnWrite_	transport/TTransportUtils.h	/^  bool pipeOnWrite_;$/;"	m	class:apache::thrift::transport::TPipedTransport
pipe_protect_	transport/TPipeServer.cpp	/^  TCriticalSection pipe_protect_;$/;"	m	class:apache::thrift::transport::TNamedPipeServer	file:
pipe_read	transport/TPipe.cpp	/^uint32_t pipe_read(HANDLE pipe, uint8_t* buf, uint32_t len) {$/;"	f	namespace:apache::thrift::transport
pipe_write	transport/TPipe.cpp	/^void pipe_write(HANDLE pipe, const uint8_t* buf, uint32_t len) {$/;"	f	namespace:apache::thrift::transport
pipedProtocol_	processor/PeekProcessor.h	/^  boost::shared_ptr<apache::thrift::protocol::TProtocol> pipedProtocol_;$/;"	m	class:apache::thrift::processor::PeekProcessor
pipename_	transport/TPipe.h	/^  std::string pipename_;$/;"	m	class:apache::thrift::transport::TPipe
pipename_	transport/TPipeServer.cpp	/^  std::string pipename_;$/;"	m	class:apache::thrift::transport::TNamedPipeServer	file:
pipename_	transport/TPipeServer.h	/^  std::string pipename_;$/;"	m	class:apache::thrift::transport::TPipeServer
piprot_	gen-cpp-fb-s/FacebookService.h	/^  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;$/;"	m	class:facebook::fb303::FacebookServiceClient
piprot_	gen-cpp-fb-s/FacebookService.h	/^  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;$/;"	m	class:facebook::fb303::FacebookServiceConcurrentClient
piprot_	gen-cpp-fb/FacebookService.h	/^  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;$/;"	m	class:facebook::fb303::FacebookServiceClient
piprot_	gen-cpp-fb/FacebookService.h	/^  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;$/;"	m	class:facebook::fb303::FacebookServiceConcurrentClient
piprot_	processor/StatsProcessor.h	/^  boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot_;$/;"	m	class:apache::thrift::processor::StatsProcessor
placeholders	cxxfunctional.h	/^    namespace placeholders {$/;"	n	namespace:apache::thrift::stdcxx
policy_	concurrency/PosixThreadFactory.cpp	/^  POLICY policy_;$/;"	m	class:apache::thrift::concurrency::PosixThreadFactory::Impl	file:
policy_	concurrency/PosixThreadFactory.cpp	/^  int policy_;$/;"	m	class:apache::thrift::concurrency::PthreadThread	file:
popContext	protocol/TJSONProtocol.cpp	/^void TJSONProtocol::popContext() {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
poprot_	gen-cpp-fb-s/FacebookService.h	/^  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;$/;"	m	class:facebook::fb303::FacebookServiceClient
poprot_	gen-cpp-fb-s/FacebookService.h	/^  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;$/;"	m	class:facebook::fb303::FacebookServiceConcurrentClient
poprot_	gen-cpp-fb/FacebookService.h	/^  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;$/;"	m	class:facebook::fb303::FacebookServiceClient
poprot_	gen-cpp-fb/FacebookService.h	/^  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;$/;"	m	class:facebook::fb303::FacebookServiceConcurrentClient
port_	server/TNonblockingServer.h	/^  int port_;$/;"	m	class:apache::thrift::server::TNonblockingServer
port_	transport/TServerSocket.h	/^  int port_;$/;"	m	class:apache::thrift::transport::TServerSocket
port_	transport/TSocket.h	/^  int port_;$/;"	m	class:apache::thrift::transport::TSocket
port_	transport/TSocketPool.h	/^  int port_;$/;"	m	class:apache::thrift::transport::TSocketPoolServer
postRead	TProcessor.h	/^  virtual void postRead(void* ctx, const char* fn_name, uint32_t bytes) {$/;"	f	class:apache::thrift::TProcessorEventHandler
postWrite	TProcessor.h	/^  virtual void postWrite(void* ctx, const char* fn_name, uint32_t bytes) {$/;"	f	class:apache::thrift::TProcessorEventHandler
preRead	TProcessor.h	/^  virtual void preRead(void* ctx, const char* fn_name) {$/;"	f	class:apache::thrift::TProcessorEventHandler
preServe	server/TServer.h	/^  virtual void preServe() {}$/;"	f	class:apache::thrift::server::TServerEventHandler
preWrite	TProcessor.h	/^  virtual void preWrite(void* ctx, const char* fn_name) {$/;"	f	class:apache::thrift::TProcessorEventHandler
print	VirtualProfiling.cpp	/^  void print(FILE* f, int indent = 0, int start = 0) const {$/;"	f	class:apache::thrift::Backtrace
printAndPassToBuffer	processor/StatsProcessor.h	/^  void printAndPassToBuffer(apache::thrift::protocol::TType ftype) {$/;"	f	class:apache::thrift::processor::StatsProcessor
print_	processor/StatsProcessor.h	/^  bool print_;$/;"	m	class:apache::thrift::processor::StatsProcessor
printf	TOutput.cpp	/^void TOutput::printf(const char* message, ...) {$/;"	f	class:apache::thrift::TOutput
priority_	concurrency/PosixThreadFactory.cpp	/^  PRIORITY priority_;$/;"	m	class:apache::thrift::concurrency::PosixThreadFactory::Impl	file:
priority_	concurrency/PosixThreadFactory.cpp	/^  int priority_;$/;"	m	class:apache::thrift::concurrency::PthreadThread	file:
process	TDispatchProcessor.h	/^  virtual bool process(boost::shared_ptr<protocol::TProtocol> in,$/;"	f	class:apache::thrift::TDispatchProcessor
process	TDispatchProcessor.h	/^  virtual bool process(boost::shared_ptr<protocol::TProtocol> in,$/;"	f	class:apache::thrift::TDispatchProcessorT
process	TProcessor.h	/^  bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> io, void* connectionContext) {$/;"	f	class:apache::thrift::TProcessor
process	async/TAsyncDispatchProcessor.h	/^  virtual void process(apache::thrift::stdcxx::function<void(bool success)> _return,$/;"	f	class:apache::thrift::async::TAsyncDispatchProcessor
process	async/TAsyncDispatchProcessor.h	/^  virtual void process(apache::thrift::stdcxx::function<void(bool success)> _return,$/;"	f	class:apache::thrift::async::TAsyncDispatchProcessorT
process	async/TAsyncProcessor.h	/^  void process(apache::thrift::stdcxx::function<void(bool success)> _return,$/;"	f	class:apache::thrift::async::TAsyncProcessor
process	async/TAsyncProtocolProcessor.cpp	/^void TAsyncProtocolProcessor::process(apache::thrift::stdcxx::function<void(bool healthy)> _return,$/;"	f	class:apache::thrift::async::TAsyncProtocolProcessor
process	async/TEvhttpServer.cpp	/^void TEvhttpServer::process(struct evhttp_request* req) {$/;"	f	class:apache::thrift::async::TEvhttpServer
process	processor/PeekProcessor.cpp	/^bool PeekProcessor::process(boost::shared_ptr<TProtocol> in,$/;"	f	class:apache::thrift::processor::PeekProcessor
process	processor/StatsProcessor.h	/^  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot,$/;"	f	class:apache::thrift::processor::StatsProcessor
process	processor/TMultiplexedProcessor.h	/^  bool process(shared_ptr<protocol::TProtocol> in,$/;"	f	class:apache::thrift::TMultiplexedProcessor
process	transport/TFileTransport.cpp	/^void TFileProcessor::process(uint32_t numEvents, bool tail) {$/;"	f	class:apache::thrift::transport::TFileProcessor
process	windows/OverlappedSubmissionThread.cpp	/^bool TOverlappedWorkItem::process() {$/;"	f	class:apache::thrift::transport::TOverlappedWorkItem
processChunk	transport/TFileTransport.cpp	/^void TFileProcessor::processChunk() {$/;"	f	class:apache::thrift::transport::TFileProcessor
processContext	server/TServer.h	/^  virtual void processContext(void* serverContext, boost::shared_ptr<TTransport> transport) {$/;"	f	class:apache::thrift::server::TServerEventHandler
processFast	TDispatchProcessor.h	/^  bool processFast(Protocol_* in, Protocol_* out, void* connectionContext) {$/;"	f	class:apache::thrift::TDispatchProcessorT
processFast	async/TAsyncDispatchProcessor.h	/^  void processFast(apache::thrift::stdcxx::function<void(bool success)> _return,$/;"	f	class:apache::thrift::async::TAsyncDispatchProcessorT
processIncoming	qt/TQTcpServer.cpp	/^void TQTcpServer::processIncoming() {$/;"	f	class:apache::thrift::async::TQTcpServer
processMap_	gen-cpp-fb-s/FacebookService.h	/^  ProcessMap processMap_;$/;"	m	class:facebook::fb303::FacebookServiceProcessor
processMap_	gen-cpp-fb/FacebookService.h	/^  ProcessMap processMap_;$/;"	m	class:facebook::fb303::FacebookServiceProcessor
process_aliveSince	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceProcessor::process_aliveSince(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)$/;"	f	class:facebook::fb303::FacebookServiceProcessor
process_getCounter	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceProcessor::process_getCounter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)$/;"	f	class:facebook::fb303::FacebookServiceProcessor
process_getCounters	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceProcessor::process_getCounters(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)$/;"	f	class:facebook::fb303::FacebookServiceProcessor
process_getCpuProfile	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceProcessor::process_getCpuProfile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)$/;"	f	class:facebook::fb303::FacebookServiceProcessor
process_getName	gen-cpp-fb-s/FacebookService.cpp	/^void FacebookServiceProcessor::process_getName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)$/;"	f	class:facebook::fb303::FacebookServiceProcessor
process_getName	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceProcessor::process_getName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)$/;"	f	class:facebook::fb303::FacebookServiceProcessor
process_getOption	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceProcessor::process_getOption(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)$/;"	f	class:facebook::fb303::FacebookServiceProcessor
process_getOptions	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceProcessor::process_getOptions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)$/;"	f	class:facebook::fb303::FacebookServiceProcessor
process_getStatus	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceProcessor::process_getStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)$/;"	f	class:facebook::fb303::FacebookServiceProcessor
process_getStatusDetails	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceProcessor::process_getStatusDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)$/;"	f	class:facebook::fb303::FacebookServiceProcessor
process_getVersion	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceProcessor::process_getVersion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)$/;"	f	class:facebook::fb303::FacebookServiceProcessor
process_reinitialize	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceProcessor::process_reinitialize(int32_t, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol*, void* callContext)$/;"	f	class:facebook::fb303::FacebookServiceProcessor
process_setOption	gen-cpp-fb-s/FacebookService.cpp	/^void FacebookServiceProcessor::process_setOption(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)$/;"	f	class:facebook::fb303::FacebookServiceProcessor
process_setOption	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceProcessor::process_setOption(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)$/;"	f	class:facebook::fb303::FacebookServiceProcessor
process_shutdown	gen-cpp-fb-s/FacebookService.cpp	/^void FacebookServiceProcessor::process_shutdown(int32_t, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol*, void* callContext)$/;"	f	class:facebook::fb303::FacebookServiceProcessor
process_shutdown	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceProcessor::process_shutdown(int32_t, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol*, void* callContext)$/;"	f	class:facebook::fb303::FacebookServiceProcessor
processor	processor/PeekProcessor.cpp	/^namespace processor {$/;"	n	namespace:apache::thrift	file:
processor	processor/PeekProcessor.h	/^namespace processor {$/;"	n	namespace:apache::thrift
processor	processor/StatsProcessor.h	/^namespace processor {$/;"	n	namespace:apache::thrift
processorFactory_	server/TServer.h	/^  boost::shared_ptr<TProcessorFactory> processorFactory_;$/;"	m	class:apache::thrift::server::TServer
processor_	TProcessor.h	/^  boost::shared_ptr<TProcessor> processor_;$/;"	m	class:apache::thrift::TSingletonProcessorFactory
processor_	async/TEvhttpServer.h	/^  boost::shared_ptr<TAsyncBufferProcessor> processor_;$/;"	m	class:apache::thrift::async::TEvhttpServer
processor_	qt/TQTcpServer.h	/^  boost::shared_ptr<TAsyncProcessor> processor_;$/;"	m	class:apache::thrift::async::TQTcpServer
processor_	server/TConnectedClient.h	/^  boost::shared_ptr<apache::thrift::TProcessor> processor_;$/;"	m	class:apache::thrift::server::TConnectedClient
processor_	server/TNonblockingServer.cpp	/^  boost::shared_ptr<TProcessor> processor_;$/;"	m	class:apache::thrift::server::TNonblockingServer::TConnection	file:
processor_	server/TNonblockingServer.cpp	/^  boost::shared_ptr<TProcessor> processor_;$/;"	m	class:apache::thrift::server::TNonblockingServer::TConnection::Task	file:
processor_	transport/TFileTransport.h	/^  boost::shared_ptr<TProcessor> processor_;$/;"	m	class:apache::thrift::transport::TFileProcessor
profileDurationInSec	gen-cpp-fb/FacebookService.h	/^  bool profileDurationInSec :1;$/;"	m	struct:facebook::fb303::_FacebookService_getCpuProfile_args__isset
profileDurationInSec	gen-cpp-fb/FacebookService.h	/^  const int32_t* profileDurationInSec;$/;"	m	class:facebook::fb303::FacebookService_getCpuProfile_pargs
profileDurationInSec	gen-cpp-fb/FacebookService.h	/^  int32_t profileDurationInSec;$/;"	m	class:facebook::fb303::FacebookService_getCpuProfile_args
profileTime_	concurrency/Mutex.cpp	/^  mutable int64_t profileTime_;$/;"	m	class:apache::thrift::concurrency::Mutex::impl	file:
profileTime_	concurrency/Mutex.cpp	/^  mutable int64_t profileTime_;$/;"	m	class:apache::thrift::concurrency::ReadWriteMutex::impl	file:
profile_generic_protocol	VirtualProfiling.cpp	/^void profile_generic_protocol(const std::type_info& template_type,$/;"	f	namespace:apache::thrift
profile_print_info	VirtualProfiling.cpp	/^void profile_print_info() {$/;"	f	namespace:apache::thrift
profile_print_info	VirtualProfiling.cpp	/^void profile_print_info(FILE* f) {$/;"	f	namespace:apache::thrift
profile_virtual_call	VirtualProfiling.cpp	/^void profile_virtual_call(const std::type_info& type) {$/;"	f	namespace:apache::thrift
profile_write_pprof	VirtualProfiling.cpp	/^void profile_write_pprof(FILE* gen_calls_f, FILE* virtual_calls_f) {$/;"	f	namespace:apache::thrift
profile_write_pprof_file	VirtualProfiling.cpp	/^static void profile_write_pprof_file(FILE* f, BacktraceMap const& map) {$/;"	f	namespace:apache::thrift
prot_	protocol/TProtocol.h	/^  TProtocol &prot_;$/;"	m	struct:apache::thrift::protocol::TInputRecursionTracker
prot_	protocol/TProtocol.h	/^  TProtocol &prot_;$/;"	m	struct:apache::thrift::protocol::TOutputRecursionTracker
protocol	TApplicationException.h	/^namespace protocol {$/;"	n	namespace:apache::thrift
protocol	processor/TMultiplexedProcessor.h	/^namespace protocol {$/;"	n	namespace:apache::thrift
protocol	protocol/TBase64Utils.cpp	/^namespace protocol {$/;"	n	namespace:apache::thrift	file:
protocol	protocol/TBase64Utils.h	/^namespace protocol {$/;"	n	namespace:apache::thrift
protocol	protocol/TBinaryProtocol.h	/^namespace protocol {$/;"	n	namespace:apache::thrift
protocol	protocol/TBinaryProtocol.tcc	/^namespace protocol {$/;"	n	namespace:apache::thrift	file:
protocol	protocol/TCompactProtocol.h	/^namespace protocol {$/;"	n	namespace:apache::thrift
protocol	protocol/TCompactProtocol.tcc	/^namespace apache { namespace thrift { namespace protocol {$/;"	n	namespace:apache::thrift	file:
protocol	protocol/TDebugProtocol.cpp	/^namespace protocol {$/;"	n	namespace:apache::thrift	file:
protocol	protocol/TDebugProtocol.h	/^namespace protocol {$/;"	n	namespace:apache::thrift
protocol	protocol/TJSONProtocol.cpp	/^namespace protocol {$/;"	n	namespace:apache::thrift	file:
protocol	protocol/TJSONProtocol.h	/^namespace protocol {$/;"	n	namespace:apache::thrift
protocol	protocol/TMultiplexedProtocol.cpp	/^namespace protocol {$/;"	n	namespace:apache::thrift	file:
protocol	protocol/TMultiplexedProtocol.h	/^namespace protocol {$/;"	n	namespace:apache::thrift
protocol	protocol/TProtocol.cpp	/^namespace protocol {$/;"	n	namespace:apache::thrift	file:
protocol	protocol/TProtocol.h	/^namespace protocol {$/;"	n	namespace:apache::thrift
protocol	protocol/TProtocolDecorator.h	/^  shared_ptr<TProtocol> protocol;$/;"	m	class:apache::thrift::protocol::TProtocolDecorator
protocol	protocol/TProtocolDecorator.h	/^namespace protocol {$/;"	n	namespace:apache::thrift
protocol	protocol/TProtocolException.h	/^namespace protocol {$/;"	n	namespace:apache::thrift
protocol	protocol/TProtocolTap.h	/^namespace protocol {$/;"	n	namespace:apache::thrift
protocol	protocol/TVirtualProtocol.h	/^namespace protocol {$/;"	n	namespace:apache::thrift
protocol	qt/TQTcpServer.h	/^namespace protocol {$/;"	n	namespace:apache::thrift
pseudo_sync_read	transport/TPipe.cpp	/^uint32_t pseudo_sync_read(HANDLE pipe, HANDLE event, uint8_t* buf, uint32_t len) {$/;"	f	namespace:apache::thrift::transport
pseudo_sync_write	transport/TPipe.cpp	/^void pseudo_sync_write(HANDLE pipe, HANDLE event, const uint8_t* buf, uint32_t len) {$/;"	f	namespace:apache::thrift::transport
pthread_	concurrency/PosixThreadFactory.cpp	/^  pthread_t pthread_;$/;"	m	class:apache::thrift::concurrency::PthreadThread	file:
pthread_cond_	concurrency/Monitor.cpp	/^  mutable pthread_cond_t pthread_cond_;$/;"	m	class:apache::thrift::concurrency::Monitor::Impl	file:
pthread_func_wrapper	concurrency/FunctionRunner.h	/^  static void pthread_func_wrapper(PthreadFuncPtr func, void* arg) {$/;"	f	class:apache::thrift::concurrency::FunctionRunner
pthread_mutex_	concurrency/Mutex.cpp	/^  mutable pthread_mutex_t pthread_mutex_;$/;"	m	class:apache::thrift::concurrency::Mutex::impl	file:
ptrans_	protocol/TProtocol.h	/^  boost::shared_ptr<TTransport> ptrans_;$/;"	m	class:apache::thrift::protocol::TProtocol
pushContext	protocol/TJSONProtocol.cpp	/^void TJSONProtocol::pushContext(boost::shared_ptr<TJSONContext> c) {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
rBase_	transport/TBufferTransports.h	/^  uint8_t* rBase_; \/\/开始读的位置$/;"	m	class:apache::thrift::transport::TBufferBase
rBound_	transport/TBufferTransports.h	/^  uint8_t* rBound_; \/\/读界限$/;"	m	class:apache::thrift::transport::TBufferBase
rBufSize_	transport/TBufferTransports.h	/^  uint32_t rBufSize_;$/;"	m	class:apache::thrift::transport::TBufferedTransport
rBufSize_	transport/TBufferTransports.h	/^  uint32_t rBufSize_;$/;"	m	class:apache::thrift::transport::TFramedTransport
rBufSize_	transport/TTransportUtils.h	/^  uint32_t rBufSize_;$/;"	m	class:apache::thrift::transport::TPipedTransport
rBuf_	transport/TBufferTransports.h	/^  boost::scoped_array<uint8_t> rBuf_;$/;"	m	class:apache::thrift::transport::TBufferedTransport
rBuf_	transport/TBufferTransports.h	/^  boost::scoped_array<uint8_t> rBuf_;$/;"	m	class:apache::thrift::transport::TFramedTransport
rBuf_	transport/TTransportUtils.h	/^  uint8_t* rBuf_;$/;"	m	class:apache::thrift::transport::TPipedTransport
rLen_	transport/TTransportUtils.h	/^  uint32_t rLen_;$/;"	m	class:apache::thrift::transport::TPipedTransport
rPos_	transport/TTransportUtils.h	/^  uint32_t rPos_;$/;"	m	class:apache::thrift::transport::TPipedTransport
randomize	transport/TSSLSocket.cpp	/^void TSSLSocketFactory::randomize() {$/;"	f	class:apache::thrift::transport::TSSLSocketFactory
randomize_	transport/TSocketPool.h	/^  bool randomize_;$/;"	m	class:apache::thrift::transport::TSocketPool
read	TApplicationException.cpp	/^uint32_t TApplicationException::read(apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:apache::thrift::TApplicationException
read	gen-cpp-fb-s/FacebookService.cpp	/^uint32_t FacebookService_getName_args::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:facebook::fb303::FacebookService_getName_args
read	gen-cpp-fb-s/FacebookService.cpp	/^uint32_t FacebookService_getName_presult::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:facebook::fb303::FacebookService_getName_presult
read	gen-cpp-fb-s/FacebookService.cpp	/^uint32_t FacebookService_getName_result::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:facebook::fb303::FacebookService_getName_result
read	gen-cpp-fb-s/FacebookService.cpp	/^uint32_t FacebookService_setOption_args::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:facebook::fb303::FacebookService_setOption_args
read	gen-cpp-fb-s/FacebookService.cpp	/^uint32_t FacebookService_setOption_presult::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:facebook::fb303::FacebookService_setOption_presult
read	gen-cpp-fb-s/FacebookService.cpp	/^uint32_t FacebookService_setOption_result::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:facebook::fb303::FacebookService_setOption_result
read	gen-cpp-fb-s/FacebookService.cpp	/^uint32_t FacebookService_shutdown_args::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:facebook::fb303::FacebookService_shutdown_args
read	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_aliveSince_args::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:facebook::fb303::FacebookService_aliveSince_args
read	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_aliveSince_presult::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:facebook::fb303::FacebookService_aliveSince_presult
read	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_aliveSince_result::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:facebook::fb303::FacebookService_aliveSince_result
read	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getCounter_args::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:facebook::fb303::FacebookService_getCounter_args
read	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getCounter_presult::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:facebook::fb303::FacebookService_getCounter_presult
read	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getCounter_result::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:facebook::fb303::FacebookService_getCounter_result
read	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getCounters_args::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:facebook::fb303::FacebookService_getCounters_args
read	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getCounters_presult::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:facebook::fb303::FacebookService_getCounters_presult
read	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getCounters_result::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:facebook::fb303::FacebookService_getCounters_result
read	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getCpuProfile_args::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:facebook::fb303::FacebookService_getCpuProfile_args
read	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getCpuProfile_presult::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:facebook::fb303::FacebookService_getCpuProfile_presult
read	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getCpuProfile_result::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:facebook::fb303::FacebookService_getCpuProfile_result
read	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getName_args::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:facebook::fb303::FacebookService_getName_args
read	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getName_presult::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:facebook::fb303::FacebookService_getName_presult
read	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getName_result::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:facebook::fb303::FacebookService_getName_result
read	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getOption_args::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:facebook::fb303::FacebookService_getOption_args
read	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getOption_presult::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:facebook::fb303::FacebookService_getOption_presult
read	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getOption_result::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:facebook::fb303::FacebookService_getOption_result
read	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getOptions_args::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:facebook::fb303::FacebookService_getOptions_args
read	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getOptions_presult::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:facebook::fb303::FacebookService_getOptions_presult
read	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getOptions_result::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:facebook::fb303::FacebookService_getOptions_result
read	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getStatusDetails_args::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:facebook::fb303::FacebookService_getStatusDetails_args
read	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getStatusDetails_presult::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:facebook::fb303::FacebookService_getStatusDetails_presult
read	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getStatusDetails_result::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:facebook::fb303::FacebookService_getStatusDetails_result
read	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getStatus_args::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:facebook::fb303::FacebookService_getStatus_args
read	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getStatus_presult::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:facebook::fb303::FacebookService_getStatus_presult
read	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getStatus_result::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:facebook::fb303::FacebookService_getStatus_result
read	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getVersion_args::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:facebook::fb303::FacebookService_getVersion_args
read	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getVersion_presult::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:facebook::fb303::FacebookService_getVersion_presult
read	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getVersion_result::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:facebook::fb303::FacebookService_getVersion_result
read	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_reinitialize_args::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:facebook::fb303::FacebookService_reinitialize_args
read	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_setOption_args::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:facebook::fb303::FacebookService_setOption_args
read	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_setOption_presult::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:facebook::fb303::FacebookService_setOption_presult
read	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_setOption_result::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:facebook::fb303::FacebookService_setOption_result
read	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_shutdown_args::read(::apache::thrift::protocol::TProtocol* iprot) {$/;"	f	class:facebook::fb303::FacebookService_shutdown_args
read	protocol/TJSONProtocol.cpp	/^  uint32_t read(TJSONProtocol::LookaheadReader& reader) {$/;"	f	class:apache::thrift::protocol::JSONListContext
read	protocol/TJSONProtocol.cpp	/^  uint32_t read(TJSONProtocol::LookaheadReader& reader) {$/;"	f	class:apache::thrift::protocol::JSONPairContext
read	protocol/TJSONProtocol.cpp	/^  virtual uint32_t read(TJSONProtocol::LookaheadReader& reader) {$/;"	f	class:apache::thrift::protocol::TJSONContext
read	protocol/TJSONProtocol.h	/^    uint8_t read() {$/;"	f	class:apache::thrift::protocol::TJSONProtocol::LookaheadReader
read	qt/TQIODeviceTransport.cpp	/^uint32_t TQIODeviceTransport::read(uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::TQIODeviceTransport
read	transport/TBufferTransports.h	/^  uint32_t read(uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::TBufferBase
read	transport/TFDTransport.cpp	/^uint32_t TFDTransport::read(uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::TFDTransport
read	transport/TFileTransport.cpp	/^uint32_t TFileTransport::read(uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::TFileTransport
read	transport/THttpTransport.cpp	/^uint32_t THttpTransport::read(uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::THttpTransport
read	transport/TPipe.cpp	/^  virtual uint32_t read(uint8_t* buf, uint32_t len) { return pipe_read(PipeRd_.h, buf, len); }$/;"	f	class:apache::thrift::transport::TAnonPipeImpl
read	transport/TPipe.cpp	/^  virtual uint32_t read(uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::TNamedPipeImpl
read	transport/TPipe.cpp	/^uint32_t TPipe::read(uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::TPipe
read	transport/TPipe.cpp	/^uint32_t TWaitableNamedPipeImpl::read(uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::TWaitableNamedPipeImpl
read	transport/TSSLSocket.cpp	/^uint32_t TSSLSocket::read(uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::TSSLSocket
read	transport/TShortReadTransport.h	/^  uint32_t read(uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::test::TShortReadTransport
read	transport/TSocket.cpp	/^uint32_t TSocket::read(uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::TSocket
read	transport/TTransport.h	/^  uint32_t read(uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::TTransport
read	transport/TTransportUtils.cpp	/^uint32_t TPipedFileReaderTransport::read(uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::TPipedFileReaderTransport
read	transport/TTransportUtils.cpp	/^uint32_t TPipedTransport::read(uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::TPipedTransport
read	transport/TVirtualTransport.h	/^  uint32_t read(uint8_t* buf, uint32_t len) { return this->TTransport::read_virt(buf, len); }$/;"	f	class:apache::thrift::transport::TTransportDefaults
read	transport/TZlibTransport.cpp	/^uint32_t TZlibTransport::read(uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::TZlibTransport
readAll	qt/TQIODeviceTransport.cpp	/^uint32_t TQIODeviceTransport::readAll(uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::TQIODeviceTransport
readAll	transport/TBufferTransports.h	/^  uint32_t readAll(uint8_t* buf, uint32_t len) { return TBufferBase::readAll(buf, len); }$/;"	f	class:apache::thrift::transport::TBufferedTransport
readAll	transport/TBufferTransports.h	/^  uint32_t readAll(uint8_t* buf, uint32_t len) { return TBufferBase::readAll(buf, len); }$/;"	f	class:apache::thrift::transport::TFramedTransport
readAll	transport/TBufferTransports.h	/^  uint32_t readAll(uint8_t* buf, uint32_t len) { return TBufferBase::readAll(buf, len); }$/;"	f	class:apache::thrift::transport::TMemoryBuffer
readAll	transport/TBufferTransports.h	/^  uint32_t readAll(uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::TBufferBase
readAll	transport/TFileTransport.cpp	/^uint32_t TFileTransport::readAll(uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::TFileTransport
readAll	transport/TTransport.h	/^  uint32_t readAll(uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::TTransport
readAll	transport/TTransport.h	/^uint32_t readAll(Transport_& trans, uint8_t* buf, uint32_t len) {$/;"	f	namespace:apache::thrift::transport
readAll	transport/TTransportUtils.cpp	/^uint32_t TPipedFileReaderTransport::readAll(uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::TPipedFileReaderTransport
readAll	transport/TVirtualTransport.h	/^  uint32_t readAll(uint8_t* buf, uint32_t len) { return this->TTransport::readAll_virt(buf, len); }$/;"	f	class:apache::thrift::transport::TTransportDefaults
readAll	transport/TVirtualTransport.h	/^  uint32_t readAll(uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::TVirtualTransport
readAll_virt	transport/TFileTransport.h	/^  virtual uint32_t readAll_virt(uint8_t* buf, uint32_t len) { return this->readAll(buf, len); }$/;"	f	class:apache::thrift::transport::TFileTransport
readAll_virt	transport/TTransport.h	/^  virtual uint32_t readAll_virt(uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::TTransport
readAll_virt	transport/TTransportUtils.h	/^  virtual uint32_t readAll_virt(uint8_t* buf, uint32_t len) { return this->readAll(buf, len); }$/;"	f	class:apache::thrift::transport::TPipedFileReaderTransport
readAll_virt	transport/TVirtualTransport.h	/^  virtual uint32_t readAll_virt(uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::TVirtualTransport
readAppendToString	transport/TBufferTransports.cpp	/^uint32_t TMemoryBuffer::readAppendToString(std::string& str, uint32_t len) {$/;"	f	class:apache::thrift::transport::TMemoryBuffer
readAsString	transport/TBufferTransports.h	/^  std::string readAsString(uint32_t len) {$/;"	f	class:apache::thrift::transport::TMemoryBuffer
readAvail	transport/TZlibTransport.cpp	/^inline int TZlibTransport::readAvail() {$/;"	f	class:apache::thrift::transport::TZlibTransport
readBinary	protocol/TBinaryProtocol.tcc	/^uint32_t TBinaryProtocolT<Transport_, ByteOrder_>::readBinary(std::string& str) {$/;"	f	class:apache::thrift::protocol::TBinaryProtocolT
readBinary	protocol/TCompactProtocol.tcc	/^uint32_t TCompactProtocolT<Transport_>::readBinary(std::string& str) {$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
readBinary	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::readBinary(std::string& str) {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
readBinary	protocol/TProtocol.h	/^  uint32_t readBinary(std::string& str) {$/;"	f	class:apache::thrift::protocol::TProtocol
readBinary	protocol/TProtocolTap.h	/^  uint32_t readBinary(std::string& str) {$/;"	f	class:apache::thrift::protocol::TProtocolTap
readBinary	protocol/TVirtualProtocol.h	/^  uint32_t readBinary(std::string& str) {$/;"	f	class:apache::thrift::protocol::TProtocolDefaults
readBinary_virt	protocol/TProtocolDecorator.h	/^  virtual uint32_t readBinary_virt(std::string& str) { return protocol->readBinary(str); }$/;"	f	class:apache::thrift::protocol::TProtocolDecorator
readBinary_virt	protocol/TVirtualProtocol.h	/^  virtual uint32_t readBinary_virt(std::string& str) {$/;"	f	class:apache::thrift::protocol::TVirtualProtocol
readBool	protocol/TBinaryProtocol.tcc	/^uint32_t TBinaryProtocolT<Transport_, ByteOrder_>::readBool(bool& value) {$/;"	f	class:apache::thrift::protocol::TBinaryProtocolT
readBool	protocol/TCompactProtocol.tcc	/^uint32_t TCompactProtocolT<Transport_>::readBool(bool& value) {$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
readBool	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::readBool(bool& value) {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
readBool	protocol/TProtocol.h	/^  uint32_t readBool(bool& value) {$/;"	f	class:apache::thrift::protocol::TProtocol
readBool	protocol/TProtocol.h	/^  uint32_t readBool(std::vector<bool>::reference value) {$/;"	f	class:apache::thrift::protocol::TProtocol
readBool	protocol/TProtocolTap.h	/^  uint32_t readBool(bool& value) {$/;"	f	class:apache::thrift::protocol::TProtocolTap
readBool	protocol/TVirtualProtocol.h	/^  uint32_t readBool(bool& value) {$/;"	f	class:apache::thrift::protocol::TProtocolDefaults
readBool	protocol/TVirtualProtocol.h	/^  uint32_t readBool(std::vector<bool>::reference value) {$/;"	f	class:apache::thrift::protocol::TProtocolDefaults
readBool	protocol/TVirtualProtocol.h	/^  uint32_t readBool(std::vector<bool>::reference value) {$/;"	f	class:apache::thrift::protocol::TVirtualProtocol
readBool_virt	protocol/TProtocolDecorator.h	/^  virtual uint32_t readBool_virt(bool& value) { return protocol->readBool(value); }$/;"	f	class:apache::thrift::protocol::TProtocolDecorator
readBool_virt	protocol/TProtocolDecorator.h	/^  virtual uint32_t readBool_virt(std::vector<bool>::reference value) {$/;"	f	class:apache::thrift::protocol::TProtocolDecorator
readBool_virt	protocol/TVirtualProtocol.h	/^  virtual uint32_t readBool_virt(bool& value) {$/;"	f	class:apache::thrift::protocol::TVirtualProtocol
readBool_virt	protocol/TVirtualProtocol.h	/^  virtual uint32_t readBool_virt(std::vector<bool>::reference value) {$/;"	f	class:apache::thrift::protocol::TVirtualProtocol
readBuffSize_	transport/TFileTransport.h	/^  uint32_t readBuffSize_;$/;"	m	class:apache::thrift::transport::TFileTransport
readBuff_	transport/TFileTransport.h	/^  uint8_t* readBuff_;$/;"	m	class:apache::thrift::transport::TFileTransport
readBufferPos_	server/TNonblockingServer.cpp	/^  uint32_t readBufferPos_;$/;"	m	class:apache::thrift::server::TNonblockingServer::TConnection	file:
readBufferSize_	server/TNonblockingServer.cpp	/^  uint32_t readBufferSize_;$/;"	m	class:apache::thrift::server::TNonblockingServer::TConnection	file:
readBuffer_	server/TNonblockingServer.cpp	/^  uint8_t* readBuffer_;$/;"	m	class:apache::thrift::server::TNonblockingServer::TConnection	file:
readBuffer_	transport/THttpTransport.h	/^  TMemoryBuffer readBuffer_;$/;"	m	class:apache::thrift::transport::THttpTransport
readByte	protocol/TBinaryProtocol.tcc	/^uint32_t TBinaryProtocolT<Transport_, ByteOrder_>::readByte(int8_t& byte) {$/;"	f	class:apache::thrift::protocol::TBinaryProtocolT
readByte	protocol/TCompactProtocol.tcc	/^uint32_t TCompactProtocolT<Transport_>::readByte(int8_t& byte) {$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
readByte	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::readByte(int8_t& byte) {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
readByte	protocol/TProtocol.h	/^  uint32_t readByte(int8_t& byte) {$/;"	f	class:apache::thrift::protocol::TProtocol
readByte	protocol/TProtocolTap.h	/^  uint32_t readByte(int8_t& byte) {$/;"	f	class:apache::thrift::protocol::TProtocolTap
readByte	protocol/TVirtualProtocol.h	/^  uint32_t readByte(int8_t& byte) {$/;"	f	class:apache::thrift::protocol::TProtocolDefaults
readByte_virt	protocol/TProtocolDecorator.h	/^  virtual uint32_t readByte_virt(int8_t& byte) { return protocol->readByte(byte); }$/;"	f	class:apache::thrift::protocol::TProtocolDecorator
readByte_virt	protocol/TVirtualProtocol.h	/^  virtual uint32_t readByte_virt(int8_t& byte) {$/;"	f	class:apache::thrift::protocol::TVirtualProtocol
readChunked	transport/THttpTransport.cpp	/^uint32_t THttpTransport::readChunked() {$/;"	f	class:apache::thrift::transport::THttpTransport
readChunkedFooters	transport/THttpTransport.cpp	/^void THttpTransport::readChunkedFooters() {$/;"	f	class:apache::thrift::transport::THttpTransport
readContent	transport/THttpTransport.cpp	/^uint32_t THttpTransport::readContent(uint32_t size) {$/;"	f	class:apache::thrift::transport::THttpTransport
readDouble	protocol/TBinaryProtocol.tcc	/^uint32_t TBinaryProtocolT<Transport_, ByteOrder_>::readDouble(double& dub) {$/;"	f	class:apache::thrift::protocol::TBinaryProtocolT
readDouble	protocol/TCompactProtocol.tcc	/^uint32_t TCompactProtocolT<Transport_>::readDouble(double& dub) {$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
readDouble	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::readDouble(double& dub) {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
readDouble	protocol/TProtocol.h	/^  uint32_t readDouble(double& dub) {$/;"	f	class:apache::thrift::protocol::TProtocol
readDouble	protocol/TProtocolTap.h	/^  uint32_t readDouble(double& dub) {$/;"	f	class:apache::thrift::protocol::TProtocolTap
readDouble	protocol/TVirtualProtocol.h	/^  uint32_t readDouble(double& dub) {$/;"	f	class:apache::thrift::protocol::TProtocolDefaults
readDouble_virt	protocol/TProtocolDecorator.h	/^  virtual uint32_t readDouble_virt(double& dub) { return protocol->readDouble(dub); }$/;"	f	class:apache::thrift::protocol::TProtocolDecorator
readDouble_virt	protocol/TVirtualProtocol.h	/^  virtual uint32_t readDouble_virt(double& dub) {$/;"	f	class:apache::thrift::protocol::TVirtualProtocol
readEnd	transport/TBufferTransports.cpp	/^uint32_t TFramedTransport::readEnd() {$/;"	f	class:apache::thrift::transport::TFramedTransport
readEnd	transport/TBufferTransports.h	/^  uint32_t readEnd() {$/;"	f	class:apache::thrift::transport::TMemoryBuffer
readEnd	transport/THttpTransport.cpp	/^uint32_t THttpTransport::readEnd() {$/;"	f	class:apache::thrift::transport::THttpTransport
readEnd	transport/TTransport.h	/^  virtual uint32_t readEnd() {$/;"	f	class:apache::thrift::transport::TTransport
readEnd	transport/TTransportUtils.cpp	/^uint32_t TPipedFileReaderTransport::readEnd() {$/;"	f	class:apache::thrift::transport::TPipedFileReaderTransport
readEnd	transport/TTransportUtils.h	/^  uint32_t readEnd() {$/;"	f	class:apache::thrift::transport::TPipedTransport
readEvent	transport/TFileTransport.cpp	/^eventInfo* TFileTransport::readEvent() {$/;"	f	class:apache::thrift::transport::TFileTransport
readFieldBegin	protocol/TBinaryProtocol.tcc	/^uint32_t TBinaryProtocolT<Transport_, ByteOrder_>::readFieldBegin(std::string& name,$/;"	f	class:apache::thrift::protocol::TBinaryProtocolT
readFieldBegin	protocol/TCompactProtocol.tcc	/^uint32_t TCompactProtocolT<Transport_>::readFieldBegin(std::string& name,$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
readFieldBegin	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::readFieldBegin(std::string& name, TType& fieldType, int16_t& fieldId) {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
readFieldBegin	protocol/TProtocol.h	/^  uint32_t readFieldBegin(std::string& name, TType& fieldType, int16_t& fieldId) {$/;"	f	class:apache::thrift::protocol::TProtocol
readFieldBegin	protocol/TProtocolTap.h	/^  uint32_t readFieldBegin(std::string& name, TType& fieldType, int16_t& fieldId) {$/;"	f	class:apache::thrift::protocol::TProtocolTap
readFieldBegin	protocol/TVirtualProtocol.h	/^  uint32_t readFieldBegin(std::string& name, TType& fieldType, int16_t& fieldId) {$/;"	f	class:apache::thrift::protocol::TProtocolDefaults
readFieldBegin_virt	protocol/TProtocolDecorator.h	/^  virtual uint32_t readFieldBegin_virt(std::string& name, TType& fieldType, int16_t& fieldId) {$/;"	f	class:apache::thrift::protocol::TProtocolDecorator
readFieldBegin_virt	protocol/TVirtualProtocol.h	/^  virtual uint32_t readFieldBegin_virt(std::string& name, TType& fieldType, int16_t& fieldId) {$/;"	f	class:apache::thrift::protocol::TVirtualProtocol
readFieldEnd	protocol/TBinaryProtocol.tcc	/^uint32_t TBinaryProtocolT<Transport_, ByteOrder_>::readFieldEnd() {$/;"	f	class:apache::thrift::protocol::TBinaryProtocolT
readFieldEnd	protocol/TCompactProtocol.h	/^  uint32_t readFieldEnd() { return 0; }$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
readFieldEnd	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::readFieldEnd() {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
readFieldEnd	protocol/TProtocol.h	/^  uint32_t readFieldEnd() {$/;"	f	class:apache::thrift::protocol::TProtocol
readFieldEnd	protocol/TProtocolTap.h	/^  uint32_t readFieldEnd() {$/;"	f	class:apache::thrift::protocol::TProtocolTap
readFieldEnd	protocol/TVirtualProtocol.h	/^  uint32_t readFieldEnd() {$/;"	f	class:apache::thrift::protocol::TProtocolDefaults
readFieldEnd_virt	protocol/TProtocolDecorator.h	/^  virtual uint32_t readFieldEnd_virt() { return protocol->readFieldEnd(); }$/;"	f	class:apache::thrift::protocol::TProtocolDecorator
readFieldEnd_virt	protocol/TVirtualProtocol.h	/^  virtual uint32_t readFieldEnd_virt() { return static_cast<Protocol_*>(this)->readFieldEnd(); }$/;"	f	class:apache::thrift::protocol::TVirtualProtocol
readFrame	transport/TBufferTransports.cpp	/^bool TFramedTransport::readFrame() {$/;"	f	class:apache::thrift::transport::TFramedTransport
readFromZlib	transport/TZlibTransport.cpp	/^bool TZlibTransport::readFromZlib() {$/;"	f	class:apache::thrift::transport::TZlibTransport
readHeaders	transport/THttpTransport.cpp	/^void THttpTransport::readHeaders() {$/;"	f	class:apache::thrift::transport::THttpTransport
readHeaders_	transport/THttpTransport.h	/^  bool readHeaders_;$/;"	m	class:apache::thrift::transport::THttpTransport
readI16	protocol/TBinaryProtocol.tcc	/^uint32_t TBinaryProtocolT<Transport_, ByteOrder_>::readI16(int16_t& i16) {$/;"	f	class:apache::thrift::protocol::TBinaryProtocolT
readI16	protocol/TCompactProtocol.tcc	/^uint32_t TCompactProtocolT<Transport_>::readI16(int16_t& i16) {$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
readI16	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::readI16(int16_t& i16) {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
readI16	protocol/TProtocol.h	/^  uint32_t readI16(int16_t& i16) {$/;"	f	class:apache::thrift::protocol::TProtocol
readI16	protocol/TProtocolTap.h	/^  uint32_t readI16(int16_t& i16) {$/;"	f	class:apache::thrift::protocol::TProtocolTap
readI16	protocol/TVirtualProtocol.h	/^  uint32_t readI16(int16_t& i16) {$/;"	f	class:apache::thrift::protocol::TProtocolDefaults
readI16_virt	protocol/TProtocolDecorator.h	/^  virtual uint32_t readI16_virt(int16_t& i16) { return protocol->readI16(i16); }$/;"	f	class:apache::thrift::protocol::TProtocolDecorator
readI16_virt	protocol/TVirtualProtocol.h	/^  virtual uint32_t readI16_virt(int16_t& i16) {$/;"	f	class:apache::thrift::protocol::TVirtualProtocol
readI32	protocol/TBinaryProtocol.tcc	/^uint32_t TBinaryProtocolT<Transport_, ByteOrder_>::readI32(int32_t& i32) {$/;"	f	class:apache::thrift::protocol::TBinaryProtocolT
readI32	protocol/TCompactProtocol.tcc	/^uint32_t TCompactProtocolT<Transport_>::readI32(int32_t& i32) {$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
readI32	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::readI32(int32_t& i32) {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
readI32	protocol/TProtocol.h	/^  uint32_t readI32(int32_t& i32) {$/;"	f	class:apache::thrift::protocol::TProtocol
readI32	protocol/TProtocolTap.h	/^  uint32_t readI32(int32_t& i32) {$/;"	f	class:apache::thrift::protocol::TProtocolTap
readI32	protocol/TVirtualProtocol.h	/^  uint32_t readI32(int32_t& i32) {$/;"	f	class:apache::thrift::protocol::TProtocolDefaults
readI32_virt	protocol/TProtocolDecorator.h	/^  virtual uint32_t readI32_virt(int32_t& i32) { return protocol->readI32(i32); }$/;"	f	class:apache::thrift::protocol::TProtocolDecorator
readI32_virt	protocol/TVirtualProtocol.h	/^  virtual uint32_t readI32_virt(int32_t& i32) {$/;"	f	class:apache::thrift::protocol::TVirtualProtocol
readI64	protocol/TBinaryProtocol.tcc	/^uint32_t TBinaryProtocolT<Transport_, ByteOrder_>::readI64(int64_t& i64) {$/;"	f	class:apache::thrift::protocol::TBinaryProtocolT
readI64	protocol/TCompactProtocol.tcc	/^uint32_t TCompactProtocolT<Transport_>::readI64(int64_t& i64) {$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
readI64	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::readI64(int64_t& i64) {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
readI64	protocol/TProtocol.h	/^  uint32_t readI64(int64_t& i64) {$/;"	f	class:apache::thrift::protocol::TProtocol
readI64	protocol/TProtocolTap.h	/^  uint32_t readI64(int64_t& i64) {$/;"	f	class:apache::thrift::protocol::TProtocolTap
readI64	protocol/TVirtualProtocol.h	/^  uint32_t readI64(int64_t& i64) {$/;"	f	class:apache::thrift::protocol::TProtocolDefaults
readI64_virt	protocol/TProtocolDecorator.h	/^  virtual uint32_t readI64_virt(int64_t& i64) { return protocol->readI64(i64); }$/;"	f	class:apache::thrift::protocol::TProtocolDecorator
readI64_virt	protocol/TVirtualProtocol.h	/^  virtual uint32_t readI64_virt(int64_t& i64) {$/;"	f	class:apache::thrift::protocol::TVirtualProtocol
readJSONArrayEnd	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::readJSONArrayEnd() {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
readJSONArrayStart	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::readJSONArrayStart() {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
readJSONBase64	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::readJSONBase64(std::string& str) {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
readJSONDouble	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::readJSONDouble(double& num) {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
readJSONEscapeChar	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::readJSONEscapeChar(uint8_t* out) {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
readJSONInteger	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::readJSONInteger(NumberType& num) {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
readJSONNumericChars	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::readJSONNumericChars(std::string& str) {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
readJSONObjectEnd	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::readJSONObjectEnd() {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
readJSONObjectStart	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::readJSONObjectStart() {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
readJSONString	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::readJSONString(std::string& str, bool skipContext) {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
readJSONSyntaxChar	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::readJSONSyntaxChar(uint8_t ch) {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
readLine	transport/THttpTransport.cpp	/^char* THttpTransport::readLine() {$/;"	f	class:apache::thrift::transport::THttpTransport
readListBegin	protocol/TBinaryProtocol.tcc	/^uint32_t TBinaryProtocolT<Transport_, ByteOrder_>::readListBegin(TType& elemType, uint32_t& size) {$/;"	f	class:apache::thrift::protocol::TBinaryProtocolT
readListBegin	protocol/TCompactProtocol.tcc	/^uint32_t TCompactProtocolT<Transport_>::readListBegin(TType& elemType,$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
readListBegin	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::readListBegin(TType& elemType, uint32_t& size) {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
readListBegin	protocol/TProtocol.h	/^  uint32_t readListBegin(TType& elemType, uint32_t& size) {$/;"	f	class:apache::thrift::protocol::TProtocol
readListBegin	protocol/TProtocolTap.h	/^  uint32_t readListBegin(TType& elemType, uint32_t& size) {$/;"	f	class:apache::thrift::protocol::TProtocolTap
readListBegin	protocol/TVirtualProtocol.h	/^  uint32_t readListBegin(TType& elemType, uint32_t& size) {$/;"	f	class:apache::thrift::protocol::TProtocolDefaults
readListBegin_virt	protocol/TProtocolDecorator.h	/^  virtual uint32_t readListBegin_virt(TType& elemType, uint32_t& size) {$/;"	f	class:apache::thrift::protocol::TProtocolDecorator
readListBegin_virt	protocol/TVirtualProtocol.h	/^  virtual uint32_t readListBegin_virt(TType& elemType, uint32_t& size) {$/;"	f	class:apache::thrift::protocol::TVirtualProtocol
readListEnd	protocol/TBinaryProtocol.tcc	/^uint32_t TBinaryProtocolT<Transport_, ByteOrder_>::readListEnd() {$/;"	f	class:apache::thrift::protocol::TBinaryProtocolT
readListEnd	protocol/TCompactProtocol.h	/^  uint32_t readListEnd() { return 0; }$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
readListEnd	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::readListEnd() {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
readListEnd	protocol/TProtocol.h	/^  uint32_t readListEnd() {$/;"	f	class:apache::thrift::protocol::TProtocol
readListEnd	protocol/TProtocolTap.h	/^  uint32_t readListEnd() {$/;"	f	class:apache::thrift::protocol::TProtocolTap
readListEnd	protocol/TVirtualProtocol.h	/^  uint32_t readListEnd() {$/;"	f	class:apache::thrift::protocol::TProtocolDefaults
readListEnd_virt	protocol/TProtocolDecorator.h	/^  virtual uint32_t readListEnd_virt() { return protocol->readListEnd(); }$/;"	f	class:apache::thrift::protocol::TProtocolDecorator
readListEnd_virt	protocol/TVirtualProtocol.h	/^  virtual uint32_t readListEnd_virt() { return static_cast<Protocol_*>(this)->readListEnd(); }$/;"	f	class:apache::thrift::protocol::TVirtualProtocol
readMapBegin	protocol/TBinaryProtocol.tcc	/^uint32_t TBinaryProtocolT<Transport_, ByteOrder_>::readMapBegin(TType& keyType,$/;"	f	class:apache::thrift::protocol::TBinaryProtocolT
readMapBegin	protocol/TCompactProtocol.tcc	/^uint32_t TCompactProtocolT<Transport_>::readMapBegin(TType& keyType,$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
readMapBegin	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::readMapBegin(TType& keyType, TType& valType, uint32_t& size) {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
readMapBegin	protocol/TProtocol.h	/^  uint32_t readMapBegin(TType& keyType, TType& valType, uint32_t& size) {$/;"	f	class:apache::thrift::protocol::TProtocol
readMapBegin	protocol/TProtocolTap.h	/^  uint32_t readMapBegin(TType& keyType, TType& valType, uint32_t& size) {$/;"	f	class:apache::thrift::protocol::TProtocolTap
readMapBegin	protocol/TVirtualProtocol.h	/^  uint32_t readMapBegin(TType& keyType, TType& valType, uint32_t& size) {$/;"	f	class:apache::thrift::protocol::TProtocolDefaults
readMapBegin_virt	protocol/TProtocolDecorator.h	/^  virtual uint32_t readMapBegin_virt(TType& keyType, TType& valType, uint32_t& size) {$/;"	f	class:apache::thrift::protocol::TProtocolDecorator
readMapBegin_virt	protocol/TVirtualProtocol.h	/^  virtual uint32_t readMapBegin_virt(TType& keyType, TType& valType, uint32_t& size) {$/;"	f	class:apache::thrift::protocol::TVirtualProtocol
readMapEnd	protocol/TBinaryProtocol.tcc	/^uint32_t TBinaryProtocolT<Transport_, ByteOrder_>::readMapEnd() {$/;"	f	class:apache::thrift::protocol::TBinaryProtocolT
readMapEnd	protocol/TCompactProtocol.h	/^  uint32_t readMapEnd() { return 0; }$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
readMapEnd	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::readMapEnd() {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
readMapEnd	protocol/TProtocol.h	/^  uint32_t readMapEnd() {$/;"	f	class:apache::thrift::protocol::TProtocol
readMapEnd	protocol/TProtocolTap.h	/^  uint32_t readMapEnd() {$/;"	f	class:apache::thrift::protocol::TProtocolTap
readMapEnd	protocol/TVirtualProtocol.h	/^  uint32_t readMapEnd() {$/;"	f	class:apache::thrift::protocol::TProtocolDefaults
readMapEnd_virt	protocol/TProtocolDecorator.h	/^  virtual uint32_t readMapEnd_virt() { return protocol->readMapEnd(); }$/;"	f	class:apache::thrift::protocol::TProtocolDecorator
readMapEnd_virt	protocol/TVirtualProtocol.h	/^  virtual uint32_t readMapEnd_virt() { return static_cast<Protocol_*>(this)->readMapEnd(); }$/;"	f	class:apache::thrift::protocol::TVirtualProtocol
readMessageBegin	protocol/TBinaryProtocol.tcc	/^uint32_t TBinaryProtocolT<Transport_, ByteOrder_>::readMessageBegin(std::string& name,$/;"	f	class:apache::thrift::protocol::TBinaryProtocolT
readMessageBegin	protocol/TCompactProtocol.tcc	/^uint32_t TCompactProtocolT<Transport_>::readMessageBegin($/;"	f	class:apache::thrift::protocol::TCompactProtocolT
readMessageBegin	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::readMessageBegin(std::string& name,$/;"	f	class:apache::thrift::protocol::TJSONProtocol
readMessageBegin	protocol/TProtocol.h	/^  uint32_t readMessageBegin(std::string& name, TMessageType& messageType, int32_t& seqid) {$/;"	f	class:apache::thrift::protocol::TProtocol
readMessageBegin	protocol/TProtocolTap.h	/^  uint32_t readMessageBegin(std::string& name, TMessageType& messageType, int32_t& seqid) {$/;"	f	class:apache::thrift::protocol::TProtocolTap
readMessageBegin	protocol/TVirtualProtocol.h	/^  uint32_t readMessageBegin(std::string& name, TMessageType& messageType, int32_t& seqid) {$/;"	f	class:apache::thrift::protocol::TProtocolDefaults
readMessageBegin_virt	processor/TMultiplexedProcessor.h	/^  uint32_t readMessageBegin_virt(std::string& _name, TMessageType& _type, int32_t& _seqid) {$/;"	f	class:apache::thrift::protocol::StoredMessageProtocol
readMessageBegin_virt	protocol/TProtocolDecorator.h	/^  virtual uint32_t readMessageBegin_virt(std::string& name,$/;"	f	class:apache::thrift::protocol::TProtocolDecorator
readMessageBegin_virt	protocol/TVirtualProtocol.h	/^  virtual uint32_t readMessageBegin_virt(std::string& name,$/;"	f	class:apache::thrift::protocol::TVirtualProtocol
readMessageEnd	protocol/TBinaryProtocol.tcc	/^uint32_t TBinaryProtocolT<Transport_, ByteOrder_>::readMessageEnd() {$/;"	f	class:apache::thrift::protocol::TBinaryProtocolT
readMessageEnd	protocol/TCompactProtocol.h	/^  uint32_t readMessageEnd() { return 0; }$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
readMessageEnd	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::readMessageEnd() {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
readMessageEnd	protocol/TProtocol.h	/^  uint32_t readMessageEnd() {$/;"	f	class:apache::thrift::protocol::TProtocol
readMessageEnd	protocol/TProtocolTap.h	/^  uint32_t readMessageEnd() {$/;"	f	class:apache::thrift::protocol::TProtocolTap
readMessageEnd	protocol/TVirtualProtocol.h	/^  uint32_t readMessageEnd() {$/;"	f	class:apache::thrift::protocol::TProtocolDefaults
readMessageEnd_virt	protocol/TProtocolDecorator.h	/^  virtual uint32_t readMessageEnd_virt() { return protocol->readMessageEnd(); }$/;"	f	class:apache::thrift::protocol::TProtocolDecorator
readMessageEnd_virt	protocol/TVirtualProtocol.h	/^  virtual uint32_t readMessageEnd_virt() { return static_cast<Protocol_*>(this)->readMessageEnd(); }$/;"	f	class:apache::thrift::protocol::TVirtualProtocol
readMoreData	transport/THttpTransport.cpp	/^uint32_t THttpTransport::readMoreData() {$/;"	f	class:apache::thrift::transport::THttpTransport
readMutex_	async/TConcurrentClientSyncInfo.h	/^  ::apache::thrift::concurrency::Mutex readMutex_;$/;"	m	class:apache::thrift::async::TConcurrentClientSyncInfo
readOnly_	transport/TFileTransport.h	/^  bool readOnly_;$/;"	m	class:apache::thrift::transport::TFileTransport
readOverlap_	transport/TPipe.cpp	/^  TOverlappedWorkItem readOverlap_;$/;"	m	class:apache::thrift::transport::TWaitableNamedPipeImpl	file:
readPoint_	transport/TFileTransport.h	/^  uint32_t readPoint_;$/;"	m	class:apache::thrift::transport::TFileTransportBuffer
readSetBegin	protocol/TBinaryProtocol.tcc	/^uint32_t TBinaryProtocolT<Transport_, ByteOrder_>::readSetBegin(TType& elemType, uint32_t& size) {$/;"	f	class:apache::thrift::protocol::TBinaryProtocolT
readSetBegin	protocol/TCompactProtocol.tcc	/^uint32_t TCompactProtocolT<Transport_>::readSetBegin(TType& elemType,$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
readSetBegin	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::readSetBegin(TType& elemType, uint32_t& size) {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
readSetBegin	protocol/TProtocol.h	/^  uint32_t readSetBegin(TType& elemType, uint32_t& size) {$/;"	f	class:apache::thrift::protocol::TProtocol
readSetBegin	protocol/TProtocolTap.h	/^  uint32_t readSetBegin(TType& elemType, uint32_t& size) {$/;"	f	class:apache::thrift::protocol::TProtocolTap
readSetBegin	protocol/TVirtualProtocol.h	/^  uint32_t readSetBegin(TType& elemType, uint32_t& size) {$/;"	f	class:apache::thrift::protocol::TProtocolDefaults
readSetBegin_virt	protocol/TProtocolDecorator.h	/^  virtual uint32_t readSetBegin_virt(TType& elemType, uint32_t& size) {$/;"	f	class:apache::thrift::protocol::TProtocolDecorator
readSetBegin_virt	protocol/TVirtualProtocol.h	/^  virtual uint32_t readSetBegin_virt(TType& elemType, uint32_t& size) {$/;"	f	class:apache::thrift::protocol::TVirtualProtocol
readSetEnd	protocol/TBinaryProtocol.tcc	/^uint32_t TBinaryProtocolT<Transport_, ByteOrder_>::readSetEnd() {$/;"	f	class:apache::thrift::protocol::TBinaryProtocolT
readSetEnd	protocol/TCompactProtocol.h	/^  uint32_t readSetEnd() { return 0; }$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
readSetEnd	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::readSetEnd() {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
readSetEnd	protocol/TProtocol.h	/^  uint32_t readSetEnd() {$/;"	f	class:apache::thrift::protocol::TProtocol
readSetEnd	protocol/TProtocolTap.h	/^  uint32_t readSetEnd() {$/;"	f	class:apache::thrift::protocol::TProtocolTap
readSetEnd	protocol/TVirtualProtocol.h	/^  uint32_t readSetEnd() {$/;"	f	class:apache::thrift::protocol::TProtocolDefaults
readSetEnd_virt	protocol/TProtocolDecorator.h	/^  virtual uint32_t readSetEnd_virt() { return protocol->readSetEnd(); }$/;"	f	class:apache::thrift::protocol::TProtocolDecorator
readSetEnd_virt	protocol/TVirtualProtocol.h	/^  virtual uint32_t readSetEnd_virt() { return static_cast<Protocol_*>(this)->readSetEnd(); }$/;"	f	class:apache::thrift::protocol::TVirtualProtocol
readSlow	transport/TBufferTransports.cpp	/^uint32_t TBufferedTransport::readSlow(uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::TBufferedTransport
readSlow	transport/TBufferTransports.cpp	/^uint32_t TFramedTransport::readSlow(uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::TFramedTransport
readSlow	transport/TBufferTransports.cpp	/^uint32_t TMemoryBuffer::readSlow(uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::TMemoryBuffer
readState	transport/TFileTransport.h	/^  readState() {$/;"	f	struct:apache::thrift::transport::readState
readState	transport/TFileTransport.h	/^typedef struct readState {$/;"	s	namespace:apache::thrift::transport
readState	transport/TFileTransport.h	/^} readState;$/;"	t	namespace:apache::thrift::transport	typeref:struct:apache::thrift::transport::readState
readState_	transport/TFileTransport.h	/^  readState readState_;$/;"	m	class:apache::thrift::transport::TFileTransport
readString	protocol/TBinaryProtocol.tcc	/^uint32_t TBinaryProtocolT<Transport_, ByteOrder_>::readString(StrType& str) {$/;"	f	class:apache::thrift::protocol::TBinaryProtocolT
readString	protocol/TCompactProtocol.tcc	/^uint32_t TCompactProtocolT<Transport_>::readString(std::string& str) {$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
readString	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::readString(std::string& str) {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
readString	protocol/TProtocol.h	/^  uint32_t readString(std::string& str) {$/;"	f	class:apache::thrift::protocol::TProtocol
readString	protocol/TProtocolTap.h	/^  uint32_t readString(std::string& str) {$/;"	f	class:apache::thrift::protocol::TProtocolTap
readString	protocol/TVirtualProtocol.h	/^  uint32_t readString(std::string& str) {$/;"	f	class:apache::thrift::protocol::TProtocolDefaults
readStringBody	protocol/TBinaryProtocol.tcc	/^uint32_t TBinaryProtocolT<Transport_, ByteOrder_>::readStringBody(StrType& str, int32_t size) {$/;"	f	class:apache::thrift::protocol::TBinaryProtocolT
readString_virt	protocol/TProtocolDecorator.h	/^  virtual uint32_t readString_virt(std::string& str) { return protocol->readString(str); }$/;"	f	class:apache::thrift::protocol::TProtocolDecorator
readString_virt	protocol/TVirtualProtocol.h	/^  virtual uint32_t readString_virt(std::string& str) {$/;"	f	class:apache::thrift::protocol::TVirtualProtocol
readStructBegin	protocol/TBinaryProtocol.tcc	/^uint32_t TBinaryProtocolT<Transport_, ByteOrder_>::readStructBegin(std::string& name) {$/;"	f	class:apache::thrift::protocol::TBinaryProtocolT
readStructBegin	protocol/TCompactProtocol.tcc	/^uint32_t TCompactProtocolT<Transport_>::readStructBegin(std::string& name) {$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
readStructBegin	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::readStructBegin(std::string& name) {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
readStructBegin	protocol/TProtocol.h	/^  uint32_t readStructBegin(std::string& name) {$/;"	f	class:apache::thrift::protocol::TProtocol
readStructBegin	protocol/TProtocolTap.h	/^  uint32_t readStructBegin(std::string& name) {$/;"	f	class:apache::thrift::protocol::TProtocolTap
readStructBegin	protocol/TVirtualProtocol.h	/^  uint32_t readStructBegin(std::string& name) {$/;"	f	class:apache::thrift::protocol::TProtocolDefaults
readStructBegin_virt	protocol/TProtocolDecorator.h	/^  virtual uint32_t readStructBegin_virt(std::string& name) {$/;"	f	class:apache::thrift::protocol::TProtocolDecorator
readStructBegin_virt	protocol/TVirtualProtocol.h	/^  virtual uint32_t readStructBegin_virt(std::string& name) {$/;"	f	class:apache::thrift::protocol::TVirtualProtocol
readStructEnd	protocol/TBinaryProtocol.tcc	/^uint32_t TBinaryProtocolT<Transport_, ByteOrder_>::readStructEnd() {$/;"	f	class:apache::thrift::protocol::TBinaryProtocolT
readStructEnd	protocol/TCompactProtocol.tcc	/^uint32_t TCompactProtocolT<Transport_>::readStructEnd() {$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
readStructEnd	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::readStructEnd() {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
readStructEnd	protocol/TProtocol.h	/^  uint32_t readStructEnd() {$/;"	f	class:apache::thrift::protocol::TProtocol
readStructEnd	protocol/TProtocolTap.h	/^  uint32_t readStructEnd() {$/;"	f	class:apache::thrift::protocol::TProtocolTap
readStructEnd	protocol/TVirtualProtocol.h	/^  uint32_t readStructEnd() {$/;"	f	class:apache::thrift::protocol::TProtocolDefaults
readStructEnd_virt	protocol/TProtocolDecorator.h	/^  virtual uint32_t readStructEnd_virt() { return protocol->readStructEnd(); }$/;"	f	class:apache::thrift::protocol::TProtocolDecorator
readStructEnd_virt	protocol/TVirtualProtocol.h	/^  virtual uint32_t readStructEnd_virt() { return static_cast<Protocol_*>(this)->readStructEnd(); }$/;"	f	class:apache::thrift::protocol::TVirtualProtocol
readSyntaxChar	protocol/TJSONProtocol.cpp	/^static uint32_t readSyntaxChar(TJSONProtocol::LookaheadReader& reader, uint8_t ch) {$/;"	f	namespace:apache::thrift::protocol
readTimeout_	transport/TFileTransport.h	/^  int32_t readTimeout_;$/;"	m	class:apache::thrift::transport::TFileTransport
readVarint32	protocol/TCompactProtocol.tcc	/^uint32_t TCompactProtocolT<Transport_>::readVarint32(int32_t& i32) {$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
readVarint64	protocol/TCompactProtocol.tcc	/^uint32_t TCompactProtocolT<Transport_>::readVarint64(int64_t& i64) {$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
readWant_	server/TNonblockingServer.cpp	/^  uint32_t readWant_;$/;"	m	class:apache::thrift::server::TNonblockingServer::TConnection	file:
read_event_	transport/TPipe.cpp	/^  TManualResetEvent read_event_;$/;"	m	class:apache::thrift::transport::TNamedPipeImpl	file:
read_virt	transport/TFileTransport.h	/^  virtual uint32_t read_virt(uint8_t* buf, uint32_t len) { return this->read(buf, len); }$/;"	f	class:apache::thrift::transport::TFileTransport
read_virt	transport/TTransport.h	/^  virtual uint32_t read_virt(uint8_t* \/* buf *\/, uint32_t \/* len *\/) {$/;"	f	class:apache::thrift::transport::TTransport
read_virt	transport/TTransportUtils.h	/^  virtual uint32_t read_virt(uint8_t* buf, uint32_t len) { return this->read(buf, len); }$/;"	f	class:apache::thrift::transport::TPipedFileReaderTransport
read_virt	transport/TTransportUtils.h	/^  virtual uint32_t read_virt(uint8_t* buf, uint32_t len) { return this->read(buf, len); }$/;"	f	class:apache::thrift::transport::TPipedTransport
read_virt	transport/TVirtualTransport.h	/^  virtual uint32_t read_virt(uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::TVirtualTransport
reader_	protocol/TJSONProtocol.h	/^  LookaheadReader reader_;$/;"	m	class:apache::thrift::protocol::TJSONProtocol
readingSize_	transport/TFileTransport.h	/^  bool readingSize_;$/;"	m	struct:apache::thrift::transport::readState
ready_event_	transport/TPipe.cpp	/^  TManualResetEvent ready_event_;$/;"	m	class:apache::thrift::transport::TWaitableNamedPipeImpl	file:
recursion_limit_	protocol/TProtocol.h	/^  uint32_t recursion_limit_;$/;"	m	class:apache::thrift::protocol::TProtocol
recvBuf_	async/TEvhttpClientChannel.h	/^  apache::thrift::transport::TMemoryBuffer* recvBuf_;$/;"	m	class:apache::thrift::async::TEvhttpClientChannel
recvMessage	async/TEvhttpClientChannel.cpp	/^void TEvhttpClientChannel::recvMessage(const VoidCallback& cob,$/;"	f	class:apache::thrift::async::TEvhttpClientChannel
recvPending_	async/TConcurrentClientSyncInfo.h	/^  bool recvPending_;$/;"	m	class:apache::thrift::async::TConcurrentClientSyncInfo
recvTimeout_	transport/TServerSocket.h	/^  int recvTimeout_;$/;"	m	class:apache::thrift::transport::TServerSocket
recvTimeout_	transport/TSocket.h	/^  int recvTimeout_;$/;"	m	class:apache::thrift::transport::TSocket
recv_aliveSince	gen-cpp-fb/FacebookService.cpp	/^int64_t FacebookServiceClient::recv_aliveSince()$/;"	f	class:facebook::fb303::FacebookServiceClient
recv_aliveSince	gen-cpp-fb/FacebookService.cpp	/^int64_t FacebookServiceConcurrentClient::recv_aliveSince(const int32_t seqid)$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
recv_getCounter	gen-cpp-fb/FacebookService.cpp	/^int64_t FacebookServiceClient::recv_getCounter()$/;"	f	class:facebook::fb303::FacebookServiceClient
recv_getCounter	gen-cpp-fb/FacebookService.cpp	/^int64_t FacebookServiceConcurrentClient::recv_getCounter(const int32_t seqid)$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
recv_getCounters	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceClient::recv_getCounters(std::map<std::string, int64_t> & _return)$/;"	f	class:facebook::fb303::FacebookServiceClient
recv_getCounters	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceConcurrentClient::recv_getCounters(std::map<std::string, int64_t> & _return, const int32_t seqid)$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
recv_getCpuProfile	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceClient::recv_getCpuProfile(std::string& _return)$/;"	f	class:facebook::fb303::FacebookServiceClient
recv_getCpuProfile	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceConcurrentClient::recv_getCpuProfile(std::string& _return, const int32_t seqid)$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
recv_getName	gen-cpp-fb-s/FacebookService.cpp	/^void FacebookServiceClient::recv_getName(std::string& _return)$/;"	f	class:facebook::fb303::FacebookServiceClient
recv_getName	gen-cpp-fb-s/FacebookService.cpp	/^void FacebookServiceConcurrentClient::recv_getName(std::string& _return, const int32_t seqid)$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
recv_getName	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceClient::recv_getName(std::string& _return)$/;"	f	class:facebook::fb303::FacebookServiceClient
recv_getName	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceConcurrentClient::recv_getName(std::string& _return, const int32_t seqid)$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
recv_getOption	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceClient::recv_getOption(std::string& _return)$/;"	f	class:facebook::fb303::FacebookServiceClient
recv_getOption	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceConcurrentClient::recv_getOption(std::string& _return, const int32_t seqid)$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
recv_getOptions	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceClient::recv_getOptions(std::map<std::string, std::string> & _return)$/;"	f	class:facebook::fb303::FacebookServiceClient
recv_getOptions	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceConcurrentClient::recv_getOptions(std::map<std::string, std::string> & _return, const int32_t seqid)$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
recv_getStatus	gen-cpp-fb/FacebookService.cpp	/^fb_status::type FacebookServiceClient::recv_getStatus()$/;"	f	class:facebook::fb303::FacebookServiceClient
recv_getStatus	gen-cpp-fb/FacebookService.cpp	/^fb_status::type FacebookServiceConcurrentClient::recv_getStatus(const int32_t seqid)$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
recv_getStatusDetails	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceClient::recv_getStatusDetails(std::string& _return)$/;"	f	class:facebook::fb303::FacebookServiceClient
recv_getStatusDetails	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceConcurrentClient::recv_getStatusDetails(std::string& _return, const int32_t seqid)$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
recv_getVersion	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceClient::recv_getVersion(std::string& _return)$/;"	f	class:facebook::fb303::FacebookServiceClient
recv_getVersion	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceConcurrentClient::recv_getVersion(std::string& _return, const int32_t seqid)$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
recv_setOption	gen-cpp-fb-s/FacebookService.cpp	/^void FacebookServiceClient::recv_setOption()$/;"	f	class:facebook::fb303::FacebookServiceClient
recv_setOption	gen-cpp-fb-s/FacebookService.cpp	/^void FacebookServiceConcurrentClient::recv_setOption(const int32_t seqid)$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
recv_setOption	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceClient::recv_setOption()$/;"	f	class:facebook::fb303::FacebookServiceClient
recv_setOption	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceConcurrentClient::recv_setOption(const int32_t seqid)$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
refill	transport/THttpTransport.cpp	/^void THttpTransport::refill() {$/;"	f	class:apache::thrift::transport::THttpTransport
registerEvents	server/TNonblockingServer.cpp	/^void TNonblockingIOThread::registerEvents() {$/;"	f	class:apache::thrift::server::TNonblockingIOThread
registerEvents	server/TNonblockingServer.cpp	/^void TNonblockingServer::registerEvents(event_base* user_event_base) {$/;"	f	class:apache::thrift::server::TNonblockingServer
registerProcessor	processor/TMultiplexedProcessor.h	/^  void registerProcessor(const std::string& serviceName, shared_ptr<TProcessor> processor) {$/;"	f	class:apache::thrift::TMultiplexedProcessor
reinitialize	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceClient::reinitialize()$/;"	f	class:facebook::fb303::FacebookServiceClient
reinitialize	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceConcurrentClient::reinitialize()$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
reinitialize	gen-cpp-fb/FacebookService.h	/^  void reinitialize() {$/;"	f	class:facebook::fb303::FacebookServiceMultiface
reinitialize	gen-cpp-fb/FacebookService.h	/^  void reinitialize() {$/;"	f	class:facebook::fb303::FacebookServiceNull
reinitialize	gen-cpp-fb/FacebookService_server.skeleton.cpp	/^  void reinitialize() {$/;"	f	class:FacebookServiceHandler
release	concurrency/Mutex.cpp	/^  void release() const {$/;"	f	class:apache::thrift::concurrency::ReadWriteMutex::impl
release	concurrency/Mutex.cpp	/^void ReadWriteMutex::release() const {$/;"	f	class:apache::thrift::concurrency::ReadWriteMutex
release	windows/Sync.h	/^  HANDLE release() {$/;"	f	struct:apache::thrift::TAutoHandle
releaseHandler	gen-cpp-fb-s/FacebookService.h	/^  virtual void releaseHandler(FacebookServiceIf* \/* handler *\/) {}$/;"	f	class:facebook::fb303::FacebookServiceIfSingletonFactory
releaseHandler	gen-cpp-fb/FacebookService.h	/^  virtual void releaseHandler(FacebookServiceIf* \/* handler *\/) {}$/;"	f	class:facebook::fb303::FacebookServiceIfSingletonFactory
releaseOneDescriptor	server/TServerFramework.cpp	/^static void releaseOneDescriptor(const string& name, T& pTransport) {$/;"	f	namespace:apache::thrift::server
release_instance	windows/OverlappedSubmissionThread.cpp	/^void TOverlappedSubmissionThread::release_instance() {$/;"	f	class:apache::thrift::transport::TOverlappedSubmissionThread
remove	concurrency/ThreadManager.cpp	/^void ThreadManager::Impl::remove(shared_ptr<Runnable> task) {$/;"	f	class:apache::thrift::concurrency::ThreadManager::Impl
remove	concurrency/TimerManager.cpp	/^void TimerManager::remove(shared_ptr<Runnable> task) {$/;"	f	class:apache::thrift::concurrency::TimerManager
removeExpiredTasks	concurrency/ThreadManager.cpp	/^void ThreadManager::Impl::removeExpiredTasks() {$/;"	f	class:apache::thrift::concurrency::ThreadManager::Impl
removeNextPending	concurrency/ThreadManager.cpp	/^boost::shared_ptr<Runnable> ThreadManager::Impl::removeNextPending() {$/;"	f	class:apache::thrift::concurrency::ThreadManager::Impl
removeWorker	concurrency/ThreadManager.cpp	/^void ThreadManager::Impl::removeWorker(size_t value) {$/;"	f	class:apache::thrift::concurrency::ThreadManager::Impl
repFunc_	concurrency/FunctionRunner.h	/^  BoolFunc repFunc_;$/;"	m	class:apache::thrift::concurrency::FunctionRunner
req	async/TEvhttpServer.cpp	/^  struct evhttp_request* req;$/;"	m	struct:apache::thrift::async::TEvhttpServer::RequestContext	typeref:struct:apache::thrift::async::TEvhttpServer::RequestContext::evhttp_request	file:
request	async/TEvhttpServer.cpp	/^void TEvhttpServer::request(struct evhttp_request* req, void* self) {$/;"	f	class:apache::thrift::async::TEvhttpServer
reset	transport/TFileTransport.cpp	/^void TFileTransportBuffer::reset() {$/;"	f	class:apache::thrift::transport::TFileTransportBuffer
reset	windows/OverlappedSubmissionThread.cpp	/^void TOverlappedWorkItem::reset(uint8_t* buf, uint32_t len, HANDLE event) {$/;"	f	class:apache::thrift::transport::TOverlappedWorkItem
reset	windows/Sync.h	/^  void reset(HANDLE h_ = INVALID_HANDLE_VALUE) {$/;"	f	struct:apache::thrift::TAutoHandle
resetAllValues	transport/TFileTransport.h	/^  void resetAllValues() {$/;"	f	struct:apache::thrift::transport::readState
resetBuffer	transport/TBufferTransports.h	/^  void resetBuffer() {$/;"	f	class:apache::thrift::transport::TMemoryBuffer
resetBuffer	transport/TBufferTransports.h	/^  void resetBuffer(uint32_t sz) {$/;"	f	class:apache::thrift::transport::TMemoryBuffer
resetBuffer	transport/TBufferTransports.h	/^  void resetBuffer(uint8_t* buf, uint32_t sz, MemoryPolicy policy = OBSERVE) {$/;"	f	class:apache::thrift::transport::TMemoryBuffer
resetOutputFile	transport/TFileTransport.cpp	/^void TFileTransport::resetOutputFile(int fd, string filename, off_t offset) {$/;"	f	class:apache::thrift::transport::TFileTransport
resetState	transport/TFileTransport.h	/^  void resetState(uint32_t lastDispatchPtr) {$/;"	f	struct:apache::thrift::transport::readState
resizeBufferEveryN_	server/TNonblockingServer.h	/^  int32_t resizeBufferEveryN_;$/;"	m	class:apache::thrift::server::TNonblockingServer
response	async/TEvhttpClientChannel.cpp	/^\/* static *\/ void TEvhttpClientChannel::response(struct evhttp_request* req, void* arg) {$/;"	f	class:apache::thrift::async::TEvhttpClientChannel
retryDelay_	transport/TServerSocket.h	/^  int retryDelay_;$/;"	m	class:apache::thrift::transport::TServerSocket
retryInterval_	transport/TSocketPool.h	/^  time_t retryInterval_;$/;"	m	class:apache::thrift::transport::TSocketPool
retryLimit_	transport/TServerSocket.h	/^  int retryLimit_;$/;"	m	class:apache::thrift::transport::TServerSocket
returnConnection	server/TNonblockingServer.cpp	/^void TNonblockingServer::returnConnection(TConnection* connection) {$/;"	f	class:apache::thrift::server::TNonblockingServer
revents	windows/WinFcntl.h	/^  SHORT revents;$/;"	m	struct:thrift_pollfd
rstream_	transport/TZlibTransport.h	/^  struct z_stream_s* rstream_;$/;"	m	class:apache::thrift::transport::TZlibTransport	typeref:struct:apache::thrift::transport::TZlibTransport::z_stream_s
run	concurrency/FunctionRunner.h	/^  void run() {$/;"	f	class:apache::thrift::concurrency::FunctionRunner
run	concurrency/ThreadManager.cpp	/^  void run() {$/;"	f	class:apache::thrift::concurrency::ThreadManager::Task
run	concurrency/ThreadManager.cpp	/^  void run() {$/;"	f	class:apache::thrift::concurrency::ThreadManager::Worker
run	concurrency/TimerManager.cpp	/^  void run() {$/;"	f	class:apache::thrift::concurrency::TimerManager::Dispatcher
run	concurrency/TimerManager.cpp	/^  void run() {$/;"	f	class:apache::thrift::concurrency::TimerManager::Task
run	server/TConnectedClient.cpp	/^void TConnectedClient::run() {$/;"	f	class:apache::thrift::server::TConnectedClient
run	server/TNonblockingServer.cpp	/^  void run() {$/;"	f	class:apache::thrift::server::TNonblockingServer::TConnection::Task
run	server/TNonblockingServer.cpp	/^void TNonblockingIOThread::run() {$/;"	f	class:apache::thrift::server::TNonblockingIOThread
run	server/TServer.h	/^  virtual void run() { serve(); }$/;"	f	class:apache::thrift::server::TServer
run	windows/OverlappedSubmissionThread.cpp	/^void TOverlappedSubmissionThread::run() {$/;"	f	class:apache::thrift::transport::TOverlappedSubmissionThread
runnable	concurrency/BoostThreadFactory.cpp	/^  shared_ptr<Runnable> runnable() const { return Thread::runnable(); }$/;"	f	class:apache::thrift::concurrency::BoostThread
runnable	concurrency/BoostThreadFactory.cpp	/^  void runnable(shared_ptr<Runnable> value) { Thread::runnable(value); }$/;"	f	class:apache::thrift::concurrency::BoostThread
runnable	concurrency/PosixThreadFactory.cpp	/^  shared_ptr<Runnable> runnable() const { return Thread::runnable(); }$/;"	f	class:apache::thrift::concurrency::PthreadThread
runnable	concurrency/PosixThreadFactory.cpp	/^  void runnable(shared_ptr<Runnable> value) { Thread::runnable(value); }$/;"	f	class:apache::thrift::concurrency::PthreadThread
runnable	concurrency/StdThreadFactory.cpp	/^  boost::shared_ptr<Runnable> runnable() const { return Thread::runnable(); }$/;"	f	class:apache::thrift::concurrency::StdThread
runnable	concurrency/StdThreadFactory.cpp	/^  void runnable(boost::shared_ptr<Runnable> value) { Thread::runnable(value); }$/;"	f	class:apache::thrift::concurrency::StdThread
runnable	concurrency/Thread.h	/^  virtual boost::shared_ptr<Runnable> runnable() const { return _runnable; }$/;"	f	class:apache::thrift::concurrency::Thread
runnable	concurrency/Thread.h	/^  virtual void runnable(boost::shared_ptr<Runnable> value) { _runnable = value; }$/;"	f	class:apache::thrift::concurrency::Thread
runnable_	concurrency/ThreadManager.cpp	/^  shared_ptr<Runnable> runnable_;$/;"	m	class:apache::thrift::concurrency::ThreadManager::Task	file:
runnable_	concurrency/TimerManager.cpp	/^  shared_ptr<Runnable> runnable_;$/;"	m	class:apache::thrift::concurrency::TimerManager::Task	file:
rw_lock_	concurrency/Mutex.cpp	/^  mutable pthread_rwlock_t rw_lock_;$/;"	m	class:apache::thrift::concurrency::ReadWriteMutex::impl	file:
rw_mutex_	concurrency/Mutex.h	/^  const ReadWriteMutex& rw_mutex_;$/;"	m	class:apache::thrift::concurrency::RWGuard
seekToChunk	transport/TFileTransport.cpp	/^void TFileTransport::seekToChunk(int32_t chunk) {$/;"	f	class:apache::thrift::transport::TFileTransport
seekToChunk	transport/TTransportUtils.cpp	/^void TPipedFileReaderTransport::seekToChunk(int32_t chunk) {$/;"	f	class:apache::thrift::transport::TPipedFileReaderTransport
seekToEnd	transport/TFileTransport.cpp	/^void TFileTransport::seekToEnd() {$/;"	f	class:apache::thrift::transport::TFileTransport
seekToEnd	transport/TTransportUtils.cpp	/^void TPipedFileReaderTransport::seekToEnd() {$/;"	f	class:apache::thrift::transport::TPipedFileReaderTransport
self_	concurrency/BoostThreadFactory.cpp	/^  weak_ptr<BoostThread> self_;$/;"	m	class:apache::thrift::concurrency::BoostThread	file:
self_	concurrency/PosixThreadFactory.cpp	/^  weak_ptr<PthreadThread> self_;$/;"	m	class:apache::thrift::concurrency::PthreadThread	file:
sendAndRecvMessage	async/TAsyncChannel.cpp	/^void TAsyncChannel::sendAndRecvMessage(const VoidCallback& cob,$/;"	f	class:apache::thrift::async::TAsyncChannel
sendAndRecvMessage	async/TEvhttpClientChannel.cpp	/^void TEvhttpClientChannel::sendAndRecvMessage(const VoidCallback& cob,$/;"	f	class:apache::thrift::async::TEvhttpClientChannel
sendMessage	async/TEvhttpClientChannel.cpp	/^void TEvhttpClientChannel::sendMessage(const VoidCallback& cob,$/;"	f	class:apache::thrift::async::TEvhttpClientChannel
sendTimeout_	transport/TServerSocket.h	/^  int sendTimeout_;$/;"	m	class:apache::thrift::transport::TServerSocket
sendTimeout_	transport/TSocket.h	/^  int sendTimeout_;$/;"	m	class:apache::thrift::transport::TSocket
send_aliveSince	gen-cpp-fb/FacebookService.cpp	/^int32_t FacebookServiceConcurrentClient::send_aliveSince()$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
send_aliveSince	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceClient::send_aliveSince()$/;"	f	class:facebook::fb303::FacebookServiceClient
send_getCounter	gen-cpp-fb/FacebookService.cpp	/^int32_t FacebookServiceConcurrentClient::send_getCounter(const std::string& key)$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
send_getCounter	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceClient::send_getCounter(const std::string& key)$/;"	f	class:facebook::fb303::FacebookServiceClient
send_getCounters	gen-cpp-fb/FacebookService.cpp	/^int32_t FacebookServiceConcurrentClient::send_getCounters()$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
send_getCounters	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceClient::send_getCounters()$/;"	f	class:facebook::fb303::FacebookServiceClient
send_getCpuProfile	gen-cpp-fb/FacebookService.cpp	/^int32_t FacebookServiceConcurrentClient::send_getCpuProfile(const int32_t profileDurationInSec)$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
send_getCpuProfile	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceClient::send_getCpuProfile(const int32_t profileDurationInSec)$/;"	f	class:facebook::fb303::FacebookServiceClient
send_getName	gen-cpp-fb-s/FacebookService.cpp	/^int32_t FacebookServiceConcurrentClient::send_getName()$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
send_getName	gen-cpp-fb-s/FacebookService.cpp	/^void FacebookServiceClient::send_getName()$/;"	f	class:facebook::fb303::FacebookServiceClient
send_getName	gen-cpp-fb/FacebookService.cpp	/^int32_t FacebookServiceConcurrentClient::send_getName()$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
send_getName	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceClient::send_getName()$/;"	f	class:facebook::fb303::FacebookServiceClient
send_getOption	gen-cpp-fb/FacebookService.cpp	/^int32_t FacebookServiceConcurrentClient::send_getOption(const std::string& key)$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
send_getOption	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceClient::send_getOption(const std::string& key)$/;"	f	class:facebook::fb303::FacebookServiceClient
send_getOptions	gen-cpp-fb/FacebookService.cpp	/^int32_t FacebookServiceConcurrentClient::send_getOptions()$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
send_getOptions	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceClient::send_getOptions()$/;"	f	class:facebook::fb303::FacebookServiceClient
send_getStatus	gen-cpp-fb/FacebookService.cpp	/^int32_t FacebookServiceConcurrentClient::send_getStatus()$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
send_getStatus	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceClient::send_getStatus()$/;"	f	class:facebook::fb303::FacebookServiceClient
send_getStatusDetails	gen-cpp-fb/FacebookService.cpp	/^int32_t FacebookServiceConcurrentClient::send_getStatusDetails()$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
send_getStatusDetails	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceClient::send_getStatusDetails()$/;"	f	class:facebook::fb303::FacebookServiceClient
send_getVersion	gen-cpp-fb/FacebookService.cpp	/^int32_t FacebookServiceConcurrentClient::send_getVersion()$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
send_getVersion	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceClient::send_getVersion()$/;"	f	class:facebook::fb303::FacebookServiceClient
send_reinitialize	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceClient::send_reinitialize()$/;"	f	class:facebook::fb303::FacebookServiceClient
send_reinitialize	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceConcurrentClient::send_reinitialize()$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
send_setOption	gen-cpp-fb-s/FacebookService.cpp	/^int32_t FacebookServiceConcurrentClient::send_setOption(const std::string& key, const std::string& value)$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
send_setOption	gen-cpp-fb-s/FacebookService.cpp	/^void FacebookServiceClient::send_setOption(const std::string& key, const std::string& value)$/;"	f	class:facebook::fb303::FacebookServiceClient
send_setOption	gen-cpp-fb/FacebookService.cpp	/^int32_t FacebookServiceConcurrentClient::send_setOption(const std::string& key, const std::string& value)$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
send_setOption	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceClient::send_setOption(const std::string& key, const std::string& value)$/;"	f	class:facebook::fb303::FacebookServiceClient
send_shutdown	gen-cpp-fb-s/FacebookService.cpp	/^void FacebookServiceClient::send_shutdown()$/;"	f	class:facebook::fb303::FacebookServiceClient
send_shutdown	gen-cpp-fb-s/FacebookService.cpp	/^void FacebookServiceConcurrentClient::send_shutdown()$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
send_shutdown	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceClient::send_shutdown()$/;"	f	class:facebook::fb303::FacebookServiceClient
send_shutdown	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceConcurrentClient::send_shutdown()$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
separator	protocol/TMultiplexedProtocol.h	/^  const std::string separator;$/;"	m	class:apache::thrift::protocol::TMultiplexedProtocol
seqid	processor/TMultiplexedProcessor.h	/^  int32_t seqid;$/;"	m	class:apache::thrift::protocol::StoredMessageProtocol
seqidMutex_	async/TConcurrentClientSyncInfo.h	/^  ::apache::thrift::concurrency::Mutex seqidMutex_;$/;"	m	class:apache::thrift::async::TConcurrentClientSyncInfo
seqidPending_	async/TConcurrentClientSyncInfo.h	/^  int32_t seqidPending_;$/;"	m	class:apache::thrift::async::TConcurrentClientSyncInfo
seqidToMonitorMap_	async/TConcurrentClientSyncInfo.h	/^  MonitorMap seqidToMonitorMap_;$/;"	m	class:apache::thrift::async::TConcurrentClientSyncInfo
seqid_	async/TConcurrentClientSyncInfo.h	/^  int32_t seqid_;$/;"	m	class:apache::thrift::async::TConcurrentRecvSentry
serve	async/TEvhttpServer.cpp	/^int TEvhttpServer::serve() {$/;"	f	class:apache::thrift::async::TEvhttpServer
serve	server/TNonblockingServer.cpp	/^void TNonblockingServer::serve() {$/;"	f	class:apache::thrift::server::TNonblockingServer
serve	server/TServerFramework.cpp	/^void TServerFramework::serve() {$/;"	f	class:apache::thrift::server::TServerFramework
serve	server/TThreadPoolServer.cpp	/^void TThreadPoolServer::serve() {$/;"	f	class:apache::thrift::server::TThreadPoolServer
serve	server/TThreadedServer.cpp	/^void TThreadedServer::serve() {$/;"	f	class:apache::thrift::server::TThreadedServer
server	server/TConnectedClient.cpp	/^namespace server {$/;"	n	namespace:apache::thrift	file:
server	server/TConnectedClient.h	/^namespace server {$/;"	n	namespace:apache::thrift
server	server/TNonblockingServer.cpp	/^namespace server {$/;"	n	namespace:apache::thrift	file:
server	server/TNonblockingServer.h	/^namespace server {$/;"	n	namespace:apache::thrift
server	server/TServer.cpp	/^namespace server {$/;"	n	namespace:apache::thrift	file:
server	server/TServer.h	/^namespace server {$/;"	n	namespace:apache::thrift
server	server/TServerFramework.cpp	/^namespace server {$/;"	n	namespace:apache::thrift	file:
server	server/TServerFramework.h	/^namespace server {$/;"	n	namespace:apache::thrift
server	server/TSimpleServer.cpp	/^namespace server {$/;"	n	namespace:apache::thrift	file:
server	server/TSimpleServer.h	/^namespace server {$/;"	n	namespace:apache::thrift
server	server/TThreadPoolServer.cpp	/^namespace server {$/;"	n	namespace:apache::thrift	file:
server	server/TThreadPoolServer.h	/^namespace server {$/;"	n	namespace:apache::thrift
server	server/TThreadedServer.cpp	/^namespace server {$/;"	n	namespace:apache::thrift	file:
server	server/TThreadedServer.h	/^namespace server {$/;"	n	namespace:apache::thrift
server	transport/TSSLSocket.h	/^  bool server() const { return server_; }$/;"	f	class:apache::thrift::transport::TSSLSocket
server	transport/TSSLSocket.h	/^  virtual bool server() const { return server_; }$/;"	f	class:apache::thrift::transport::TSSLSocketFactory
server	transport/TSSLSocket.h	/^  virtual void server(bool flag) { server_ = flag; }$/;"	f	class:apache::thrift::transport::TSSLSocketFactory
server	transport/TSSLSocket.h	/^  void server(bool flag) { server_ = flag; }$/;"	f	class:apache::thrift::transport::TSSLSocket
serverEventHandler_	server/TNonblockingServer.cpp	/^  boost::shared_ptr<TServerEventHandler> serverEventHandler_;$/;"	m	class:apache::thrift::server::TNonblockingServer::TConnection	file:
serverEventHandler_	server/TNonblockingServer.cpp	/^  boost::shared_ptr<TServerEventHandler> serverEventHandler_;$/;"	m	class:apache::thrift::server::TNonblockingServer::TConnection::Task	file:
serverEvent_	server/TNonblockingServer.h	/^  struct event serverEvent_;$/;"	m	class:apache::thrift::server::TNonblockingIOThread	typeref:struct:apache::thrift::server::TNonblockingIOThread::event
serverOverloaded	server/TNonblockingServer.cpp	/^bool TNonblockingServer::serverOverloaded() {$/;"	f	class:apache::thrift::server::TNonblockingServer
serverSocket_	server/TNonblockingServer.h	/^  THRIFT_SOCKET serverSocket_;$/;"	m	class:apache::thrift::server::TNonblockingServer
serverSocket_	transport/TServerSocket.h	/^  THRIFT_SOCKET serverSocket_;$/;"	m	class:apache::thrift::transport::TServerSocket
serverTransport_	server/TServer.h	/^  boost::shared_ptr<TServerTransport> serverTransport_;$/;"	m	class:apache::thrift::server::TServer
server_	qt/TQTcpServer.h	/^  boost::shared_ptr<QTcpServer> server_;$/;"	m	class:apache::thrift::async::TQTcpServer
server_	server/TNonblockingServer.cpp	/^  TNonblockingServer* server_;$/;"	m	class:apache::thrift::server::TNonblockingServer::TConnection	file:
server_	server/TNonblockingServer.h	/^  TNonblockingServer* server_;$/;"	m	class:apache::thrift::server::TNonblockingIOThread
server_	transport/TSSLSocket.h	/^  bool server_;$/;"	m	class:apache::thrift::transport::TSSLSocket
server_	transport/TSSLSocket.h	/^  bool server_;$/;"	m	class:apache::thrift::transport::TSSLSocketFactory
servers_	transport/TSocketPool.h	/^  std::vector<boost::shared_ptr<TSocketPoolServer> > servers_;$/;"	m	class:apache::thrift::transport::TSocketPool
serviceName	protocol/TMultiplexedProtocol.h	/^  const std::string serviceName;$/;"	m	class:apache::thrift::protocol::TMultiplexedProtocol
services	processor/TMultiplexedProcessor.h	/^  services_t services;$/;"	m	class:apache::thrift::TMultiplexedProcessor
services_t	processor/TMultiplexedProcessor.h	/^  typedef std::map<std::string, shared_ptr<TProcessor> > services_t;$/;"	t	class:apache::thrift::TMultiplexedProcessor
setAcceptBacklog	transport/TServerSocket.cpp	/^void TServerSocket::setAcceptBacklog(int accBacklog) {$/;"	f	class:apache::thrift::transport::TServerSocket
setAcceptCallback	transport/TServerSocket.h	/^  void setAcceptCallback(const socket_func_t& acceptCallback) { acceptCallback_ = acceptCallback; }$/;"	f	class:apache::thrift::transport::TServerSocket
setAcceptTimeout	transport/TServerSocket.cpp	/^void TServerSocket::setAcceptTimeout(int accTimeout) {$/;"	f	class:apache::thrift::transport::TServerSocket
setAlwaysTryLast	transport/TSocketPool.cpp	/^void TSocketPool::setAlwaysTryLast(bool alwaysTryLast) {$/;"	f	class:apache::thrift::transport::TSocketPool
setAnonymous	transport/TPipeServer.cpp	/^void TPipeServer::setAnonymous(bool anon) {$/;"	f	class:apache::thrift::transport::TPipeServer
setAsyncServer	async/TAsyncProcessor.h	/^  void setAsyncServer(const TEventServer* server) { asyncServer_ = server; }$/;"	f	class:apache::thrift::async::TAsyncProcessor
setBufferSize	transport/TPipeServer.cpp	/^void TPipeServer::setBufferSize(int bufsize) {$/;"	f	class:apache::thrift::transport::TPipeServer
setCachedAddress	transport/TSocket.cpp	/^void TSocket::setCachedAddress(const sockaddr* addr, socklen_t len) {$/;"	f	class:apache::thrift::transport::TSocket
setChunkSize	transport/TFileTransport.h	/^  void setChunkSize(uint32_t chunkSize) {$/;"	f	class:apache::thrift::transport::TFileTransport
setConcurrentClientLimit	server/TServerFramework.cpp	/^void TServerFramework::setConcurrentClientLimit(int64_t newLimit) {$/;"	f	class:apache::thrift::server::TServerFramework
setConcurrentClientLimit	server/TSimpleServer.cpp	/^void TSimpleServer::setConcurrentClientLimit(int64_t) {$/;"	f	class:apache::thrift::server::TSimpleServer
setConnTimeout	transport/TPipe.cpp	/^void TPipe::setConnTimeout(long seconds) {$/;"	f	class:apache::thrift::transport::TPipe
setConnTimeout	transport/TSocket.cpp	/^void TSocket::setConnTimeout(int ms) {$/;"	f	class:apache::thrift::transport::TSocket
setConnectionStackLimit	server/TNonblockingServer.h	/^  void setConnectionStackLimit(size_t sz) { connectionStackLimit_ = sz; }$/;"	f	class:apache::thrift::server::TNonblockingServer
setContainerSizeLimit	protocol/TBinaryProtocol.h	/^  void setContainerSizeLimit(int32_t container_limit) { container_limit_ = container_limit; }$/;"	f	class:apache::thrift::protocol::TBinaryProtocolFactoryT
setContainerSizeLimit	protocol/TBinaryProtocol.h	/^  void setContainerSizeLimit(int32_t container_limit) { container_limit_ = container_limit; }$/;"	f	class:apache::thrift::protocol::TBinaryProtocolT
setContainerSizeLimit	protocol/TCompactProtocol.h	/^  void setContainerSizeLimit(int32_t container_limit) { container_limit_ = container_limit; }$/;"	f	class:apache::thrift::protocol::TCompactProtocolFactoryT
setCurrentServer	transport/TSocketPool.cpp	/^void TSocketPool::setCurrentServer(const shared_ptr<TSocketPoolServer>& server) {$/;"	f	class:apache::thrift::transport::TSocketPool
setCurrentThreadHighPriority	server/TNonblockingServer.cpp	/^void TNonblockingIOThread::setCurrentThreadHighPriority(bool value) {$/;"	f	class:apache::thrift::server::TNonblockingIOThread
setDetached	concurrency/BoostThreadFactory.cpp	/^  void setDetached(bool value) { detached_ = value; }$/;"	f	class:apache::thrift::concurrency::BoostThreadFactory::Impl
setDetached	concurrency/BoostThreadFactory.cpp	/^void BoostThreadFactory::setDetached(bool value) {$/;"	f	class:apache::thrift::concurrency::BoostThreadFactory
setDetached	concurrency/PosixThreadFactory.cpp	/^  void setDetached(bool value) { detached_ = value; }$/;"	f	class:apache::thrift::concurrency::PosixThreadFactory::Impl
setDetached	concurrency/PosixThreadFactory.cpp	/^void PosixThreadFactory::setDetached(bool value) {$/;"	f	class:apache::thrift::concurrency::PosixThreadFactory
setDetached	concurrency/StdThreadFactory.cpp	/^  void setDetached(bool value) { detached_ = value; }$/;"	f	class:apache::thrift::concurrency::StdThreadFactory::Impl
setDetached	concurrency/StdThreadFactory.cpp	/^void StdThreadFactory::setDetached(bool value) {$/;"	f	class:apache::thrift::concurrency::StdThreadFactory
setEofSleepTimeUs	transport/TFileTransport.h	/^  void setEofSleepTimeUs(uint32_t eofSleepTime) {$/;"	f	class:apache::thrift::transport::TFileTransport
setEventBufferSize	transport/TFileTransport.h	/^  void setEventBufferSize(uint32_t bufferSize) {$/;"	f	class:apache::thrift::transport::TFileTransport
setEventHandler	TProcessor.h	/^  void setEventHandler(boost::shared_ptr<TProcessorEventHandler> eventHandler) {$/;"	f	class:apache::thrift::TProcessor
setEventHandler	async/TAsyncProcessor.h	/^  void setEventHandler(boost::shared_ptr<TProcessorEventHandler> eventHandler) {$/;"	f	class:apache::thrift::async::TAsyncProcessor
setExpireCallback	concurrency/ThreadManager.cpp	/^void ThreadManager::Impl::setExpireCallback(ExpireCallback expireCallback) {$/;"	f	class:apache::thrift::concurrency::ThreadManager::Impl
setFD	transport/TFDTransport.h	/^  void setFD(int fd) { fd_ = fd; }$/;"	f	class:apache::thrift::transport::TFDTransport
setFlags	server/TNonblockingServer.cpp	/^void TNonblockingServer::TConnection::setFlags(short eventFlags) {$/;"	f	class:apache::thrift::server::TNonblockingServer::TConnection
setFlushMaxBytes	transport/TFileTransport.h	/^  void setFlushMaxBytes(uint32_t flushMaxBytes) {$/;"	f	class:apache::thrift::transport::TFileTransport
setFlushMaxUs	transport/TFileTransport.h	/^  void setFlushMaxUs(uint32_t flushMaxUs) {$/;"	f	class:apache::thrift::transport::TFileTransport
setGenericTimeout	transport/TSocket.cpp	/^void setGenericTimeout(THRIFT_SOCKET s, int timeout_ms, int optname) {$/;"	f	namespace:apache::thrift::transport
setHost	transport/TSocket.cpp	/^void TSocket::setHost(string host) {$/;"	f	class:apache::thrift::transport::TSocket
setIdle	server/TNonblockingServer.cpp	/^  void setIdle() { setFlags(0); }$/;"	f	class:apache::thrift::server::TNonblockingServer::TConnection	file:
setIdleBufferMemLimit	server/TNonblockingServer.h	/^  void setIdleBufferMemLimit(size_t limit) { idleReadBufferLimit_ = limit; }$/;"	f	class:apache::thrift::server::TNonblockingServer
setIdleReadBufferLimit	server/TNonblockingServer.h	/^  void setIdleReadBufferLimit(size_t limit) { idleReadBufferLimit_ = limit; }$/;"	f	class:apache::thrift::server::TNonblockingServer
setIdleWriteBufferLimit	server/TNonblockingServer.h	/^  void setIdleWriteBufferLimit(size_t limit) { idleWriteBufferLimit_ = limit; }$/;"	f	class:apache::thrift::server::TNonblockingServer
setInputProtocolFactory	server/TServer.h	/^  void setInputProtocolFactory(boost::shared_ptr<TProtocolFactory> inputProtocolFactory) {$/;"	f	class:apache::thrift::server::TServer
setInputTransportFactory	server/TServer.h	/^  void setInputTransportFactory(boost::shared_ptr<TTransportFactory> inputTransportFactory) {$/;"	f	class:apache::thrift::server::TServer
setInterruptableChildren	transport/TServerSocket.cpp	/^void TServerSocket::setInterruptableChildren(bool enable) {$/;"	f	class:apache::thrift::transport::TServerSocket
setKeepAlive	transport/TServerSocket.h	/^  void setKeepAlive(bool keepAlive) { keepAlive_ = keepAlive; }$/;"	f	class:apache::thrift::transport::TServerSocket
setKeepAlive	transport/TSocket.cpp	/^void TSocket::setKeepAlive(bool keepAlive) {$/;"	f	class:apache::thrift::transport::TSocket
setLinger	transport/TSocket.cpp	/^void TSocket::setLinger(bool on, int linger) {$/;"	f	class:apache::thrift::transport::TSocket
setListenCallback	transport/TServerSocket.h	/^  void setListenCallback(const socket_func_t& listenCallback) { listenCallback_ = listenCallback; }$/;"	f	class:apache::thrift::transport::TServerSocket
setManualOpenSSLInitialization	transport/TSSLSocket.h	/^  static void setManualOpenSSLInitialization(bool manualOpenSSLInitialization) {$/;"	f	class:apache::thrift::transport::TSSLSocketFactory
setMaxActiveProcessors	server/TNonblockingServer.h	/^  void setMaxActiveProcessors(size_t maxActiveProcessors) {$/;"	f	class:apache::thrift::server::TNonblockingServer
setMaxConnections	server/TNonblockingServer.h	/^  void setMaxConnections(size_t maxConnections) { maxConnections_ = maxConnections; }$/;"	f	class:apache::thrift::server::TNonblockingServer
setMaxConnections	transport/TPipeServer.cpp	/^void TPipeServer::setMaxConnections(uint32_t maxconnections) {$/;"	f	class:apache::thrift::transport::TPipeServer
setMaxConsecutiveFailures	transport/TSocketPool.cpp	/^void TSocketPool::setMaxConsecutiveFailures(int maxConsecutiveFailures) {$/;"	f	class:apache::thrift::transport::TSocketPool
setMaxCorruptedEvents	transport/TFileTransport.h	/^  void setMaxCorruptedEvents(uint32_t maxCorruptedEvents) {$/;"	f	class:apache::thrift::transport::TFileTransport
setMaxEventSize	transport/TFileTransport.h	/^  void setMaxEventSize(uint32_t maxEventSize) { maxEventSize_ = maxEventSize; }$/;"	f	class:apache::thrift::transport::TFileTransport
setMaxFrameSize	server/TNonblockingServer.h	/^  void setMaxFrameSize(size_t maxFrameSize) { maxFrameSize_ = maxFrameSize; }$/;"	f	class:apache::thrift::server::TNonblockingServer
setMaxFrameSize	transport/TBufferTransports.h	/^  void setMaxFrameSize(uint32_t maxFrameSize) { maxFrameSize_ = maxFrameSize; }$/;"	f	class:apache::thrift::transport::TFramedTransport
setMaxRecvRetries	transport/TSocket.cpp	/^void TSocket::setMaxRecvRetries(int maxRecvRetries) {$/;"	f	class:apache::thrift::transport::TSocket
setNoDelay	transport/TSocket.cpp	/^void TSocket::setNoDelay(bool noDelay) {$/;"	f	class:apache::thrift::transport::TSocket
setNumIOThreads	server/TNonblockingServer.h	/^  void setNumIOThreads(size_t numThreads) {$/;"	f	class:apache::thrift::server::TNonblockingServer
setNumRetries	transport/TSocketPool.cpp	/^void TSocketPool::setNumRetries(int numRetries) {$/;"	f	class:apache::thrift::transport::TSocketPool
setOption	gen-cpp-fb-s/FacebookService.cpp	/^void FacebookServiceClient::setOption(const std::string& key, const std::string& value)$/;"	f	class:facebook::fb303::FacebookServiceClient
setOption	gen-cpp-fb-s/FacebookService.cpp	/^void FacebookServiceConcurrentClient::setOption(const std::string& key, const std::string& value)$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
setOption	gen-cpp-fb-s/FacebookService.h	/^  void setOption(const std::string& \/* key *\/, const std::string& \/* value *\/) {$/;"	f	class:facebook::fb303::FacebookServiceNull
setOption	gen-cpp-fb-s/FacebookService.h	/^  void setOption(const std::string& key, const std::string& value) {$/;"	f	class:facebook::fb303::FacebookServiceMultiface
setOption	gen-cpp-fb-s/FacebookService_server.skeleton.cpp	/^  void setOption(const std::string& key, const std::string& value) {$/;"	f	class:FacebookServiceHandler
setOption	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceClient::setOption(const std::string& key, const std::string& value)$/;"	f	class:facebook::fb303::FacebookServiceClient
setOption	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceConcurrentClient::setOption(const std::string& key, const std::string& value)$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
setOption	gen-cpp-fb/FacebookService.h	/^  void setOption(const std::string& \/* key *\/, const std::string& \/* value *\/) {$/;"	f	class:facebook::fb303::FacebookServiceNull
setOption	gen-cpp-fb/FacebookService.h	/^  void setOption(const std::string& key, const std::string& value) {$/;"	f	class:facebook::fb303::FacebookServiceMultiface
setOption	gen-cpp-fb/FacebookService_server.skeleton.cpp	/^  void setOption(const std::string& key, const std::string& value) {$/;"	f	class:FacebookServiceHandler
setOutputFunction	TOutput.h	/^  inline void setOutputFunction(void (*function)(const char*)) { f_ = function; }$/;"	f	class:apache::thrift::TOutput
setOutputProtocolFactory	server/TServer.h	/^  void setOutputProtocolFactory(boost::shared_ptr<TProtocolFactory> outputProtocolFactory) {$/;"	f	class:apache::thrift::server::TServer
setOutputTransportFactory	server/TServer.h	/^  void setOutputTransportFactory(boost::shared_ptr<TTransportFactory> outputTransportFactory) {$/;"	f	class:apache::thrift::server::TServer
setOverloadAction	server/TNonblockingServer.h	/^  void setOverloadAction(TOverloadAction overloadAction) { overloadAction_ = overloadAction; }$/;"	f	class:apache::thrift::server::TNonblockingServer
setOverloadHysteresis	server/TNonblockingServer.h	/^  void setOverloadHysteresis(double hysteresisFraction) {$/;"	f	class:apache::thrift::server::TNonblockingServer
setPipeHandle	transport/TPipe.cpp	/^  virtual void setPipeHandle(HANDLE PipeRd) { PipeRd_.reset(PipeRd); }$/;"	f	class:apache::thrift::transport::TAnonPipeImpl
setPipeHandle	transport/TPipe.cpp	/^  virtual void setPipeHandle(HANDLE pipehandle) { Pipe_.reset(pipehandle); }$/;"	f	class:apache::thrift::transport::TNamedPipeImpl
setPipeHandle	transport/TPipe.cpp	/^  virtual void setPipeHandle(HANDLE pipehandle) { Pipe_.reset(pipehandle); }$/;"	f	class:apache::thrift::transport::TWaitableNamedPipeImpl
setPipeHandle	transport/TPipe.cpp	/^void TPipe::setPipeHandle(HANDLE pipehandle) {$/;"	f	class:apache::thrift::transport::TPipe
setPipeOnRead	transport/TTransportUtils.h	/^  void setPipeOnRead(bool pipeVal) { pipeOnRead_ = pipeVal; }$/;"	f	class:apache::thrift::transport::TPipedTransport
setPipeOnWrite	transport/TTransportUtils.h	/^  void setPipeOnWrite(bool pipeVal) { pipeOnWrite_ = pipeVal; }$/;"	f	class:apache::thrift::transport::TPipedTransport
setPipename	transport/TPipe.cpp	/^void TPipe::setPipename(const std::string& pipename) {$/;"	f	class:apache::thrift::transport::TPipe
setPipename	transport/TPipeServer.cpp	/^void TPipeServer::setPipename(const std::string& pipename) {$/;"	f	class:apache::thrift::transport::TPipeServer
setPort	transport/TSocket.cpp	/^void TSocket::setPort(int port) {$/;"	f	class:apache::thrift::transport::TSocket
setPriority	concurrency/PosixThreadFactory.cpp	/^  void setPriority(PRIORITY value) { priority_ = value; }$/;"	f	class:apache::thrift::concurrency::PosixThreadFactory::Impl
setPriority	concurrency/PosixThreadFactory.cpp	/^void PosixThreadFactory::setPriority(PosixThreadFactory::PRIORITY value) {$/;"	f	class:apache::thrift::concurrency::PosixThreadFactory
setProtocol	gen-cpp-fb-s/FacebookService.h	/^  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {$/;"	f	class:facebook::fb303::FacebookServiceClient
setProtocol	gen-cpp-fb-s/FacebookService.h	/^  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
setProtocol	gen-cpp-fb-s/FacebookService.h	/^  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {$/;"	f	class:facebook::fb303::FacebookServiceClient
setProtocol	gen-cpp-fb-s/FacebookService.h	/^  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
setProtocol	gen-cpp-fb/FacebookService.h	/^  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {$/;"	f	class:facebook::fb303::FacebookServiceClient
setProtocol	gen-cpp-fb/FacebookService.h	/^  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
setProtocol	gen-cpp-fb/FacebookService.h	/^  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {$/;"	f	class:facebook::fb303::FacebookServiceClient
setProtocol	gen-cpp-fb/FacebookService.h	/^  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
setRandomize	transport/TSocketPool.cpp	/^void TSocketPool::setRandomize(bool randomize) {$/;"	f	class:apache::thrift::transport::TSocketPool
setRead	server/TNonblockingServer.cpp	/^  void setRead() { setFlags(EV_READ | EV_PERSIST); }$/;"	f	class:apache::thrift::server::TNonblockingServer::TConnection	file:
setReadBuffSize	transport/TFileTransport.h	/^  void setReadBuffSize(uint32_t readBuffSize) {$/;"	f	class:apache::thrift::transport::TFileTransport
setReadBuffer	transport/TBufferTransports.h	/^  void setReadBuffer(uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::TBufferBase
setReadTimeout	transport/TFileTransport.h	/^  void setReadTimeout(int32_t readTimeout) { readTimeout_ = readTimeout; }$/;"	f	class:apache::thrift::transport::TFileTransport
setReadTimeout	transport/TTransportUtils.cpp	/^void TPipedFileReaderTransport::setReadTimeout(int32_t readTimeout) {$/;"	f	class:apache::thrift::transport::TPipedFileReaderTransport
setRecurisionLimit	protocol/TProtocol.h	/^  void setRecurisionLimit(uint32_t depth) {recursion_limit_ = depth;}$/;"	f	class:apache::thrift::protocol::TProtocol
setRecvTimeout	transport/TServerSocket.cpp	/^void TServerSocket::setRecvTimeout(int recvTimeout) {$/;"	f	class:apache::thrift::transport::TServerSocket
setRecvTimeout	transport/TSocket.cpp	/^void TSocket::setRecvTimeout(int ms) {$/;"	f	class:apache::thrift::transport::TSocket
setResizeBufferEveryN	server/TNonblockingServer.h	/^  void setResizeBufferEveryN(int32_t count) { resizeBufferEveryN_ = count; }$/;"	f	class:apache::thrift::server::TNonblockingServer
setRetryDelay	transport/TServerSocket.cpp	/^void TServerSocket::setRetryDelay(int retryDelay) {$/;"	f	class:apache::thrift::transport::TServerSocket
setRetryInterval	transport/TSocketPool.cpp	/^void TSocketPool::setRetryInterval(int retryInterval) {$/;"	f	class:apache::thrift::transport::TSocketPool
setRetryLimit	transport/TServerSocket.cpp	/^void TServerSocket::setRetryLimit(int retryLimit) {$/;"	f	class:apache::thrift::transport::TServerSocket
setSendTimeout	transport/TServerSocket.cpp	/^void TServerSocket::setSendTimeout(int sendTimeout) {$/;"	f	class:apache::thrift::transport::TServerSocket
setSendTimeout	transport/TSocket.cpp	/^void TSocket::setSendTimeout(int ms) {$/;"	f	class:apache::thrift::transport::TSocket
setServerEventHandler	server/TServer.h	/^  void setServerEventHandler(boost::shared_ptr<TServerEventHandler> eventHandler) {$/;"	f	class:apache::thrift::server::TServer
setServers	transport/TSocketPool.cpp	/^void TSocketPool::setServers(const vector<shared_ptr<TSocketPoolServer> >& servers) {$/;"	f	class:apache::thrift::transport::TSocketPool
setSocketFD	transport/TSocket.cpp	/^void TSocket::setSocketFD(THRIFT_SOCKET socket) {$/;"	f	class:apache::thrift::transport::TSocket
setStackSize	concurrency/PosixThreadFactory.cpp	/^  void setStackSize(int value) { stackSize_ = value; }$/;"	f	class:apache::thrift::concurrency::PosixThreadFactory::Impl
setStackSize	concurrency/PosixThreadFactory.cpp	/^void PosixThreadFactory::setStackSize(int value) {$/;"	f	class:apache::thrift::concurrency::PosixThreadFactory
setStrict	protocol/TBinaryProtocol.h	/^  void setStrict(bool strict_read, bool strict_write) {$/;"	f	class:apache::thrift::protocol::TBinaryProtocolFactoryT
setStrict	protocol/TBinaryProtocol.h	/^  void setStrict(bool strict_read, bool strict_write) {$/;"	f	class:apache::thrift::protocol::TBinaryProtocolT
setStringPrefixSize	protocol/TDebugProtocol.h	/^  void setStringPrefixSize(int32_t string_prefix_size) { string_prefix_size_ = string_prefix_size; }$/;"	f	class:apache::thrift::protocol::TDebugProtocol
setStringSizeLimit	protocol/TBinaryProtocol.h	/^  void setStringSizeLimit(int32_t string_limit) { string_limit_ = string_limit; }$/;"	f	class:apache::thrift::protocol::TBinaryProtocolFactoryT
setStringSizeLimit	protocol/TBinaryProtocol.h	/^  void setStringSizeLimit(int32_t string_limit) { string_limit_ = string_limit; }$/;"	f	class:apache::thrift::protocol::TBinaryProtocolT
setStringSizeLimit	protocol/TCompactProtocol.h	/^  void setStringSizeLimit(int32_t string_limit) { string_limit_ = string_limit; }$/;"	f	class:apache::thrift::protocol::TCompactProtocolFactoryT
setStringSizeLimit	protocol/TDebugProtocol.h	/^  void setStringSizeLimit(int32_t string_limit) { string_limit_ = string_limit; }$/;"	f	class:apache::thrift::protocol::TDebugProtocol
setTargetTransport	processor/PeekProcessor.cpp	/^void PeekProcessor::setTargetTransport(boost::shared_ptr<TTransport> targetTransport) {$/;"	f	class:apache::thrift::processor::PeekProcessor
setTaskExpiration	server/TThreadPoolServer.cpp	/^void TThreadPoolServer::setTaskExpiration(int64_t value) {$/;"	f	class:apache::thrift::server::TThreadPoolServer
setTaskExpireTime	server/TNonblockingServer.h	/^  void setTaskExpireTime(int64_t taskExpireTime) { taskExpireTime_ = taskExpireTime; }$/;"	f	class:apache::thrift::server::TNonblockingServer
setTcpRecvBuffer	transport/TServerSocket.cpp	/^void TServerSocket::setTcpRecvBuffer(int tcpRecvBuffer) {$/;"	f	class:apache::thrift::transport::TServerSocket
setTcpSendBuffer	transport/TServerSocket.cpp	/^void TServerSocket::setTcpSendBuffer(int tcpSendBuffer) {$/;"	f	class:apache::thrift::transport::TServerSocket
setThread	server/TNonblockingServer.h	/^  void setThread(const boost::shared_ptr<Thread>& t) { thread_ = t; }$/;"	f	class:apache::thrift::server::TNonblockingIOThread
setThreadManager	server/TNonblockingServer.cpp	/^void TNonblockingServer::setThreadManager(boost::shared_ptr<ThreadManager> threadManager) {$/;"	f	class:apache::thrift::server::TNonblockingServer
setTimeout	server/TThreadPoolServer.cpp	/^void TThreadPoolServer::setTimeout(int64_t value) {$/;"	f	class:apache::thrift::server::TThreadPoolServer
setUseHighPriorityIOThreads	server/TNonblockingServer.h	/^  void setUseHighPriorityIOThreads(bool val) { useHighPriorityIOThreads_ = val; }$/;"	f	class:apache::thrift::server::TNonblockingServer
setUseLowMinRto	transport/TSocket.cpp	/^void TSocket::setUseLowMinRto(bool useLowMinRto) {$/;"	f	class:apache::thrift::transport::TSocket
setWrite	server/TNonblockingServer.cpp	/^  void setWrite() { setFlags(EV_WRITE | EV_PERSIST); }$/;"	f	class:apache::thrift::server::TNonblockingServer::TConnection	file:
setWriteBuffer	transport/TBufferTransports.h	/^  void setWriteBuffer(uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::TBufferBase
setWriteBufferDefaultSize	server/TNonblockingServer.h	/^  void setWriteBufferDefaultSize(size_t size) { writeBufferDefaultSize_ = size; }$/;"	f	class:apache::thrift::server::TNonblockingServer
setWrtPipeHandle	transport/TPipe.cpp	/^  virtual void setWrtPipeHandle(HANDLE PipeWrt) { PipeWrt_.reset(PipeWrt); }$/;"	f	class:apache::thrift::transport::TAnonPipeImpl
setWrtPipeHandle	transport/TPipe.cpp	/^  virtual void setWrtPipeHandle(HANDLE) {}$/;"	f	class:apache::thrift::transport::TPipeImpl
setWrtPipeHandle	transport/TPipe.cpp	/^void TPipe::setWrtPipeHandle(HANDLE pipehandle) {$/;"	f	class:apache::thrift::transport::TPipe
setup	transport/TSSLSocket.cpp	/^void TSSLSocketFactory::setup(boost::shared_ptr<TSSLSocket> ssl) {$/;"	f	class:apache::thrift::transport::TSSLSocketFactory
shift	transport/THttpTransport.cpp	/^void THttpTransport::shift() {$/;"	f	class:apache::thrift::transport::THttpTransport
shutdown	gen-cpp-fb-s/FacebookService.cpp	/^void FacebookServiceClient::shutdown()$/;"	f	class:facebook::fb303::FacebookServiceClient
shutdown	gen-cpp-fb-s/FacebookService.cpp	/^void FacebookServiceConcurrentClient::shutdown()$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
shutdown	gen-cpp-fb-s/FacebookService.h	/^  void shutdown() {$/;"	f	class:facebook::fb303::FacebookServiceMultiface
shutdown	gen-cpp-fb-s/FacebookService.h	/^  void shutdown() {$/;"	f	class:facebook::fb303::FacebookServiceNull
shutdown	gen-cpp-fb-s/FacebookService_server.skeleton.cpp	/^  void shutdown() {$/;"	f	class:FacebookServiceHandler
shutdown	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceClient::shutdown()$/;"	f	class:facebook::fb303::FacebookServiceClient
shutdown	gen-cpp-fb/FacebookService.cpp	/^void FacebookServiceConcurrentClient::shutdown()$/;"	f	class:facebook::fb303::FacebookServiceConcurrentClient
shutdown	gen-cpp-fb/FacebookService.h	/^  void shutdown() {$/;"	f	class:facebook::fb303::FacebookServiceMultiface
shutdown	gen-cpp-fb/FacebookService.h	/^  void shutdown() {$/;"	f	class:facebook::fb303::FacebookServiceNull
shutdown	gen-cpp-fb/FacebookService_server.skeleton.cpp	/^  void shutdown() {$/;"	f	class:FacebookServiceHandler
sink_	protocol/TProtocolTap.h	/^  boost::shared_ptr<TProtocol> sink_;$/;"	m	class:apache::thrift::protocol::TProtocolTap
size_	transport/TFileTransport.h	/^  uint32_t size_;$/;"	m	class:apache::thrift::transport::TFileTransportBuffer
skip	protocol/TProtocol.h	/^  uint32_t skip(TType type) {$/;"	f	class:apache::thrift::protocol::TProtocol
skip	protocol/TProtocol.h	/^uint32_t skip(Protocol_& prot, TType type) {$/;"	f	namespace:apache::thrift::protocol
skip	protocol/TVirtualProtocol.h	/^  uint32_t skip(TType type) { return ::apache::thrift::protocol::skip(*this, type); }$/;"	f	class:apache::thrift::protocol::TProtocolDefaults
skip	protocol/TVirtualProtocol.h	/^  uint32_t skip(TType type) {$/;"	f	class:apache::thrift::protocol::TVirtualProtocol
skip_	VirtualProfiling.cpp	/^  int skip_;$/;"	m	class:apache::thrift::Backtrace	file:
skip_virt	protocol/TProtocol.cpp	/^uint32_t TProtocol::skip_virt(TType type) {$/;"	f	class:apache::thrift::protocol::TProtocol
skip_virt	protocol/TVirtualProtocol.h	/^  virtual uint32_t skip_virt(TType type) { return static_cast<Protocol_*>(this)->skip(type); }$/;"	f	class:apache::thrift::protocol::TVirtualProtocol
socketClosed	qt/TQTcpServer.cpp	/^void TQTcpServer::socketClosed() {$/;"	f	class:apache::thrift::async::TQTcpServer
socketState_	server/TNonblockingServer.cpp	/^  TSocketState socketState_;$/;"	m	class:apache::thrift::server::TNonblockingServer::TConnection	file:
socket_	transport/TSocket.h	/^  THRIFT_SOCKET socket_;$/;"	m	class:apache::thrift::transport::TSocket
socket_	transport/TSocketPool.h	/^  THRIFT_SOCKET socket_;$/;"	m	class:apache::thrift::transport::TSocketPoolServer
socket_func_t	transport/TServerSocket.h	/^  typedef apache::thrift::stdcxx::function<void(THRIFT_SOCKET fd)> socket_func_t;$/;"	t	class:apache::thrift::transport::TServerSocket
source_	protocol/TProtocolTap.h	/^  boost::shared_ptr<TProtocol> source_;$/;"	m	class:apache::thrift::protocol::TProtocolTap
srcTrans_	transport/TTransportUtils.h	/^  boost::shared_ptr<TFileReaderTransport> srcTrans_;$/;"	m	class:apache::thrift::transport::TPipedFileReaderTransport
srcTrans_	transport/TTransportUtils.h	/^  boost::shared_ptr<TTransport> srcTrans_;$/;"	m	class:apache::thrift::transport::TPipedTransport
ssl_	transport/TSSLSocket.h	/^  SSL* ssl_;$/;"	m	class:apache::thrift::transport::TSSLSocket
stackSize_	concurrency/PosixThreadFactory.cpp	/^  int stackSize_;$/;"	m	class:apache::thrift::concurrency::PosixThreadFactory::Impl	file:
stackSize_	concurrency/PosixThreadFactory.cpp	/^  int stackSize_;$/;"	m	class:apache::thrift::concurrency::PthreadThread	file:
start	concurrency/BoostThreadFactory.cpp	/^  void start() {$/;"	f	class:apache::thrift::concurrency::BoostThread
start	concurrency/PosixThreadFactory.cpp	/^  void start() {$/;"	f	class:apache::thrift::concurrency::PthreadThread
start	concurrency/StdThreadFactory.cpp	/^  void start() {$/;"	f	class:apache::thrift::concurrency::StdThread
start	concurrency/ThreadManager.cpp	/^  void start() {$/;"	f	class:apache::thrift::concurrency::SimpleThreadManager
start	concurrency/ThreadManager.cpp	/^void ThreadManager::Impl::start() {$/;"	f	class:apache::thrift::concurrency::ThreadManager::Impl
start	concurrency/TimerManager.cpp	/^void TimerManager::start() {$/;"	f	class:apache::thrift::concurrency::TimerManager
startItem	protocol/TDebugProtocol.cpp	/^uint32_t TDebugProtocol::startItem() {$/;"	f	class:apache::thrift::protocol::TDebugProtocol
startWriterThread	transport/TFileTransport.h	/^  static void* startWriterThread(void* ptr) {$/;"	f	class:apache::thrift::transport::TFileTransport
started	concurrency/BoostThreadFactory.cpp	/^  enum STATE { uninitialized, starting, started, stopping, stopped };$/;"	e	enum:apache::thrift::concurrency::BoostThread::STATE	file:
started	concurrency/PosixThreadFactory.cpp	/^  enum STATE { uninitialized, starting, started, stopping, stopped };$/;"	e	enum:apache::thrift::concurrency::PthreadThread::STATE	file:
started	concurrency/StdThreadFactory.cpp	/^  enum STATE { uninitialized, starting, started, stopping, stopped };$/;"	e	enum:apache::thrift::concurrency::StdThread::STATE	file:
starting	concurrency/BoostThreadFactory.cpp	/^  enum STATE { uninitialized, starting, started, stopping, stopped };$/;"	e	enum:apache::thrift::concurrency::BoostThread::STATE	file:
starting	concurrency/PosixThreadFactory.cpp	/^  enum STATE { uninitialized, starting, started, stopping, stopped };$/;"	e	enum:apache::thrift::concurrency::PthreadThread::STATE	file:
starting	concurrency/StdThreadFactory.cpp	/^  enum STATE { uninitialized, starting, started, stopping, stopped };$/;"	e	enum:apache::thrift::concurrency::StdThread::STATE	file:
state	concurrency/ThreadManager.cpp	/^  ThreadManager::STATE state() const { return state_; }$/;"	f	class:apache::thrift::concurrency::ThreadManager::Impl
state	concurrency/TimerManager.cpp	/^TimerManager::STATE TimerManager::state() const {$/;"	f	class:apache::thrift::concurrency::TimerManager
state_	concurrency/BoostThreadFactory.cpp	/^  STATE state_;$/;"	m	class:apache::thrift::concurrency::BoostThread	file:
state_	concurrency/PosixThreadFactory.cpp	/^  STATE state_;$/;"	m	class:apache::thrift::concurrency::PthreadThread	file:
state_	concurrency/StdThreadFactory.cpp	/^  STATE state_;$/;"	m	class:apache::thrift::concurrency::StdThread	file:
state_	concurrency/ThreadManager.cpp	/^  STATE state_;$/;"	m	class:apache::thrift::concurrency::ThreadManager::Task	file:
state_	concurrency/ThreadManager.cpp	/^  STATE state_;$/;"	m	class:apache::thrift::concurrency::ThreadManager::Worker	file:
state_	concurrency/ThreadManager.cpp	/^  ThreadManager::STATE state_;$/;"	m	class:apache::thrift::concurrency::ThreadManager::Impl	file:
state_	concurrency/TimerManager.cpp	/^  STATE state_;$/;"	m	class:apache::thrift::concurrency::TimerManager::Task	file:
state_	concurrency/TimerManager.h	/^  STATE state_;$/;"	m	class:apache::thrift::concurrency::TimerManager
stdcxx	cxxfunctional.h	/^  namespace apache { namespace thrift { namespace stdcxx {$/;"	n	namespace:apache::thrift
stop	concurrency/ThreadManager.cpp	/^  void stop() { stopImpl(false); }$/;"	f	class:apache::thrift::concurrency::ThreadManager::Impl
stop	concurrency/TimerManager.cpp	/^void TimerManager::stop() {$/;"	f	class:apache::thrift::concurrency::TimerManager
stop	server/TNonblockingServer.cpp	/^void TNonblockingIOThread::stop() {$/;"	f	class:apache::thrift::server::TNonblockingIOThread
stop	server/TNonblockingServer.cpp	/^void TNonblockingServer::stop() {$/;"	f	class:apache::thrift::server::TNonblockingServer
stop	server/TServer.h	/^  virtual void stop() {}$/;"	f	class:apache::thrift::server::TServer
stop	server/TServerFramework.cpp	/^void TServerFramework::stop() {$/;"	f	class:apache::thrift::server::TServerFramework
stopImpl	concurrency/ThreadManager.cpp	/^void ThreadManager::Impl::stopImpl(bool join) {$/;"	f	class:apache::thrift::concurrency::ThreadManager::Impl
stopItem_	windows/OverlappedSubmissionThread.h	/^  TOverlappedWorkItem stopItem_;$/;"	m	class:apache::thrift::transport::TOverlappedSubmissionThread
stop_	async/TConcurrentClientSyncInfo.h	/^  volatile bool stop_;$/;"	m	class:apache::thrift::async::TConcurrentClientSyncInfo
stop_	server/TThreadPoolServer.h	/^  volatile bool stop_;$/;"	m	class:apache::thrift::server::TThreadPoolServer
stopped	concurrency/BoostThreadFactory.cpp	/^  enum STATE { uninitialized, starting, started, stopping, stopped };$/;"	e	enum:apache::thrift::concurrency::BoostThread::STATE	file:
stopped	concurrency/PosixThreadFactory.cpp	/^  enum STATE { uninitialized, starting, started, stopping, stopped };$/;"	e	enum:apache::thrift::concurrency::PthreadThread::STATE	file:
stopped	concurrency/StdThreadFactory.cpp	/^  enum STATE { uninitialized, starting, started, stopping, stopped };$/;"	e	enum:apache::thrift::concurrency::StdThread::STATE	file:
stopping	concurrency/BoostThreadFactory.cpp	/^  enum STATE { uninitialized, starting, started, stopping, stopped };$/;"	e	enum:apache::thrift::concurrency::BoostThread::STATE	file:
stopping	concurrency/PosixThreadFactory.cpp	/^  enum STATE { uninitialized, starting, started, stopping, stopped };$/;"	e	enum:apache::thrift::concurrency::PthreadThread::STATE	file:
stopping	concurrency/StdThreadFactory.cpp	/^  enum STATE { uninitialized, starting, started, stopping, stopped };$/;"	e	enum:apache::thrift::concurrency::StdThread::STATE	file:
stopping_	transport/TPipeServer.cpp	/^  bool stopping_;$/;"	m	class:apache::thrift::transport::TNamedPipeServer	file:
strerror_s	TOutput.cpp	/^std::string TOutput::strerror_s(int errno_copy) {$/;"	f	class:apache::thrift::TOutput
strict_read_	protocol/TBinaryProtocol.h	/^  bool strict_read_;$/;"	m	class:apache::thrift::protocol::TBinaryProtocolFactoryT
strict_read_	protocol/TBinaryProtocol.h	/^  bool strict_read_;$/;"	m	class:apache::thrift::protocol::TBinaryProtocolT
strict_write_	protocol/TBinaryProtocol.h	/^  bool strict_write_;$/;"	m	class:apache::thrift::protocol::TBinaryProtocolFactoryT
strict_write_	protocol/TBinaryProtocol.h	/^  bool strict_write_;$/;"	m	class:apache::thrift::protocol::TBinaryProtocolT
stringToDouble	protocol/TJSONProtocol.cpp	/^double stringToDouble(const std::string& s) {$/;"	f	namespace:apache::thrift::protocol::__anon5
string_buf_	protocol/TCompactProtocol.h	/^  uint8_t* string_buf_;$/;"	m	class:apache::thrift::protocol::TCompactProtocolT
string_buf_size_	protocol/TCompactProtocol.h	/^  int32_t string_buf_size_;$/;"	m	class:apache::thrift::protocol::TCompactProtocolT
string_limit_	protocol/TBinaryProtocol.h	/^  int32_t string_limit_;$/;"	m	class:apache::thrift::protocol::TBinaryProtocolFactoryT
string_limit_	protocol/TBinaryProtocol.h	/^  int32_t string_limit_;$/;"	m	class:apache::thrift::protocol::TBinaryProtocolT
string_limit_	protocol/TCompactProtocol.h	/^  int32_t string_limit_;$/;"	m	class:apache::thrift::protocol::TCompactProtocolFactoryT
string_limit_	protocol/TCompactProtocol.h	/^  int32_t string_limit_;$/;"	m	class:apache::thrift::protocol::TCompactProtocolT
string_limit_	protocol/TDebugProtocol.h	/^  int32_t string_limit_;$/;"	m	class:apache::thrift::protocol::TDebugProtocol
string_prefix_size_	protocol/TDebugProtocol.h	/^  int32_t string_prefix_size_;$/;"	m	class:apache::thrift::protocol::TDebugProtocol
success	gen-cpp-fb-s/FacebookService.h	/^  bool success :1;$/;"	m	struct:facebook::fb303::_FacebookService_getName_presult__isset
success	gen-cpp-fb-s/FacebookService.h	/^  bool success :1;$/;"	m	struct:facebook::fb303::_FacebookService_getName_result__isset
success	gen-cpp-fb-s/FacebookService.h	/^  std::string success;$/;"	m	class:facebook::fb303::FacebookService_getName_result
success	gen-cpp-fb-s/FacebookService.h	/^  std::string* success;$/;"	m	class:facebook::fb303::FacebookService_getName_presult
success	gen-cpp-fb/FacebookService.h	/^  bool success :1;$/;"	m	struct:facebook::fb303::_FacebookService_aliveSince_presult__isset
success	gen-cpp-fb/FacebookService.h	/^  bool success :1;$/;"	m	struct:facebook::fb303::_FacebookService_aliveSince_result__isset
success	gen-cpp-fb/FacebookService.h	/^  bool success :1;$/;"	m	struct:facebook::fb303::_FacebookService_getCounter_presult__isset
success	gen-cpp-fb/FacebookService.h	/^  bool success :1;$/;"	m	struct:facebook::fb303::_FacebookService_getCounter_result__isset
success	gen-cpp-fb/FacebookService.h	/^  bool success :1;$/;"	m	struct:facebook::fb303::_FacebookService_getCounters_presult__isset
success	gen-cpp-fb/FacebookService.h	/^  bool success :1;$/;"	m	struct:facebook::fb303::_FacebookService_getCounters_result__isset
success	gen-cpp-fb/FacebookService.h	/^  bool success :1;$/;"	m	struct:facebook::fb303::_FacebookService_getCpuProfile_presult__isset
success	gen-cpp-fb/FacebookService.h	/^  bool success :1;$/;"	m	struct:facebook::fb303::_FacebookService_getCpuProfile_result__isset
success	gen-cpp-fb/FacebookService.h	/^  bool success :1;$/;"	m	struct:facebook::fb303::_FacebookService_getName_presult__isset
success	gen-cpp-fb/FacebookService.h	/^  bool success :1;$/;"	m	struct:facebook::fb303::_FacebookService_getName_result__isset
success	gen-cpp-fb/FacebookService.h	/^  bool success :1;$/;"	m	struct:facebook::fb303::_FacebookService_getOption_presult__isset
success	gen-cpp-fb/FacebookService.h	/^  bool success :1;$/;"	m	struct:facebook::fb303::_FacebookService_getOption_result__isset
success	gen-cpp-fb/FacebookService.h	/^  bool success :1;$/;"	m	struct:facebook::fb303::_FacebookService_getOptions_presult__isset
success	gen-cpp-fb/FacebookService.h	/^  bool success :1;$/;"	m	struct:facebook::fb303::_FacebookService_getOptions_result__isset
success	gen-cpp-fb/FacebookService.h	/^  bool success :1;$/;"	m	struct:facebook::fb303::_FacebookService_getStatusDetails_presult__isset
success	gen-cpp-fb/FacebookService.h	/^  bool success :1;$/;"	m	struct:facebook::fb303::_FacebookService_getStatusDetails_result__isset
success	gen-cpp-fb/FacebookService.h	/^  bool success :1;$/;"	m	struct:facebook::fb303::_FacebookService_getStatus_presult__isset
success	gen-cpp-fb/FacebookService.h	/^  bool success :1;$/;"	m	struct:facebook::fb303::_FacebookService_getStatus_result__isset
success	gen-cpp-fb/FacebookService.h	/^  bool success :1;$/;"	m	struct:facebook::fb303::_FacebookService_getVersion_presult__isset
success	gen-cpp-fb/FacebookService.h	/^  bool success :1;$/;"	m	struct:facebook::fb303::_FacebookService_getVersion_result__isset
success	gen-cpp-fb/FacebookService.h	/^  fb_status::type success;$/;"	m	class:facebook::fb303::FacebookService_getStatus_result
success	gen-cpp-fb/FacebookService.h	/^  fb_status::type* success;$/;"	m	class:facebook::fb303::FacebookService_getStatus_presult
success	gen-cpp-fb/FacebookService.h	/^  int64_t success;$/;"	m	class:facebook::fb303::FacebookService_aliveSince_result
success	gen-cpp-fb/FacebookService.h	/^  int64_t success;$/;"	m	class:facebook::fb303::FacebookService_getCounter_result
success	gen-cpp-fb/FacebookService.h	/^  int64_t* success;$/;"	m	class:facebook::fb303::FacebookService_aliveSince_presult
success	gen-cpp-fb/FacebookService.h	/^  int64_t* success;$/;"	m	class:facebook::fb303::FacebookService_getCounter_presult
success	gen-cpp-fb/FacebookService.h	/^  std::map<std::string, int64_t>  success;$/;"	m	class:facebook::fb303::FacebookService_getCounters_result
success	gen-cpp-fb/FacebookService.h	/^  std::map<std::string, int64_t> * success;$/;"	m	class:facebook::fb303::FacebookService_getCounters_presult
success	gen-cpp-fb/FacebookService.h	/^  std::map<std::string, std::string>  success;$/;"	m	class:facebook::fb303::FacebookService_getOptions_result
success	gen-cpp-fb/FacebookService.h	/^  std::map<std::string, std::string> * success;$/;"	m	class:facebook::fb303::FacebookService_getOptions_presult
success	gen-cpp-fb/FacebookService.h	/^  std::string success;$/;"	m	class:facebook::fb303::FacebookService_getCpuProfile_result
success	gen-cpp-fb/FacebookService.h	/^  std::string success;$/;"	m	class:facebook::fb303::FacebookService_getName_result
success	gen-cpp-fb/FacebookService.h	/^  std::string success;$/;"	m	class:facebook::fb303::FacebookService_getOption_result
success	gen-cpp-fb/FacebookService.h	/^  std::string success;$/;"	m	class:facebook::fb303::FacebookService_getStatusDetails_result
success	gen-cpp-fb/FacebookService.h	/^  std::string success;$/;"	m	class:facebook::fb303::FacebookService_getVersion_result
success	gen-cpp-fb/FacebookService.h	/^  std::string* success;$/;"	m	class:facebook::fb303::FacebookService_getCpuProfile_presult
success	gen-cpp-fb/FacebookService.h	/^  std::string* success;$/;"	m	class:facebook::fb303::FacebookService_getName_presult
success	gen-cpp-fb/FacebookService.h	/^  std::string* success;$/;"	m	class:facebook::fb303::FacebookService_getOption_presult
success	gen-cpp-fb/FacebookService.h	/^  std::string* success;$/;"	m	class:facebook::fb303::FacebookService_getStatusDetails_presult
success	gen-cpp-fb/FacebookService.h	/^  std::string* success;$/;"	m	class:facebook::fb303::FacebookService_getVersion_presult
success	windows/OverlappedSubmissionThread.h	/^  BOOL success;$/;"	m	struct:apache::thrift::transport::TOverlappedWorkItem
swap	transport/TBufferTransports.h	/^  void swap(TMemoryBuffer& that) {$/;"	f	class:apache::thrift::transport::TMemoryBuffer
swapEventBuffers	transport/TFileTransport.cpp	/^bool TFileTransport::swapEventBuffers(struct timeval* deadline) {$/;"	f	class:apache::thrift::transport::TFileTransport
sync_	async/TConcurrentClientSyncInfo.h	/^  TConcurrentClientSyncInfo &sync_;$/;"	m	class:apache::thrift::async::TConcurrentRecvSentry
sync_	async/TConcurrentClientSyncInfo.h	/^  TConcurrentClientSyncInfo &sync_;$/;"	m	class:apache::thrift::async::TConcurrentSendSentry
sync_	gen-cpp-fb-s/FacebookService.h	/^  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;$/;"	m	class:facebook::fb303::FacebookServiceConcurrentClient
sync_	gen-cpp-fb/FacebookService.h	/^  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;$/;"	m	class:facebook::fb303::FacebookServiceConcurrentClient
tSocket_	server/TNonblockingServer.cpp	/^  boost::shared_ptr<TSocket> tSocket_;$/;"	m	class:apache::thrift::server::TNonblockingServer::TConnection	file:
targetTransport_	processor/PeekProcessor.h	/^  boost::shared_ptr<apache::thrift::transport::TTransport> targetTransport_;$/;"	m	class:apache::thrift::processor::PeekProcessor
taskCount	concurrency/TimerManager.cpp	/^size_t TimerManager::taskCount() const {$/;"	f	class:apache::thrift::concurrency::TimerManager
taskCount_	concurrency/TimerManager.h	/^  size_t taskCount_;$/;"	m	class:apache::thrift::concurrency::TimerManager
taskExpiration_	server/TThreadPoolServer.h	/^  volatile int64_t taskExpiration_;$/;"	m	class:apache::thrift::server::TThreadPoolServer
taskExpireTime_	server/TNonblockingServer.h	/^  int64_t taskExpireTime_;$/;"	m	class:apache::thrift::server::TNonblockingServer
taskMap_	concurrency/TimerManager.h	/^  std::multimap<int64_t, boost::shared_ptr<Task> > taskMap_;$/;"	m	class:apache::thrift::concurrency::TimerManager
task_iterator	concurrency/TimerManager.h	/^  typedef std::multimap<int64_t, boost::shared_ptr<TimerManager::Task> >::iterator task_iterator;$/;"	t	class:apache::thrift::concurrency::TimerManager
task_range	concurrency/TimerManager.h	/^  typedef std::pair<task_iterator, task_iterator> task_range;$/;"	t	class:apache::thrift::concurrency::TimerManager
tasks_	concurrency/ThreadManager.cpp	/^  std::queue<shared_ptr<Task> > tasks_;$/;"	m	class:apache::thrift::concurrency::ThreadManager::Impl	file:
tcpRecvBuffer_	transport/TServerSocket.h	/^  int tcpRecvBuffer_;$/;"	m	class:apache::thrift::transport::TServerSocket
tcpSendBuffer_	transport/TServerSocket.h	/^  int tcpSendBuffer_;$/;"	m	class:apache::thrift::transport::TServerSocket
test	transport/TShortReadTransport.h	/^namespace test {$/;"	n	namespace:apache::thrift::transport
thread	concurrency/Thread.h	/^  virtual boost::shared_ptr<Thread> thread() { return thread_.lock(); }$/;"	f	class:apache::thrift::concurrency::Runnable
thread	concurrency/Thread.h	/^  virtual void thread(boost::shared_ptr<Thread> value) { thread_ = value; }$/;"	f	class:apache::thrift::concurrency::Runnable
threadFactory	concurrency/ThreadManager.cpp	/^  shared_ptr<ThreadFactory> threadFactory() const {$/;"	f	class:apache::thrift::concurrency::ThreadManager::Impl
threadFactory	concurrency/ThreadManager.cpp	/^  void threadFactory(shared_ptr<ThreadFactory> value) {$/;"	f	class:apache::thrift::concurrency::ThreadManager::Impl
threadFactory	concurrency/TimerManager.cpp	/^shared_ptr<const ThreadFactory> TimerManager::threadFactory() const {$/;"	f	class:apache::thrift::concurrency::TimerManager
threadFactory	concurrency/TimerManager.cpp	/^void TimerManager::threadFactory(shared_ptr<const ThreadFactory> value) {$/;"	f	class:apache::thrift::concurrency::TimerManager
threadFactory_	concurrency/ThreadManager.cpp	/^  shared_ptr<ThreadFactory> threadFactory_;$/;"	m	class:apache::thrift::concurrency::ThreadManager::Impl	file:
threadFactory_	concurrency/TimerManager.h	/^  boost::shared_ptr<const ThreadFactory> threadFactory_;$/;"	m	class:apache::thrift::concurrency::TimerManager
threadFactory_	server/TThreadedServer.h	/^  boost::shared_ptr<apache::thrift::concurrency::ThreadFactory> threadFactory_;$/;"	m	class:apache::thrift::server::TThreadedServer
threadFactory_	transport/TFileTransport.h	/^  apache::thrift::concurrency::PlatformThreadFactory threadFactory_;$/;"	m	class:apache::thrift::transport::TFileTransport
threadId_	server/TNonblockingServer.h	/^  Thread::id_t threadId_;$/;"	m	class:apache::thrift::server::TNonblockingIOThread
threadMain	concurrency/BoostThreadFactory.cpp	/^void* BoostThread::threadMain(void* arg) {$/;"	f	class:apache::thrift::concurrency::BoostThread
threadMain	concurrency/PosixThreadFactory.cpp	/^void* PthreadThread::threadMain(void* arg) {$/;"	f	class:apache::thrift::concurrency::PthreadThread
threadMain	concurrency/StdThreadFactory.cpp	/^void StdThread::threadMain(boost::shared_ptr<StdThread> thread) {$/;"	f	class:apache::thrift::concurrency::StdThread
threadManager_	server/TNonblockingServer.h	/^  boost::shared_ptr<ThreadManager> threadManager_;$/;"	m	class:apache::thrift::server::TNonblockingServer
threadManager_	server/TThreadPoolServer.h	/^  boost::shared_ptr<apache::thrift::concurrency::ThreadManager> threadManager_;$/;"	m	class:apache::thrift::server::TThreadPoolServer
threadPoolProcessing_	server/TNonblockingServer.h	/^  bool threadPoolProcessing_;$/;"	m	class:apache::thrift::server::TNonblockingServer
thread_	concurrency/BoostThreadFactory.cpp	/^  std::auto_ptr<boost::thread> thread_;$/;"	m	class:apache::thrift::concurrency::BoostThread	file:
thread_	concurrency/StdThreadFactory.cpp	/^  std::unique_ptr<std::thread> thread_;$/;"	m	class:apache::thrift::concurrency::StdThread	file:
thread_	concurrency/Thread.h	/^  boost::weak_ptr<Thread> thread_;$/;"	m	class:apache::thrift::concurrency::Runnable
thread_	server/TNonblockingServer.h	/^  boost::shared_ptr<Thread> thread_;$/;"	m	class:apache::thrift::server::TNonblockingIOThread
thread_	transport/TPipe.cpp	/^  TAutoOverlapThread thread_;$/;"	m	class:apache::thrift::transport::TWaitableNamedPipeImpl	file:
thread_	transport/TPipeServer.cpp	/^  TAutoOverlapThread thread_;$/;"	m	class:apache::thrift::transport::TNamedPipeServer	file:
thread_	windows/OverlappedSubmissionThread.h	/^  HANDLE thread_;$/;"	m	class:apache::thrift::transport::TOverlappedSubmissionThread
thread_proc	windows/OverlappedSubmissionThread.cpp	/^unsigned __stdcall TOverlappedSubmissionThread::thread_proc(void* addr) {$/;"	f	class:apache::thrift::transport::TOverlappedSubmissionThread
thrift	TApplicationException.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	TApplicationException.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	TDispatchProcessor.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	TOutput.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	TOutput.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	TProcessor.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	TToString.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	Thrift.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	VirtualProfiling.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	async/TAsyncBufferProcessor.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	async/TAsyncChannel.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	async/TAsyncChannel.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	async/TAsyncDispatchProcessor.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	async/TAsyncProcessor.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	async/TAsyncProtocolProcessor.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	async/TAsyncProtocolProcessor.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	async/TConcurrentClientSyncInfo.cpp	/^namespace apache { namespace thrift { namespace async {$/;"	n	namespace:apache	file:
thrift	async/TConcurrentClientSyncInfo.h	/^namespace apache { namespace thrift { namespace async {$/;"	n	namespace:apache
thrift	async/TEvhttpClientChannel.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	async/TEvhttpClientChannel.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	async/TEvhttpServer.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	async/TEvhttpServer.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	concurrency/BoostMonitor.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	concurrency/BoostMutex.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	concurrency/BoostThreadFactory.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	concurrency/BoostThreadFactory.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	concurrency/Exception.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	concurrency/FunctionRunner.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	concurrency/Monitor.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	concurrency/Monitor.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	concurrency/Mutex.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	concurrency/Mutex.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	concurrency/PlatformThreadFactory.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	concurrency/PosixThreadFactory.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	concurrency/PosixThreadFactory.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	concurrency/StdMonitor.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	concurrency/StdMutex.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	concurrency/StdThreadFactory.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	concurrency/StdThreadFactory.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	concurrency/Thread.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	concurrency/ThreadManager.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	concurrency/ThreadManager.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	concurrency/TimerManager.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	concurrency/TimerManager.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	concurrency/Util.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	concurrency/Util.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	cxxfunctional.h	/^  namespace apache { namespace thrift { namespace stdcxx {$/;"	n	namespace:apache
thrift	processor/PeekProcessor.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	processor/PeekProcessor.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	processor/StatsProcessor.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	processor/TMultiplexedProcessor.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	protocol/TBase64Utils.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	protocol/TBase64Utils.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	protocol/TBinaryProtocol.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	protocol/TBinaryProtocol.tcc	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	protocol/TCompactProtocol.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	protocol/TCompactProtocol.tcc	/^namespace apache { namespace thrift { namespace protocol {$/;"	n	namespace:apache	file:
thrift	protocol/TDebugProtocol.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	protocol/TDebugProtocol.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	protocol/TJSONProtocol.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	protocol/TJSONProtocol.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	protocol/TMultiplexedProtocol.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	protocol/TMultiplexedProtocol.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	protocol/TProtocol.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	protocol/TProtocol.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	protocol/TProtocolDecorator.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	protocol/TProtocolException.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	protocol/TProtocolTap.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	protocol/TVirtualProtocol.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	qt/TQIODeviceTransport.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	qt/TQIODeviceTransport.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	qt/TQTcpServer.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	qt/TQTcpServer.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	server/TConnectedClient.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	server/TConnectedClient.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	server/TNonblockingServer.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	server/TNonblockingServer.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	server/TServer.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	server/TServer.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	server/TServerFramework.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	server/TServerFramework.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	server/TSimpleServer.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	server/TSimpleServer.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	server/TThreadPoolServer.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	server/TThreadPoolServer.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	server/TThreadedServer.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	server/TThreadedServer.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	transport/TBufferTransports.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	transport/TBufferTransports.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	transport/TFDTransport.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	transport/TFDTransport.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	transport/TFileTransport.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	transport/TFileTransport.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	transport/THttpClient.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	transport/THttpClient.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	transport/THttpServer.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	transport/THttpServer.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	transport/THttpTransport.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	transport/THttpTransport.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	transport/TPipe.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	transport/TPipe.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	transport/TPipeServer.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	transport/TPipeServer.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	transport/TSSLServerSocket.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	transport/TSSLServerSocket.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	transport/TSSLSocket.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	transport/TSSLSocket.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	transport/TServerSocket.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	transport/TServerSocket.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	transport/TServerTransport.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	transport/TShortReadTransport.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	transport/TSimpleFileTransport.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	transport/TSimpleFileTransport.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	transport/TSocket.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	transport/TSocket.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	transport/TSocketPool.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	transport/TSocketPool.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	transport/TTransport.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	transport/TTransportException.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	transport/TTransportException.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	transport/TTransportUtils.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	transport/TTransportUtils.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	transport/TVirtualTransport.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	transport/TZlibTransport.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	transport/TZlibTransport.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	windows/Operators.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	windows/OverlappedSubmissionThread.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	windows/OverlappedSubmissionThread.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	windows/Sync.h	/^namespace thrift {$/;"	n	namespace:apache
thrift	windows/TWinsockSingleton.cpp	/^namespace thrift {$/;"	n	namespace:apache	file:
thrift	windows/TWinsockSingleton.h	/^namespace thrift {$/;"	n	namespace:apache
thrift_ctime_r	windows/GetTimeOfDay.cpp	/^char* thrift_ctime_r(const time_t* _clock, char* _buf) {$/;"	f
thrift_fcntl	windows/WinFcntl.cpp	/^int thrift_fcntl(THRIFT_SOCKET fd, int cmd, int flags) {$/;"	f
thrift_gettimeofday	windows/GetTimeOfDay.cpp	/^int thrift_gettimeofday(struct timeval* tv, struct timezone* tz) {$/;"	f
thrift_poll	windows/WinFcntl.cpp	/^int thrift_poll(THRIFT_POLLFD* fdArray, ULONG nfds, INT timeout) {$/;"	f
thrift_pollfd	windows/WinFcntl.h	/^struct thrift_pollfd {$/;"	s
thrift_sleep	windows/GetTimeOfDay.cpp	/^int thrift_sleep(unsigned int seconds) {$/;"	f
thrift_socketpair	windows/SocketPair.cpp	/^int thrift_socketpair(int d, int type, int protocol, THRIFT_SOCKET sv[2]) {$/;"	f
thrift_timespec	windows/GetTimeOfDay.h	/^struct thrift_timespec {$/;"	s
thrift_usleep	windows/GetTimeOfDay.cpp	/^int thrift_usleep(unsigned int microseconds) {$/;"	f
thrift_wstr2str	windows/WinFcntl.cpp	/^std::string thrift_wstr2str(std::wstring ws) {$/;"	f
throwBadSeqId_	async/TConcurrentClientSyncInfo.cpp	/^void TConcurrentClientSyncInfo::throwBadSeqId_()$/;"	f	class:apache::thrift::async::TConcurrentClientSyncInfo
throwDeadConnection_	async/TConcurrentClientSyncInfo.cpp	/^void TConcurrentClientSyncInfo::throwDeadConnection_()$/;"	f	class:apache::thrift::async::TConcurrentClientSyncInfo
throw_it	Thrift.h	/^  virtual void throw_it() {$/;"	f	class:apache::thrift::TExceptionWrapper
timedOut	async/TEvhttpClientChannel.h	/^  virtual bool timedOut() const { return false; }$/;"	f	class:apache::thrift::async::TEvhttpClientChannel
timedlock	concurrency/BoostMutex.cpp	/^bool Mutex::timedlock(int64_t ms) const {$/;"	f	class:apache::thrift::concurrency::Mutex
timedlock	concurrency/Mutex.cpp	/^  bool timedlock(int64_t milliseconds) const {$/;"	f	class:apache::thrift::concurrency::Mutex::impl
timedlock	concurrency/Mutex.cpp	/^bool Mutex::timedlock(int64_t ms) const {$/;"	f	class:apache::thrift::concurrency::Mutex
timedlock	concurrency/StdMutex.cpp	/^bool Mutex::timedlock(int64_t ms) const {$/;"	f	class:apache::thrift::concurrency::Mutex
timeout_	server/TThreadPoolServer.h	/^  volatile int64_t timeout_;$/;"	m	class:apache::thrift::server::TThreadPoolServer
timezone	windows/GetTimeOfDay.cpp	/^struct timezone {$/;"	s	file:
toMilliseconds	concurrency/Util.h	/^  static void toMilliseconds(int64_t& result, const struct THRIFT_TIMESPEC& value) {$/;"	f	class:apache::thrift::concurrency::Util
toMilliseconds	concurrency/Util.h	/^  static void toMilliseconds(int64_t& result, const struct timeval& value) {$/;"	f	class:apache::thrift::concurrency::Util
toPthreadPolicy	concurrency/PosixThreadFactory.cpp	/^  static int toPthreadPolicy(POLICY policy) {$/;"	f	class:apache::thrift::concurrency::PosixThreadFactory::Impl	file:
toPthreadPriority	concurrency/PosixThreadFactory.cpp	/^  static int toPthreadPriority(POLICY policy, PRIORITY priority) {$/;"	f	class:apache::thrift::concurrency::PosixThreadFactory::Impl	file:
toTicks	concurrency/Util.h	/^  static void toTicks(int64_t& result, const struct THRIFT_TIMESPEC& value, int64_t ticksPerSec) {$/;"	f	class:apache::thrift::concurrency::Util
toTicks	concurrency/Util.h	/^  static void toTicks(int64_t& result, const struct timeval& value, int64_t ticksPerSec) {$/;"	f	class:apache::thrift::concurrency::Util
toTicks	concurrency/Util.h	/^  static void toTicks(int64_t& result,$/;"	f	class:apache::thrift::concurrency::Util
toTimespec	concurrency/Util.h	/^  static void toTimespec(struct THRIFT_TIMESPEC& result, int64_t value) {$/;"	f	class:apache::thrift::concurrency::Util
toTimeval	concurrency/Util.h	/^  static void toTimeval(struct timeval& result, int64_t value) {$/;"	f	class:apache::thrift::concurrency::Util
toUsec	concurrency/Util.h	/^  static void toUsec(int64_t& result, const struct THRIFT_TIMESPEC& value) {$/;"	f	class:apache::thrift::concurrency::Util
toUsec	concurrency/Util.h	/^  static void toUsec(int64_t& result, const struct timeval& value) {$/;"	f	class:apache::thrift::concurrency::Util
toWire16	protocol/TProtocol.h	/^  static uint16_t toWire16(uint16_t x)   {return THRIFT_htoles(x);}$/;"	f	struct:apache::thrift::protocol::TNetworkLittleEndian
toWire16	protocol/TProtocol.h	/^  static uint16_t toWire16(uint16_t x)   {return htons(x);}$/;"	f	struct:apache::thrift::protocol::TNetworkBigEndian
toWire32	protocol/TProtocol.h	/^  static uint32_t toWire32(uint32_t x)   {return THRIFT_htolel(x);}$/;"	f	struct:apache::thrift::protocol::TNetworkLittleEndian
toWire32	protocol/TProtocol.h	/^  static uint32_t toWire32(uint32_t x)   {return htonl(x);}$/;"	f	struct:apache::thrift::protocol::TNetworkBigEndian
toWire64	protocol/TProtocol.h	/^  static uint64_t toWire64(uint64_t x)   {return THRIFT_htolell(x);}$/;"	f	struct:apache::thrift::protocol::TNetworkLittleEndian
toWire64	protocol/TProtocol.h	/^  static uint64_t toWire64(uint64_t x)   {return THRIFT_htonll(x);}$/;"	f	struct:apache::thrift::protocol::TNetworkBigEndian
to_string	TToString.h	/^std::string to_string(const T& beg, const T& end) {$/;"	f	namespace:apache::thrift
to_string	TToString.h	/^std::string to_string(const T& t) {$/;"	f	namespace:apache::thrift
to_string	TToString.h	/^std::string to_string(const std::map<K, V>& m) {$/;"	f	namespace:apache::thrift
to_string	TToString.h	/^std::string to_string(const std::set<T>& s) {$/;"	f	namespace:apache::thrift
to_string	TToString.h	/^std::string to_string(const std::vector<T>& t) {$/;"	f	namespace:apache::thrift
to_string	TToString.h	/^std::string to_string(const typename std::pair<K, V>& v) {$/;"	f	namespace:apache::thrift
totalTaskCount	concurrency/ThreadManager.cpp	/^  size_t totalTaskCount() const {$/;"	f	class:apache::thrift::concurrency::ThreadManager::Impl
trans_	protocol/TBinaryProtocol.h	/^  Transport_* trans_;$/;"	m	class:apache::thrift::protocol::TBinaryProtocolT
trans_	protocol/TCompactProtocol.h	/^  Transport_* trans_;$/;"	m	class:apache::thrift::protocol::TCompactProtocolT
trans_	protocol/TDebugProtocol.h	/^  TTransport* trans_;$/;"	m	class:apache::thrift::protocol::TDebugProtocol
trans_	protocol/TJSONProtocol.h	/^    TTransport* trans_;$/;"	m	class:apache::thrift::protocol::TJSONProtocol::LookaheadReader
trans_	protocol/TJSONProtocol.h	/^  TTransport* trans_;$/;"	m	class:apache::thrift::protocol::TJSONProtocol
transition	server/TNonblockingServer.cpp	/^void TNonblockingServer::TConnection::transition() {$/;"	f	class:apache::thrift::server::TNonblockingServer::TConnection
transport	TProcessor.h	/^  boost::shared_ptr<transport::TTransport> transport;$/;"	m	struct:apache::thrift::TConnectionInfo
transport	async/TAsyncChannel.h	/^namespace transport {$/;"	n	namespace:apache::thrift
transport	async/TEvhttpClientChannel.h	/^namespace transport {$/;"	n	namespace:apache::thrift
transport	qt/TQIODeviceTransport.cpp	/^namespace transport {$/;"	n	namespace:apache::thrift	file:
transport	qt/TQIODeviceTransport.h	/^namespace transport {$/;"	n	namespace:apache::thrift
transport	transport/TBufferTransports.cpp	/^namespace transport {$/;"	n	namespace:apache::thrift	file:
transport	transport/TBufferTransports.h	/^namespace transport {$/;"	n	namespace:apache::thrift
transport	transport/TFDTransport.cpp	/^namespace transport {$/;"	n	namespace:apache::thrift	file:
transport	transport/TFDTransport.h	/^namespace transport {$/;"	n	namespace:apache::thrift
transport	transport/TFileTransport.cpp	/^namespace transport {$/;"	n	namespace:apache::thrift	file:
transport	transport/TFileTransport.h	/^namespace transport {$/;"	n	namespace:apache::thrift
transport	transport/THttpClient.cpp	/^namespace transport {$/;"	n	namespace:apache::thrift	file:
transport	transport/THttpClient.h	/^namespace transport {$/;"	n	namespace:apache::thrift
transport	transport/THttpServer.cpp	/^namespace transport {$/;"	n	namespace:apache::thrift	file:
transport	transport/THttpServer.h	/^namespace transport {$/;"	n	namespace:apache::thrift
transport	transport/THttpTransport.cpp	/^namespace transport {$/;"	n	namespace:apache::thrift	file:
transport	transport/THttpTransport.h	/^namespace transport {$/;"	n	namespace:apache::thrift
transport	transport/TPipe.cpp	/^namespace transport {$/;"	n	namespace:apache::thrift	file:
transport	transport/TPipe.h	/^namespace transport {$/;"	n	namespace:apache::thrift
transport	transport/TPipeServer.cpp	/^namespace transport {$/;"	n	namespace:apache::thrift	file:
transport	transport/TPipeServer.h	/^namespace transport {$/;"	n	namespace:apache::thrift
transport	transport/TSSLServerSocket.cpp	/^namespace transport {$/;"	n	namespace:apache::thrift	file:
transport	transport/TSSLServerSocket.h	/^namespace transport {$/;"	n	namespace:apache::thrift
transport	transport/TSSLSocket.cpp	/^namespace transport {$/;"	n	namespace:apache::thrift	file:
transport	transport/TSSLSocket.h	/^namespace transport {$/;"	n	namespace:apache::thrift
transport	transport/TServerSocket.cpp	/^namespace transport {$/;"	n	namespace:apache::thrift	file:
transport	transport/TServerSocket.h	/^namespace transport {$/;"	n	namespace:apache::thrift
transport	transport/TServerTransport.h	/^namespace transport {$/;"	n	namespace:apache::thrift
transport	transport/TShortReadTransport.h	/^namespace transport {$/;"	n	namespace:apache::thrift
transport	transport/TSimpleFileTransport.cpp	/^namespace transport {$/;"	n	namespace:apache::thrift	file:
transport	transport/TSimpleFileTransport.h	/^namespace transport {$/;"	n	namespace:apache::thrift
transport	transport/TSocket.cpp	/^namespace transport {$/;"	n	namespace:apache::thrift	file:
transport	transport/TSocket.h	/^namespace transport {$/;"	n	namespace:apache::thrift
transport	transport/TSocketPool.cpp	/^namespace transport {$/;"	n	namespace:apache::thrift	file:
transport	transport/TSocketPool.h	/^namespace transport {$/;"	n	namespace:apache::thrift
transport	transport/TTransport.h	/^namespace transport {$/;"	n	namespace:apache::thrift
transport	transport/TTransportException.cpp	/^namespace transport {$/;"	n	namespace:apache::thrift	file:
transport	transport/TTransportException.h	/^namespace transport {$/;"	n	namespace:apache::thrift
transport	transport/TTransportUtils.cpp	/^namespace transport {$/;"	n	namespace:apache::thrift	file:
transport	transport/TTransportUtils.h	/^namespace transport {$/;"	n	namespace:apache::thrift
transport	transport/TVirtualTransport.h	/^namespace transport {$/;"	n	namespace:apache::thrift
transport	transport/TZlibTransport.cpp	/^namespace transport {$/;"	n	namespace:apache::thrift	file:
transport	transport/TZlibTransport.h	/^namespace transport {$/;"	n	namespace:apache::thrift
transport	windows/OverlappedSubmissionThread.cpp	/^namespace transport {$/;"	n	namespace:apache::thrift	file:
transport	windows/OverlappedSubmissionThread.h	/^namespace transport {$/;"	n	namespace:apache::thrift
transport	windows/TWinsockSingleton.cpp	/^namespace transport {$/;"	n	namespace:apache::thrift	file:
transport	windows/TWinsockSingleton.h	/^namespace transport {$/;"	n	namespace:apache::thrift
transportFactory_	processor/PeekProcessor.h	/^  boost::shared_ptr<apache::thrift::transport::TPipedTransportFactory> transportFactory_;$/;"	m	class:apache::thrift::processor::PeekProcessor
transport_	qt/TQTcpServer.cpp	/^  shared_ptr<TTransport> transport_;$/;"	m	struct:apache::thrift::async::TQTcpServer::ConnectionContext	file:
transport_	transport/TBufferTransports.h	/^  boost::shared_ptr<TTransport> transport_;$/;"	m	class:apache::thrift::transport::TBufferedTransport
transport_	transport/TBufferTransports.h	/^  boost::shared_ptr<TTransport> transport_;$/;"	m	class:apache::thrift::transport::TFramedTransport
transport_	transport/THttpTransport.h	/^  boost::shared_ptr<TTransport> transport_;$/;"	m	class:apache::thrift::transport::THttpTransport
transport_	transport/TShortReadTransport.h	/^  boost::shared_ptr<TTransport> transport_;$/;"	m	class:apache::thrift::transport::test::TShortReadTransport
transport_	transport/TZlibTransport.h	/^  boost::shared_ptr<TTransport> transport_;$/;"	m	class:apache::thrift::transport::TZlibTransport
trylock	concurrency/BoostMutex.cpp	/^bool Mutex::trylock() const {$/;"	f	class:apache::thrift::concurrency::Mutex
trylock	concurrency/Mutex.cpp	/^  bool trylock() const { return (0 == pthread_mutex_trylock(&pthread_mutex_)); }$/;"	f	class:apache::thrift::concurrency::Mutex::impl
trylock	concurrency/Mutex.cpp	/^bool Mutex::trylock() const {$/;"	f	class:apache::thrift::concurrency::Mutex
trylock	concurrency/StdMutex.cpp	/^bool Mutex::trylock() const {$/;"	f	class:apache::thrift::concurrency::Mutex
tv_nsec	windows/GetTimeOfDay.h	/^  int64_t tv_nsec;$/;"	m	struct:thrift_timespec
tv_sec	windows/GetTimeOfDay.h	/^  int64_t tv_sec;$/;"	m	struct:thrift_timespec
type	gen-cpp-fb-s/facebooktest_types.h	/^  enum type {$/;"	g	struct:facebook::fb303::fb_status
type	gen-cpp-fb/facebooktest_types.h	/^  enum type {$/;"	g	struct:facebook::fb303::fb_status
type	processor/TMultiplexedProcessor.h	/^  TMessageType type;$/;"	m	class:apache::thrift::protocol::StoredMessageProtocol
typeName1_	VirtualProfiling.cpp	/^  const char* typeName1_;$/;"	m	class:apache::thrift::Key	file:
typeName2_	VirtualProfiling.cpp	/^  const char* typeName2_;$/;"	m	class:apache::thrift::Key	file:
type_	TApplicationException.h	/^  TApplicationExceptionType type_;$/;"	m	class:apache::thrift::TApplicationException
type_	protocol/TProtocolException.h	/^  TProtocolExceptionType type_;$/;"	m	class:apache::thrift::protocol::TProtocolException
type_	transport/TTransportException.h	/^  TTransportExceptionType type_;$/;"	m	class:apache::thrift::transport::TTransportException
tz_dsttime	windows/GetTimeOfDay.cpp	/^  int tz_dsttime;     \/* type of dst correction *\/$/;"	m	struct:timezone	file:
tz_minuteswest	windows/GetTimeOfDay.cpp	/^  int tz_minuteswest; \/* minutes W of Greenwich *\/$/;"	m	struct:timezone	file:
uint16_t	windows/config.h	/^typedef boost::uint16_t uint16_t;$/;"	t
uint32_t	windows/config.h	/^typedef boost::uint32_t uint32_t;$/;"	t
uint64_t	windows/config.h	/^typedef boost::uint64_t uint64_t;$/;"	t
uint8_t	windows/config.h	/^typedef boost::uint8_t uint8_t;$/;"	t
underlying_	async/TAsyncProtocolProcessor.h	/^  boost::shared_ptr<TAsyncProcessor> underlying_;$/;"	m	class:apache::thrift::async::TAsyncProtocolProcessor
uninitialized	concurrency/BoostThreadFactory.cpp	/^  enum STATE { uninitialized, starting, started, stopping, stopped };$/;"	e	enum:apache::thrift::concurrency::BoostThread::STATE	file:
uninitialized	concurrency/PosixThreadFactory.cpp	/^  enum STATE { uninitialized, starting, started, stopping, stopped };$/;"	e	enum:apache::thrift::concurrency::PthreadThread::STATE	file:
uninitialized	concurrency/StdThreadFactory.cpp	/^  enum STATE { uninitialized, starting, started, stopping, stopped };$/;"	e	enum:apache::thrift::concurrency::StdThread::STATE	file:
unix_open	transport/TSocket.cpp	/^void TSocket::unix_open() {$/;"	f	class:apache::thrift::transport::TSocket
unknown_thread_id	concurrency/Thread.h	/^  static const Thread::id_t unknown_thread_id;$/;"	m	class:apache::thrift::concurrency::ThreadFactory
unlock	concurrency/BoostMonitor.cpp	/^  void unlock() { mutex().unlock(); }$/;"	f	class:apache::thrift::concurrency::Monitor::Impl
unlock	concurrency/BoostMonitor.cpp	/^void Monitor::unlock() const {$/;"	f	class:apache::thrift::concurrency::Monitor
unlock	concurrency/BoostMutex.cpp	/^void Mutex::unlock() const {$/;"	f	class:apache::thrift::concurrency::Mutex
unlock	concurrency/Monitor.cpp	/^  void unlock() { mutex().unlock(); }$/;"	f	class:apache::thrift::concurrency::Monitor::Impl
unlock	concurrency/Monitor.cpp	/^void Monitor::unlock() const {$/;"	f	class:apache::thrift::concurrency::Monitor
unlock	concurrency/Mutex.cpp	/^  void unlock() const {$/;"	f	class:apache::thrift::concurrency::Mutex::impl
unlock	concurrency/Mutex.cpp	/^void Mutex::unlock() const {$/;"	f	class:apache::thrift::concurrency::Mutex
unlock	concurrency/StdMonitor.cpp	/^  void unlock() { mutex_->unlock(); }$/;"	f	class:apache::thrift::concurrency::Monitor::Impl
unlock	concurrency/StdMonitor.cpp	/^void Monitor::unlock() const {$/;"	f	class:apache::thrift::concurrency::Monitor
unlock	concurrency/StdMutex.cpp	/^void Mutex::unlock() const {$/;"	f	class:apache::thrift::concurrency::Mutex
unregister	TProcessor.h	/^  void unregister() { handler_ = NULL; }$/;"	f	class:apache::thrift::TProcessorContextFreer
updatePending	async/TConcurrentClientSyncInfo.cpp	/^void TConcurrentClientSyncInfo::updatePending($/;"	f	class:apache::thrift::async::TConcurrentClientSyncInfo
uppercase	transport/TSSLSocket.cpp	/^char uppercase(char c) {$/;"	f	namespace:apache::thrift::transport
urbuf_	transport/TZlibTransport.h	/^  uint8_t* urbuf_;$/;"	m	class:apache::thrift::transport::TZlibTransport
urbuf_size_	transport/TZlibTransport.h	/^  uint32_t urbuf_size_;$/;"	m	class:apache::thrift::transport::TZlibTransport
urpos_	transport/TZlibTransport.h	/^  int urpos_;$/;"	m	class:apache::thrift::transport::TZlibTransport
useHighPriorityIOThreads	server/TNonblockingServer.h	/^  bool useHighPriorityIOThreads() const { return useHighPriorityIOThreads_; }$/;"	f	class:apache::thrift::server::TNonblockingServer
useHighPriorityIOThreads_	server/TNonblockingServer.h	/^  bool useHighPriorityIOThreads_;$/;"	m	class:apache::thrift::server::TNonblockingServer
useHighPriority_	server/TNonblockingServer.h	/^  bool useHighPriority_;$/;"	m	class:apache::thrift::server::TNonblockingIOThread
useLowMinRto_	transport/TSocket.cpp	/^bool TSocket::useLowMinRto_ = false;$/;"	m	class:apache::thrift::transport::TSocket	file:
useLowMinRto_	transport/TSocket.h	/^  static bool useLowMinRto_;$/;"	m	class:apache::thrift::transport::TSocket
userEventBase_	server/TNonblockingServer.h	/^  event_base* userEventBase_;$/;"	m	class:apache::thrift::server::TNonblockingServer
uwbuf_	transport/TZlibTransport.h	/^  uint8_t* uwbuf_;$/;"	m	class:apache::thrift::transport::TZlibTransport
uwbuf_size_	transport/TZlibTransport.h	/^  uint32_t uwbuf_size_;$/;"	m	class:apache::thrift::transport::TZlibTransport
uwpos_	transport/TZlibTransport.h	/^  int uwpos_;$/;"	m	class:apache::thrift::transport::TZlibTransport
value	gen-cpp-fb-s/FacebookService.h	/^  bool value :1;$/;"	m	struct:facebook::fb303::_FacebookService_setOption_args__isset
value	gen-cpp-fb-s/FacebookService.h	/^  const std::string* value;$/;"	m	class:facebook::fb303::FacebookService_setOption_pargs
value	gen-cpp-fb-s/FacebookService.h	/^  std::string value;$/;"	m	class:facebook::fb303::FacebookService_setOption_args
value	gen-cpp-fb/FacebookService.h	/^  bool value :1;$/;"	m	struct:facebook::fb303::_FacebookService_setOption_args__isset
value	gen-cpp-fb/FacebookService.h	/^  const std::string* value;$/;"	m	class:facebook::fb303::FacebookService_setOption_pargs
value	gen-cpp-fb/FacebookService.h	/^  std::string value;$/;"	m	class:facebook::fb303::FacebookService_setOption_args
verify	transport/TSSLSocket.cpp	/^Decision DefaultClientAccessManager::verify(const sockaddr_storage& sa) throw() {$/;"	f	class:apache::thrift::transport::DefaultClientAccessManager
verify	transport/TSSLSocket.cpp	/^Decision DefaultClientAccessManager::verify(const sockaddr_storage& sa,$/;"	f	class:apache::thrift::transport::DefaultClientAccessManager
verify	transport/TSSLSocket.cpp	/^Decision DefaultClientAccessManager::verify(const string& host,$/;"	f	class:apache::thrift::transport::DefaultClientAccessManager
verify	transport/TSSLSocket.h	/^  virtual Decision verify(const sockaddr_storage& \/* sa *\/) throw() { return DENY; }$/;"	f	class:apache::thrift::transport::AccessManager
verify	transport/TSSLSocket.h	/^  virtual Decision verify(const sockaddr_storage& \/* sa *\/,$/;"	f	class:apache::thrift::transport::AccessManager
verify	transport/TSSLSocket.h	/^  virtual Decision verify(const std::string& \/* host *\/,$/;"	f	class:apache::thrift::transport::AccessManager
verifyChecksum	transport/TZlibTransport.cpp	/^void TZlibTransport::verifyChecksum() {$/;"	f	class:apache::thrift::transport::TZlibTransport
virtual_calls	VirtualProfiling.cpp	/^BacktraceMap virtual_calls;$/;"	m	namespace:apache::thrift	file:
virtual_calls_mutex	VirtualProfiling.cpp	/^Mutex virtual_calls_mutex;$/;"	m	namespace:apache::thrift	file:
wBase_	transport/TBufferTransports.h	/^  uint8_t* wBase_; \/\/开始写的位置$/;"	m	class:apache::thrift::transport::TBufferBase
wBound_	transport/TBufferTransports.h	/^  uint8_t* wBound_; \/\/写界限$/;"	m	class:apache::thrift::transport::TBufferBase
wBufSize_	transport/TBufferTransports.h	/^  uint32_t wBufSize_;$/;"	m	class:apache::thrift::transport::TBufferedTransport
wBufSize_	transport/TBufferTransports.h	/^  uint32_t wBufSize_;$/;"	m	class:apache::thrift::transport::TFramedTransport
wBufSize_	transport/TTransportUtils.h	/^  uint32_t wBufSize_;$/;"	m	class:apache::thrift::transport::TPipedTransport
wBuf_	transport/TBufferTransports.h	/^  boost::scoped_array<uint8_t> wBuf_;$/;"	m	class:apache::thrift::transport::TBufferedTransport
wBuf_	transport/TBufferTransports.h	/^  boost::scoped_array<uint8_t> wBuf_;$/;"	m	class:apache::thrift::transport::TFramedTransport
wBuf_	transport/TTransportUtils.h	/^  uint8_t* wBuf_;$/;"	m	class:apache::thrift::transport::TPipedTransport
wLen_	transport/TTransportUtils.h	/^  uint32_t wLen_;$/;"	m	class:apache::thrift::transport::TPipedTransport
wait	concurrency/BoostMonitor.cpp	/^  void wait(int64_t timeout_ms) {$/;"	f	class:apache::thrift::concurrency::Monitor::Impl
wait	concurrency/BoostMonitor.cpp	/^void Monitor::wait(int64_t timeout) const {$/;"	f	class:apache::thrift::concurrency::Monitor
wait	concurrency/Monitor.cpp	/^  void wait(int64_t timeout_ms) const {$/;"	f	class:apache::thrift::concurrency::Monitor::Impl
wait	concurrency/Monitor.cpp	/^void Monitor::wait(int64_t timeout) const {$/;"	f	class:apache::thrift::concurrency::Monitor
wait	concurrency/StdMonitor.cpp	/^  void wait(int64_t timeout_ms) {$/;"	f	class:apache::thrift::concurrency::Monitor::Impl
wait	concurrency/StdMonitor.cpp	/^void Monitor::wait(int64_t timeout) const {$/;"	f	class:apache::thrift::concurrency::Monitor
waitForTime	concurrency/BoostMonitor.cpp	/^  int waitForTime(const THRIFT_TIMESPEC* abstime) {$/;"	f	class:apache::thrift::concurrency::Monitor::Impl
waitForTime	concurrency/BoostMonitor.cpp	/^  int waitForTime(const struct timeval* abstime) {$/;"	f	class:apache::thrift::concurrency::Monitor::Impl
waitForTime	concurrency/BoostMonitor.cpp	/^int Monitor::waitForTime(const THRIFT_TIMESPEC* abstime) const {$/;"	f	class:apache::thrift::concurrency::Monitor
waitForTime	concurrency/BoostMonitor.cpp	/^int Monitor::waitForTime(const timeval* abstime) const {$/;"	f	class:apache::thrift::concurrency::Monitor
waitForTime	concurrency/Monitor.cpp	/^  int waitForTime(const THRIFT_TIMESPEC* abstime) const {$/;"	f	class:apache::thrift::concurrency::Monitor::Impl
waitForTime	concurrency/Monitor.cpp	/^  int waitForTime(const struct timeval* abstime) const {$/;"	f	class:apache::thrift::concurrency::Monitor::Impl
waitForTime	concurrency/Monitor.cpp	/^int Monitor::waitForTime(const THRIFT_TIMESPEC* abstime) const {$/;"	f	class:apache::thrift::concurrency::Monitor
waitForTime	concurrency/Monitor.cpp	/^int Monitor::waitForTime(const timeval* abstime) const {$/;"	f	class:apache::thrift::concurrency::Monitor
waitForTime	concurrency/StdMonitor.cpp	/^  int waitForTime(const THRIFT_TIMESPEC* abstime) {$/;"	f	class:apache::thrift::concurrency::Monitor::Impl
waitForTime	concurrency/StdMonitor.cpp	/^  int waitForTime(const struct timeval* abstime) {$/;"	f	class:apache::thrift::concurrency::Monitor::Impl
waitForTime	concurrency/StdMonitor.cpp	/^int Monitor::waitForTime(const THRIFT_TIMESPEC* abstime) const {$/;"	f	class:apache::thrift::concurrency::Monitor
waitForTime	concurrency/StdMonitor.cpp	/^int Monitor::waitForTime(const timeval* abstime) const {$/;"	f	class:apache::thrift::concurrency::Monitor
waitForTimeRelative	concurrency/BoostMonitor.cpp	/^  int waitForTimeRelative(int64_t timeout_ms) {$/;"	f	class:apache::thrift::concurrency::Monitor::Impl
waitForTimeRelative	concurrency/BoostMonitor.cpp	/^int Monitor::waitForTimeRelative(int64_t timeout_ms) const {$/;"	f	class:apache::thrift::concurrency::Monitor
waitForTimeRelative	concurrency/Monitor.cpp	/^  int waitForTimeRelative(int64_t timeout_ms) const {$/;"	f	class:apache::thrift::concurrency::Monitor::Impl
waitForTimeRelative	concurrency/Monitor.cpp	/^int Monitor::waitForTimeRelative(int64_t timeout_ms) const {$/;"	f	class:apache::thrift::concurrency::Monitor
waitForTimeRelative	concurrency/StdMonitor.cpp	/^  int waitForTimeRelative(int64_t timeout_ms) {$/;"	f	class:apache::thrift::concurrency::Monitor::Impl
waitForTimeRelative	concurrency/StdMonitor.cpp	/^int Monitor::waitForTimeRelative(int64_t timeout_ms) const {$/;"	f	class:apache::thrift::concurrency::Monitor
waitForWork	async/TConcurrentClientSyncInfo.cpp	/^void TConcurrentClientSyncInfo::waitForWork(int32_t seqid)$/;"	f	class:apache::thrift::async::TConcurrentClientSyncInfo
waitForever	concurrency/BoostMonitor.cpp	/^  int waitForever() {$/;"	f	class:apache::thrift::concurrency::Monitor::Impl
waitForever	concurrency/BoostMonitor.cpp	/^int Monitor::waitForever() const {$/;"	f	class:apache::thrift::concurrency::Monitor
waitForever	concurrency/Monitor.cpp	/^  int waitForever() const {$/;"	f	class:apache::thrift::concurrency::Monitor::Impl
waitForever	concurrency/Monitor.cpp	/^int Monitor::waitForever() const {$/;"	f	class:apache::thrift::concurrency::Monitor
waitForever	concurrency/StdMonitor.cpp	/^  int waitForever() {$/;"	f	class:apache::thrift::concurrency::Monitor::Impl
waitForever	concurrency/StdMonitor.cpp	/^int Monitor::waitForever() const {$/;"	f	class:apache::thrift::concurrency::Monitor
wakeupAnyone_	async/TConcurrentClientSyncInfo.cpp	/^void TConcurrentClientSyncInfo::wakeupAnyone_(const Guard &)$/;"	f	class:apache::thrift::async::TConcurrentClientSyncInfo
wakeupSomeone_	async/TConcurrentClientSyncInfo.h	/^  bool wakeupSomeone_;$/;"	m	class:apache::thrift::async::TConcurrentClientSyncInfo
weakRef	concurrency/BoostThreadFactory.cpp	/^  void weakRef(shared_ptr<BoostThread> self) {$/;"	f	class:apache::thrift::concurrency::BoostThread
weakRef	concurrency/PosixThreadFactory.cpp	/^  void weakRef(shared_ptr<PthreadThread> self) {$/;"	f	class:apache::thrift::concurrency::PthreadThread
what	TApplicationException.h	/^  virtual const char* what() const throw() {$/;"	f	class:apache::thrift::TApplicationException
what	Thrift.h	/^  virtual const char* what() const throw() {$/;"	f	class:apache::thrift::TException
what	protocol/TProtocolException.h	/^  virtual const char* what() const throw() {$/;"	f	class:apache::thrift::protocol::TProtocolException
what	transport/TSSLSocket.h	/^  virtual const char* what() const throw() {$/;"	f	class:apache::thrift::transport::TSSLException
what	transport/TTransportException.cpp	/^const char* TTransportException::what() const throw() {$/;"	f	class:apache::thrift::transport::TTransportException
workAvailableEvent_	windows/OverlappedSubmissionThread.h	/^  TAutoResetEvent workAvailableEvent_;$/;"	m	class:apache::thrift::transport::TOverlappedSubmissionThread
workList_	windows/OverlappedSubmissionThread.h	/^  DECLSPEC_ALIGN(MEMORY_ALLOCATION_ALIGNMENT) SLIST_HEADER workList_;$/;"	m	class:apache::thrift::transport::TOverlappedSubmissionThread
workSocket	server/TNonblockingServer.cpp	/^void TNonblockingServer::TConnection::workSocket() {$/;"	f	class:apache::thrift::server::TNonblockingServer::TConnection
workerCount	concurrency/ThreadManager.cpp	/^  size_t workerCount() const {$/;"	f	class:apache::thrift::concurrency::ThreadManager::Impl
workerCount_	concurrency/ThreadManager.cpp	/^  const size_t workerCount_;$/;"	m	class:apache::thrift::concurrency::SimpleThreadManager	file:
workerCount_	concurrency/ThreadManager.cpp	/^  size_t workerCount_;$/;"	m	class:apache::thrift::concurrency::ThreadManager::Impl	file:
workerMaxCount_	concurrency/ThreadManager.cpp	/^  size_t workerMaxCount_;$/;"	m	class:apache::thrift::concurrency::ThreadManager::Impl	file:
workerMonitor_	concurrency/ThreadManager.cpp	/^  Monitor workerMonitor_;$/;"	m	class:apache::thrift::concurrency::ThreadManager::Impl	file:
workers_	concurrency/ThreadManager.cpp	/^  std::set<shared_ptr<Thread> > workers_;$/;"	m	class:apache::thrift::concurrency::ThreadManager::Impl	file:
write	TApplicationException.cpp	/^uint32_t TApplicationException::write(apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:apache::thrift::TApplicationException
write	gen-cpp-fb-s/FacebookService.cpp	/^uint32_t FacebookService_getName_args::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:facebook::fb303::FacebookService_getName_args
write	gen-cpp-fb-s/FacebookService.cpp	/^uint32_t FacebookService_getName_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:facebook::fb303::FacebookService_getName_pargs
write	gen-cpp-fb-s/FacebookService.cpp	/^uint32_t FacebookService_getName_result::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:facebook::fb303::FacebookService_getName_result
write	gen-cpp-fb-s/FacebookService.cpp	/^uint32_t FacebookService_setOption_args::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:facebook::fb303::FacebookService_setOption_args
write	gen-cpp-fb-s/FacebookService.cpp	/^uint32_t FacebookService_setOption_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:facebook::fb303::FacebookService_setOption_pargs
write	gen-cpp-fb-s/FacebookService.cpp	/^uint32_t FacebookService_setOption_result::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:facebook::fb303::FacebookService_setOption_result
write	gen-cpp-fb-s/FacebookService.cpp	/^uint32_t FacebookService_shutdown_args::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:facebook::fb303::FacebookService_shutdown_args
write	gen-cpp-fb-s/FacebookService.cpp	/^uint32_t FacebookService_shutdown_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:facebook::fb303::FacebookService_shutdown_pargs
write	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_aliveSince_args::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:facebook::fb303::FacebookService_aliveSince_args
write	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_aliveSince_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:facebook::fb303::FacebookService_aliveSince_pargs
write	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_aliveSince_result::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:facebook::fb303::FacebookService_aliveSince_result
write	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getCounter_args::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:facebook::fb303::FacebookService_getCounter_args
write	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getCounter_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:facebook::fb303::FacebookService_getCounter_pargs
write	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getCounter_result::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:facebook::fb303::FacebookService_getCounter_result
write	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getCounters_args::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:facebook::fb303::FacebookService_getCounters_args
write	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getCounters_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:facebook::fb303::FacebookService_getCounters_pargs
write	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getCounters_result::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:facebook::fb303::FacebookService_getCounters_result
write	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getCpuProfile_args::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:facebook::fb303::FacebookService_getCpuProfile_args
write	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getCpuProfile_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:facebook::fb303::FacebookService_getCpuProfile_pargs
write	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getCpuProfile_result::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:facebook::fb303::FacebookService_getCpuProfile_result
write	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getName_args::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:facebook::fb303::FacebookService_getName_args
write	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getName_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:facebook::fb303::FacebookService_getName_pargs
write	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getName_result::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:facebook::fb303::FacebookService_getName_result
write	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getOption_args::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:facebook::fb303::FacebookService_getOption_args
write	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getOption_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:facebook::fb303::FacebookService_getOption_pargs
write	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getOption_result::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:facebook::fb303::FacebookService_getOption_result
write	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getOptions_args::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:facebook::fb303::FacebookService_getOptions_args
write	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getOptions_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:facebook::fb303::FacebookService_getOptions_pargs
write	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getOptions_result::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:facebook::fb303::FacebookService_getOptions_result
write	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getStatusDetails_args::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:facebook::fb303::FacebookService_getStatusDetails_args
write	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getStatusDetails_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:facebook::fb303::FacebookService_getStatusDetails_pargs
write	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getStatusDetails_result::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:facebook::fb303::FacebookService_getStatusDetails_result
write	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getStatus_args::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:facebook::fb303::FacebookService_getStatus_args
write	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getStatus_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:facebook::fb303::FacebookService_getStatus_pargs
write	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getStatus_result::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:facebook::fb303::FacebookService_getStatus_result
write	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getVersion_args::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:facebook::fb303::FacebookService_getVersion_args
write	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getVersion_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:facebook::fb303::FacebookService_getVersion_pargs
write	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_getVersion_result::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:facebook::fb303::FacebookService_getVersion_result
write	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_reinitialize_args::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:facebook::fb303::FacebookService_reinitialize_args
write	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_reinitialize_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:facebook::fb303::FacebookService_reinitialize_pargs
write	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_setOption_args::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:facebook::fb303::FacebookService_setOption_args
write	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_setOption_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:facebook::fb303::FacebookService_setOption_pargs
write	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_setOption_result::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:facebook::fb303::FacebookService_setOption_result
write	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_shutdown_args::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:facebook::fb303::FacebookService_shutdown_args
write	gen-cpp-fb/FacebookService.cpp	/^uint32_t FacebookService_shutdown_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {$/;"	f	class:facebook::fb303::FacebookService_shutdown_pargs
write	protocol/TJSONProtocol.cpp	/^  uint32_t write(TTransport& trans) {$/;"	f	class:apache::thrift::protocol::JSONListContext
write	protocol/TJSONProtocol.cpp	/^  uint32_t write(TTransport& trans) {$/;"	f	class:apache::thrift::protocol::JSONPairContext
write	protocol/TJSONProtocol.cpp	/^  virtual uint32_t write(TTransport& trans) {$/;"	f	class:apache::thrift::protocol::TJSONContext
write	qt/TQIODeviceTransport.cpp	/^void TQIODeviceTransport::write(const uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::TQIODeviceTransport
write	transport/TBufferTransports.h	/^  void write(const uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::TBufferBase
write	transport/TFDTransport.cpp	/^void TFDTransport::write(const uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::TFDTransport
write	transport/TFileTransport.cpp	/^void TFileTransport::write(const uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::TFileTransport
write	transport/THttpTransport.cpp	/^void THttpTransport::write(const uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::THttpTransport
write	transport/TPipe.cpp	/^  virtual void write(const uint8_t* buf, uint32_t len) { pipe_write(PipeWrt_.h, buf, len); }$/;"	f	class:apache::thrift::transport::TAnonPipeImpl
write	transport/TPipe.cpp	/^  virtual void write(const uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::TNamedPipeImpl
write	transport/TPipe.cpp	/^  virtual void write(const uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::TWaitableNamedPipeImpl
write	transport/TPipe.cpp	/^void TPipe::write(const uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::TPipe
write	transport/TSSLSocket.cpp	/^void TSSLSocket::write(const uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::TSSLSocket
write	transport/TShortReadTransport.h	/^  void write(const uint8_t* buf, uint32_t len) { transport_->write(buf, len); }$/;"	f	class:apache::thrift::transport::test::TShortReadTransport
write	transport/TSocket.cpp	/^void TSocket::write(const uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::TSocket
write	transport/TTransport.h	/^  void write(const uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::TTransport
write	transport/TTransportUtils.cpp	/^void TPipedFileReaderTransport::write(const uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::TPipedFileReaderTransport
write	transport/TTransportUtils.cpp	/^void TPipedTransport::write(const uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::TPipedTransport
write	transport/TTransportUtils.h	/^  void write(const uint8_t* \/* buf *\/, uint32_t \/* len *\/) { return; }$/;"	f	class:apache::thrift::transport::TNullTransport
write	transport/TVirtualTransport.h	/^  void write(const uint8_t* buf, uint32_t len) { this->TTransport::write_virt(buf, len); }$/;"	f	class:apache::thrift::transport::TTransportDefaults
write	transport/TZlibTransport.cpp	/^void TZlibTransport::write(const uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::TZlibTransport
writeBinary	protocol/TBinaryProtocol.tcc	/^uint32_t TBinaryProtocolT<Transport_, ByteOrder_>::writeBinary(const std::string& str) {$/;"	f	class:apache::thrift::protocol::TBinaryProtocolT
writeBinary	protocol/TCompactProtocol.tcc	/^uint32_t TCompactProtocolT<Transport_>::writeBinary(const std::string& str) {$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
writeBinary	protocol/TDebugProtocol.cpp	/^uint32_t TDebugProtocol::writeBinary(const string& str) {$/;"	f	class:apache::thrift::protocol::TDebugProtocol
writeBinary	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::writeBinary(const std::string& str) {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
writeBinary	protocol/TProtocol.h	/^  uint32_t writeBinary(const std::string& str) {$/;"	f	class:apache::thrift::protocol::TProtocol
writeBinary	protocol/TVirtualProtocol.h	/^  uint32_t writeBinary(const std::string& str) {$/;"	f	class:apache::thrift::protocol::TProtocolDefaults
writeBinary_virt	protocol/TProtocolDecorator.h	/^  virtual uint32_t writeBinary_virt(const std::string& str) { return protocol->writeBinary(str); }$/;"	f	class:apache::thrift::protocol::TProtocolDecorator
writeBinary_virt	protocol/TVirtualProtocol.h	/^  virtual uint32_t writeBinary_virt(const std::string& str) {$/;"	f	class:apache::thrift::protocol::TVirtualProtocol
writeBool	protocol/TBinaryProtocol.tcc	/^uint32_t TBinaryProtocolT<Transport_, ByteOrder_>::writeBool(const bool value) {$/;"	f	class:apache::thrift::protocol::TBinaryProtocolT
writeBool	protocol/TCompactProtocol.tcc	/^uint32_t TCompactProtocolT<Transport_>::writeBool(const bool value) {$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
writeBool	protocol/TDebugProtocol.cpp	/^uint32_t TDebugProtocol::writeBool(const bool value) {$/;"	f	class:apache::thrift::protocol::TDebugProtocol
writeBool	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::writeBool(const bool value) {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
writeBool	protocol/TProtocol.h	/^  uint32_t writeBool(const bool value) {$/;"	f	class:apache::thrift::protocol::TProtocol
writeBool	protocol/TVirtualProtocol.h	/^  uint32_t writeBool(const bool value) {$/;"	f	class:apache::thrift::protocol::TProtocolDefaults
writeBool_virt	protocol/TProtocolDecorator.h	/^  virtual uint32_t writeBool_virt(const bool value) { return protocol->writeBool(value); }$/;"	f	class:apache::thrift::protocol::TProtocolDecorator
writeBool_virt	protocol/TVirtualProtocol.h	/^  virtual uint32_t writeBool_virt(const bool value) {$/;"	f	class:apache::thrift::protocol::TVirtualProtocol
writeBufferDefaultSize_	server/TNonblockingServer.h	/^  size_t writeBufferDefaultSize_;$/;"	m	class:apache::thrift::server::TNonblockingServer
writeBufferPos_	server/TNonblockingServer.cpp	/^  uint32_t writeBufferPos_;$/;"	m	class:apache::thrift::server::TNonblockingServer::TConnection	file:
writeBufferSize_	server/TNonblockingServer.cpp	/^  uint32_t writeBufferSize_;$/;"	m	class:apache::thrift::server::TNonblockingServer::TConnection	file:
writeBuffer_	server/TNonblockingServer.cpp	/^  uint8_t* writeBuffer_;$/;"	m	class:apache::thrift::server::TNonblockingServer::TConnection	file:
writeBuffer_	transport/THttpTransport.h	/^  TMemoryBuffer writeBuffer_;$/;"	m	class:apache::thrift::transport::THttpTransport
writeByte	protocol/TBinaryProtocol.tcc	/^uint32_t TBinaryProtocolT<Transport_, ByteOrder_>::writeByte(const int8_t byte) {$/;"	f	class:apache::thrift::protocol::TBinaryProtocolT
writeByte	protocol/TCompactProtocol.tcc	/^uint32_t TCompactProtocolT<Transport_>::writeByte(const int8_t byte) {$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
writeByte	protocol/TDebugProtocol.cpp	/^uint32_t TDebugProtocol::writeByte(const int8_t byte) {$/;"	f	class:apache::thrift::protocol::TDebugProtocol
writeByte	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::writeByte(const int8_t byte) {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
writeByte	protocol/TProtocol.h	/^  uint32_t writeByte(const int8_t byte) {$/;"	f	class:apache::thrift::protocol::TProtocol
writeByte	protocol/TVirtualProtocol.h	/^  uint32_t writeByte(const int8_t byte) {$/;"	f	class:apache::thrift::protocol::TProtocolDefaults
writeByte_virt	protocol/TProtocolDecorator.h	/^  virtual uint32_t writeByte_virt(const int8_t byte) { return protocol->writeByte(byte); }$/;"	f	class:apache::thrift::protocol::TProtocolDecorator
writeByte_virt	protocol/TVirtualProtocol.h	/^  virtual uint32_t writeByte_virt(const int8_t byte) {$/;"	f	class:apache::thrift::protocol::TVirtualProtocol
writeCollectionBegin	protocol/TCompactProtocol.tcc	/^uint32_t TCompactProtocolT<Transport_>::writeCollectionBegin(const TType elemType,$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
writeDouble	protocol/TBinaryProtocol.tcc	/^uint32_t TBinaryProtocolT<Transport_, ByteOrder_>::writeDouble(const double dub) {$/;"	f	class:apache::thrift::protocol::TBinaryProtocolT
writeDouble	protocol/TCompactProtocol.tcc	/^uint32_t TCompactProtocolT<Transport_>::writeDouble(const double dub) {$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
writeDouble	protocol/TDebugProtocol.cpp	/^uint32_t TDebugProtocol::writeDouble(const double dub) {$/;"	f	class:apache::thrift::protocol::TDebugProtocol
writeDouble	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::writeDouble(const double dub) {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
writeDouble	protocol/TProtocol.h	/^  uint32_t writeDouble(const double dub) {$/;"	f	class:apache::thrift::protocol::TProtocol
writeDouble	protocol/TVirtualProtocol.h	/^  uint32_t writeDouble(const double dub) {$/;"	f	class:apache::thrift::protocol::TProtocolDefaults
writeDouble_virt	protocol/TProtocolDecorator.h	/^  virtual uint32_t writeDouble_virt(const double dub) { return protocol->writeDouble(dub); }$/;"	f	class:apache::thrift::protocol::TProtocolDecorator
writeDouble_virt	protocol/TVirtualProtocol.h	/^  virtual uint32_t writeDouble_virt(const double dub) {$/;"	f	class:apache::thrift::protocol::TVirtualProtocol
writeEnd	transport/TBufferTransports.cpp	/^uint32_t TFramedTransport::writeEnd() {$/;"	f	class:apache::thrift::transport::TFramedTransport
writeEnd	transport/TBufferTransports.h	/^  uint32_t writeEnd() {$/;"	f	class:apache::thrift::transport::TMemoryBuffer
writeEnd	transport/TTransport.h	/^  virtual uint32_t writeEnd() {$/;"	f	class:apache::thrift::transport::TTransport
writeEnd	transport/TTransportUtils.cpp	/^uint32_t TPipedFileReaderTransport::writeEnd() {$/;"	f	class:apache::thrift::transport::TPipedFileReaderTransport
writeEnd	transport/TTransportUtils.h	/^  uint32_t writeEnd() {$/;"	f	class:apache::thrift::transport::TPipedTransport
writeFieldBegin	protocol/TBinaryProtocol.tcc	/^uint32_t TBinaryProtocolT<Transport_, ByteOrder_>::writeFieldBegin(const char* name,$/;"	f	class:apache::thrift::protocol::TBinaryProtocolT
writeFieldBegin	protocol/TCompactProtocol.tcc	/^uint32_t TCompactProtocolT<Transport_>::writeFieldBegin(const char* name,$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
writeFieldBegin	protocol/TDebugProtocol.cpp	/^uint32_t TDebugProtocol::writeFieldBegin(const char* name,$/;"	f	class:apache::thrift::protocol::TDebugProtocol
writeFieldBegin	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::writeFieldBegin(const char* name,$/;"	f	class:apache::thrift::protocol::TJSONProtocol
writeFieldBegin	protocol/TProtocol.h	/^  uint32_t writeFieldBegin(const char* name, const TType fieldType, const int16_t fieldId) {$/;"	f	class:apache::thrift::protocol::TProtocol
writeFieldBegin	protocol/TVirtualProtocol.h	/^  uint32_t writeFieldBegin(const char* name, const TType fieldType, const int16_t fieldId) {$/;"	f	class:apache::thrift::protocol::TProtocolDefaults
writeFieldBeginInternal	protocol/TCompactProtocol.tcc	/^int32_t TCompactProtocolT<Transport_>::writeFieldBeginInternal($/;"	f	class:apache::thrift::protocol::TCompactProtocolT
writeFieldBegin_virt	protocol/TProtocolDecorator.h	/^  virtual uint32_t writeFieldBegin_virt(const char* name,$/;"	f	class:apache::thrift::protocol::TProtocolDecorator
writeFieldBegin_virt	protocol/TVirtualProtocol.h	/^  virtual uint32_t writeFieldBegin_virt(const char* name,$/;"	f	class:apache::thrift::protocol::TVirtualProtocol
writeFieldEnd	protocol/TBinaryProtocol.tcc	/^uint32_t TBinaryProtocolT<Transport_, ByteOrder_>::writeFieldEnd() {$/;"	f	class:apache::thrift::protocol::TBinaryProtocolT
writeFieldEnd	protocol/TCompactProtocol.h	/^  uint32_t writeFieldEnd() { return 0; }$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
writeFieldEnd	protocol/TDebugProtocol.cpp	/^uint32_t TDebugProtocol::writeFieldEnd() {$/;"	f	class:apache::thrift::protocol::TDebugProtocol
writeFieldEnd	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::writeFieldEnd() {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
writeFieldEnd	protocol/TProtocol.h	/^  uint32_t writeFieldEnd() {$/;"	f	class:apache::thrift::protocol::TProtocol
writeFieldEnd	protocol/TVirtualProtocol.h	/^  uint32_t writeFieldEnd() {$/;"	f	class:apache::thrift::protocol::TProtocolDefaults
writeFieldEnd_virt	protocol/TProtocolDecorator.h	/^  virtual uint32_t writeFieldEnd_virt() { return protocol->writeFieldEnd(); }$/;"	f	class:apache::thrift::protocol::TProtocolDecorator
writeFieldEnd_virt	protocol/TVirtualProtocol.h	/^  virtual uint32_t writeFieldEnd_virt() { return static_cast<Protocol_*>(this)->writeFieldEnd(); }$/;"	f	class:apache::thrift::protocol::TVirtualProtocol
writeFieldStop	protocol/TBinaryProtocol.tcc	/^uint32_t TBinaryProtocolT<Transport_, ByteOrder_>::writeFieldStop() {$/;"	f	class:apache::thrift::protocol::TBinaryProtocolT
writeFieldStop	protocol/TCompactProtocol.tcc	/^uint32_t TCompactProtocolT<Transport_>::writeFieldStop() {$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
writeFieldStop	protocol/TDebugProtocol.cpp	/^uint32_t TDebugProtocol::writeFieldStop() {$/;"	f	class:apache::thrift::protocol::TDebugProtocol
writeFieldStop	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::writeFieldStop() {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
writeFieldStop	protocol/TProtocol.h	/^  uint32_t writeFieldStop() {$/;"	f	class:apache::thrift::protocol::TProtocol
writeFieldStop	protocol/TVirtualProtocol.h	/^  uint32_t writeFieldStop() {$/;"	f	class:apache::thrift::protocol::TProtocolDefaults
writeFieldStop_virt	protocol/TProtocolDecorator.h	/^  virtual uint32_t writeFieldStop_virt() { return protocol->writeFieldStop(); }$/;"	f	class:apache::thrift::protocol::TProtocolDecorator
writeFieldStop_virt	protocol/TVirtualProtocol.h	/^  virtual uint32_t writeFieldStop_virt() { return static_cast<Protocol_*>(this)->writeFieldStop(); }$/;"	f	class:apache::thrift::protocol::TVirtualProtocol
writeI16	protocol/TBinaryProtocol.tcc	/^uint32_t TBinaryProtocolT<Transport_, ByteOrder_>::writeI16(const int16_t i16) {$/;"	f	class:apache::thrift::protocol::TBinaryProtocolT
writeI16	protocol/TCompactProtocol.tcc	/^uint32_t TCompactProtocolT<Transport_>::writeI16(const int16_t i16) {$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
writeI16	protocol/TDebugProtocol.cpp	/^uint32_t TDebugProtocol::writeI16(const int16_t i16) {$/;"	f	class:apache::thrift::protocol::TDebugProtocol
writeI16	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::writeI16(const int16_t i16) {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
writeI16	protocol/TProtocol.h	/^  uint32_t writeI16(const int16_t i16) {$/;"	f	class:apache::thrift::protocol::TProtocol
writeI16	protocol/TVirtualProtocol.h	/^  uint32_t writeI16(const int16_t i16) {$/;"	f	class:apache::thrift::protocol::TProtocolDefaults
writeI16_virt	protocol/TProtocolDecorator.h	/^  virtual uint32_t writeI16_virt(const int16_t i16) { return protocol->writeI16(i16); }$/;"	f	class:apache::thrift::protocol::TProtocolDecorator
writeI16_virt	protocol/TVirtualProtocol.h	/^  virtual uint32_t writeI16_virt(const int16_t i16) {$/;"	f	class:apache::thrift::protocol::TVirtualProtocol
writeI32	protocol/TBinaryProtocol.tcc	/^uint32_t TBinaryProtocolT<Transport_, ByteOrder_>::writeI32(const int32_t i32) {$/;"	f	class:apache::thrift::protocol::TBinaryProtocolT
writeI32	protocol/TCompactProtocol.tcc	/^uint32_t TCompactProtocolT<Transport_>::writeI32(const int32_t i32) {$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
writeI32	protocol/TDebugProtocol.cpp	/^uint32_t TDebugProtocol::writeI32(const int32_t i32) {$/;"	f	class:apache::thrift::protocol::TDebugProtocol
writeI32	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::writeI32(const int32_t i32) {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
writeI32	protocol/TProtocol.h	/^  uint32_t writeI32(const int32_t i32) {$/;"	f	class:apache::thrift::protocol::TProtocol
writeI32	protocol/TVirtualProtocol.h	/^  uint32_t writeI32(const int32_t i32) {$/;"	f	class:apache::thrift::protocol::TProtocolDefaults
writeI32_virt	protocol/TProtocolDecorator.h	/^  virtual uint32_t writeI32_virt(const int32_t i32) { return protocol->writeI32(i32); }$/;"	f	class:apache::thrift::protocol::TProtocolDecorator
writeI32_virt	protocol/TVirtualProtocol.h	/^  virtual uint32_t writeI32_virt(const int32_t i32) {$/;"	f	class:apache::thrift::protocol::TVirtualProtocol
writeI64	protocol/TBinaryProtocol.tcc	/^uint32_t TBinaryProtocolT<Transport_, ByteOrder_>::writeI64(const int64_t i64) {$/;"	f	class:apache::thrift::protocol::TBinaryProtocolT
writeI64	protocol/TCompactProtocol.tcc	/^uint32_t TCompactProtocolT<Transport_>::writeI64(const int64_t i64) {$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
writeI64	protocol/TDebugProtocol.cpp	/^uint32_t TDebugProtocol::writeI64(const int64_t i64) {$/;"	f	class:apache::thrift::protocol::TDebugProtocol
writeI64	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::writeI64(const int64_t i64) {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
writeI64	protocol/TProtocol.h	/^  uint32_t writeI64(const int64_t i64) {$/;"	f	class:apache::thrift::protocol::TProtocol
writeI64	protocol/TVirtualProtocol.h	/^  uint32_t writeI64(const int64_t i64) {$/;"	f	class:apache::thrift::protocol::TProtocolDefaults
writeI64_virt	protocol/TProtocolDecorator.h	/^  virtual uint32_t writeI64_virt(const int64_t i64) { return protocol->writeI64(i64); }$/;"	f	class:apache::thrift::protocol::TProtocolDecorator
writeI64_virt	protocol/TVirtualProtocol.h	/^  virtual uint32_t writeI64_virt(const int64_t i64) {$/;"	f	class:apache::thrift::protocol::TVirtualProtocol
writeIndented	protocol/TDebugProtocol.cpp	/^uint32_t TDebugProtocol::writeIndented(const string& str) {$/;"	f	class:apache::thrift::protocol::TDebugProtocol
writeItem	protocol/TDebugProtocol.cpp	/^uint32_t TDebugProtocol::writeItem(const std::string& str) {$/;"	f	class:apache::thrift::protocol::TDebugProtocol
writeJSONArrayEnd	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::writeJSONArrayEnd() {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
writeJSONArrayStart	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::writeJSONArrayStart() {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
writeJSONBase64	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::writeJSONBase64(const std::string& str) {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
writeJSONChar	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::writeJSONChar(uint8_t ch) {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
writeJSONDouble	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::writeJSONDouble(double num) {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
writeJSONEscapeChar	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::writeJSONEscapeChar(uint8_t ch) {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
writeJSONInteger	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::writeJSONInteger(NumberType num) {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
writeJSONObjectEnd	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::writeJSONObjectEnd() {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
writeJSONObjectStart	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::writeJSONObjectStart() {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
writeJSONString	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::writeJSONString(const std::string& str) {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
writeListBegin	protocol/TBinaryProtocol.tcc	/^uint32_t TBinaryProtocolT<Transport_, ByteOrder_>::writeListBegin(const TType elemType, const uint32_t size) {$/;"	f	class:apache::thrift::protocol::TBinaryProtocolT
writeListBegin	protocol/TCompactProtocol.tcc	/^uint32_t TCompactProtocolT<Transport_>::writeListBegin(const TType elemType,$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
writeListBegin	protocol/TDebugProtocol.cpp	/^uint32_t TDebugProtocol::writeListBegin(const TType elemType, const uint32_t size) {$/;"	f	class:apache::thrift::protocol::TDebugProtocol
writeListBegin	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::writeListBegin(const TType elemType, const uint32_t size) {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
writeListBegin	protocol/TProtocol.h	/^  uint32_t writeListBegin(const TType elemType, const uint32_t size) {$/;"	f	class:apache::thrift::protocol::TProtocol
writeListBegin	protocol/TVirtualProtocol.h	/^  uint32_t writeListBegin(const TType elemType, const uint32_t size) {$/;"	f	class:apache::thrift::protocol::TProtocolDefaults
writeListBegin_virt	protocol/TProtocolDecorator.h	/^  virtual uint32_t writeListBegin_virt(const TType elemType, const uint32_t size) {$/;"	f	class:apache::thrift::protocol::TProtocolDecorator
writeListBegin_virt	protocol/TVirtualProtocol.h	/^  virtual uint32_t writeListBegin_virt(const TType elemType, const uint32_t size) {$/;"	f	class:apache::thrift::protocol::TVirtualProtocol
writeListEnd	protocol/TBinaryProtocol.tcc	/^uint32_t TBinaryProtocolT<Transport_, ByteOrder_>::writeListEnd() {$/;"	f	class:apache::thrift::protocol::TBinaryProtocolT
writeListEnd	protocol/TCompactProtocol.h	/^  uint32_t writeListEnd() { return 0; }$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
writeListEnd	protocol/TDebugProtocol.cpp	/^uint32_t TDebugProtocol::writeListEnd() {$/;"	f	class:apache::thrift::protocol::TDebugProtocol
writeListEnd	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::writeListEnd() {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
writeListEnd	protocol/TProtocol.h	/^  uint32_t writeListEnd() {$/;"	f	class:apache::thrift::protocol::TProtocol
writeListEnd	protocol/TVirtualProtocol.h	/^  uint32_t writeListEnd() {$/;"	f	class:apache::thrift::protocol::TProtocolDefaults
writeListEnd_virt	protocol/TProtocolDecorator.h	/^  virtual uint32_t writeListEnd_virt() { return protocol->writeListEnd(); }$/;"	f	class:apache::thrift::protocol::TProtocolDecorator
writeListEnd_virt	protocol/TVirtualProtocol.h	/^  virtual uint32_t writeListEnd_virt() { return static_cast<Protocol_*>(this)->writeListEnd(); }$/;"	f	class:apache::thrift::protocol::TVirtualProtocol
writeMapBegin	protocol/TBinaryProtocol.tcc	/^uint32_t TBinaryProtocolT<Transport_, ByteOrder_>::writeMapBegin(const TType keyType,$/;"	f	class:apache::thrift::protocol::TBinaryProtocolT
writeMapBegin	protocol/TCompactProtocol.tcc	/^uint32_t TCompactProtocolT<Transport_>::writeMapBegin(const TType keyType,$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
writeMapBegin	protocol/TDebugProtocol.cpp	/^uint32_t TDebugProtocol::writeMapBegin(const TType keyType,$/;"	f	class:apache::thrift::protocol::TDebugProtocol
writeMapBegin	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::writeMapBegin(const TType keyType,$/;"	f	class:apache::thrift::protocol::TJSONProtocol
writeMapBegin	protocol/TProtocol.h	/^  uint32_t writeMapBegin(const TType keyType, const TType valType, const uint32_t size) {$/;"	f	class:apache::thrift::protocol::TProtocol
writeMapBegin	protocol/TVirtualProtocol.h	/^  uint32_t writeMapBegin(const TType keyType, const TType valType, const uint32_t size) {$/;"	f	class:apache::thrift::protocol::TProtocolDefaults
writeMapBegin_virt	protocol/TProtocolDecorator.h	/^  virtual uint32_t writeMapBegin_virt(const TType keyType,$/;"	f	class:apache::thrift::protocol::TProtocolDecorator
writeMapBegin_virt	protocol/TVirtualProtocol.h	/^  virtual uint32_t writeMapBegin_virt(const TType keyType,$/;"	f	class:apache::thrift::protocol::TVirtualProtocol
writeMapEnd	protocol/TBinaryProtocol.tcc	/^uint32_t TBinaryProtocolT<Transport_, ByteOrder_>::writeMapEnd() {$/;"	f	class:apache::thrift::protocol::TBinaryProtocolT
writeMapEnd	protocol/TCompactProtocol.h	/^  uint32_t writeMapEnd() { return 0; }$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
writeMapEnd	protocol/TDebugProtocol.cpp	/^uint32_t TDebugProtocol::writeMapEnd() {$/;"	f	class:apache::thrift::protocol::TDebugProtocol
writeMapEnd	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::writeMapEnd() {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
writeMapEnd	protocol/TProtocol.h	/^  uint32_t writeMapEnd() {$/;"	f	class:apache::thrift::protocol::TProtocol
writeMapEnd	protocol/TVirtualProtocol.h	/^  uint32_t writeMapEnd() {$/;"	f	class:apache::thrift::protocol::TProtocolDefaults
writeMapEnd_virt	protocol/TProtocolDecorator.h	/^  virtual uint32_t writeMapEnd_virt() { return protocol->writeMapEnd(); }$/;"	f	class:apache::thrift::protocol::TProtocolDecorator
writeMapEnd_virt	protocol/TVirtualProtocol.h	/^  virtual uint32_t writeMapEnd_virt() { return static_cast<Protocol_*>(this)->writeMapEnd(); }$/;"	f	class:apache::thrift::protocol::TVirtualProtocol
writeMessageBegin	protocol/TBinaryProtocol.tcc	/^uint32_t TBinaryProtocolT<Transport_, ByteOrder_>::writeMessageBegin(const std::string& name,$/;"	f	class:apache::thrift::protocol::TBinaryProtocolT
writeMessageBegin	protocol/TCompactProtocol.tcc	/^uint32_t TCompactProtocolT<Transport_>::writeMessageBegin($/;"	f	class:apache::thrift::protocol::TCompactProtocolT
writeMessageBegin	protocol/TDebugProtocol.cpp	/^uint32_t TDebugProtocol::writeMessageBegin(const std::string& name,$/;"	f	class:apache::thrift::protocol::TDebugProtocol
writeMessageBegin	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::writeMessageBegin(const std::string& name,$/;"	f	class:apache::thrift::protocol::TJSONProtocol
writeMessageBegin	protocol/TProtocol.h	/^  uint32_t writeMessageBegin(const std::string& name,$/;"	f	class:apache::thrift::protocol::TProtocol
writeMessageBegin	protocol/TVirtualProtocol.h	/^  uint32_t writeMessageBegin(const std::string& name,$/;"	f	class:apache::thrift::protocol::TProtocolDefaults
writeMessageBegin_virt	protocol/TMultiplexedProtocol.cpp	/^uint32_t TMultiplexedProtocol::writeMessageBegin_virt(const std::string& _name,$/;"	f	class:apache::thrift::protocol::TMultiplexedProtocol
writeMessageBegin_virt	protocol/TProtocolDecorator.h	/^  virtual uint32_t writeMessageBegin_virt(const std::string& name,$/;"	f	class:apache::thrift::protocol::TProtocolDecorator
writeMessageBegin_virt	protocol/TVirtualProtocol.h	/^  virtual uint32_t writeMessageBegin_virt(const std::string& name,$/;"	f	class:apache::thrift::protocol::TVirtualProtocol
writeMessageEnd	protocol/TBinaryProtocol.tcc	/^uint32_t TBinaryProtocolT<Transport_, ByteOrder_>::writeMessageEnd() {$/;"	f	class:apache::thrift::protocol::TBinaryProtocolT
writeMessageEnd	protocol/TCompactProtocol.h	/^  virtual uint32_t writeMessageEnd() { return 0; }$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
writeMessageEnd	protocol/TDebugProtocol.cpp	/^uint32_t TDebugProtocol::writeMessageEnd() {$/;"	f	class:apache::thrift::protocol::TDebugProtocol
writeMessageEnd	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::writeMessageEnd() {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
writeMessageEnd	protocol/TProtocol.h	/^  uint32_t writeMessageEnd() {$/;"	f	class:apache::thrift::protocol::TProtocol
writeMessageEnd	protocol/TVirtualProtocol.h	/^  uint32_t writeMessageEnd() {$/;"	f	class:apache::thrift::protocol::TProtocolDefaults
writeMessageEnd_virt	protocol/TProtocolDecorator.h	/^  virtual uint32_t writeMessageEnd_virt() { return protocol->writeMessageEnd(); }$/;"	f	class:apache::thrift::protocol::TProtocolDecorator
writeMessageEnd_virt	protocol/TVirtualProtocol.h	/^  virtual uint32_t writeMessageEnd_virt() {$/;"	f	class:apache::thrift::protocol::TVirtualProtocol
writeMutex_	async/TConcurrentClientSyncInfo.h	/^  ::apache::thrift::concurrency::Mutex writeMutex_;$/;"	m	class:apache::thrift::async::TConcurrentClientSyncInfo
writePlain	protocol/TDebugProtocol.cpp	/^uint32_t TDebugProtocol::writePlain(const string& str) {$/;"	f	class:apache::thrift::protocol::TDebugProtocol
writePoint_	transport/TFileTransport.h	/^  uint32_t writePoint_;$/;"	m	class:apache::thrift::transport::TFileTransportBuffer
writeSetBegin	protocol/TBinaryProtocol.tcc	/^uint32_t TBinaryProtocolT<Transport_, ByteOrder_>::writeSetBegin(const TType elemType, const uint32_t size) {$/;"	f	class:apache::thrift::protocol::TBinaryProtocolT
writeSetBegin	protocol/TCompactProtocol.tcc	/^uint32_t TCompactProtocolT<Transport_>::writeSetBegin(const TType elemType,$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
writeSetBegin	protocol/TDebugProtocol.cpp	/^uint32_t TDebugProtocol::writeSetBegin(const TType elemType, const uint32_t size) {$/;"	f	class:apache::thrift::protocol::TDebugProtocol
writeSetBegin	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::writeSetBegin(const TType elemType, const uint32_t size) {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
writeSetBegin	protocol/TProtocol.h	/^  uint32_t writeSetBegin(const TType elemType, const uint32_t size) {$/;"	f	class:apache::thrift::protocol::TProtocol
writeSetBegin	protocol/TVirtualProtocol.h	/^  uint32_t writeSetBegin(const TType elemType, const uint32_t size) {$/;"	f	class:apache::thrift::protocol::TProtocolDefaults
writeSetBegin_virt	protocol/TProtocolDecorator.h	/^  virtual uint32_t writeSetBegin_virt(const TType elemType, const uint32_t size) {$/;"	f	class:apache::thrift::protocol::TProtocolDecorator
writeSetBegin_virt	protocol/TVirtualProtocol.h	/^  virtual uint32_t writeSetBegin_virt(const TType elemType, const uint32_t size) {$/;"	f	class:apache::thrift::protocol::TVirtualProtocol
writeSetEnd	protocol/TBinaryProtocol.tcc	/^uint32_t TBinaryProtocolT<Transport_, ByteOrder_>::writeSetEnd() {$/;"	f	class:apache::thrift::protocol::TBinaryProtocolT
writeSetEnd	protocol/TCompactProtocol.h	/^  uint32_t writeSetEnd() { return 0; }$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
writeSetEnd	protocol/TDebugProtocol.cpp	/^uint32_t TDebugProtocol::writeSetEnd() {$/;"	f	class:apache::thrift::protocol::TDebugProtocol
writeSetEnd	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::writeSetEnd() {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
writeSetEnd	protocol/TProtocol.h	/^  uint32_t writeSetEnd() {$/;"	f	class:apache::thrift::protocol::TProtocol
writeSetEnd	protocol/TVirtualProtocol.h	/^  uint32_t writeSetEnd() {$/;"	f	class:apache::thrift::protocol::TProtocolDefaults
writeSetEnd_virt	protocol/TProtocolDecorator.h	/^  virtual uint32_t writeSetEnd_virt() { return protocol->writeSetEnd(); }$/;"	f	class:apache::thrift::protocol::TProtocolDecorator
writeSetEnd_virt	protocol/TVirtualProtocol.h	/^  virtual uint32_t writeSetEnd_virt() { return static_cast<Protocol_*>(this)->writeSetEnd(); }$/;"	f	class:apache::thrift::protocol::TVirtualProtocol
writeSlow	transport/TBufferTransports.cpp	/^void TBufferedTransport::writeSlow(const uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::TBufferedTransport
writeSlow	transport/TBufferTransports.cpp	/^void TFramedTransport::writeSlow(const uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::TFramedTransport
writeSlow	transport/TBufferTransports.cpp	/^void TMemoryBuffer::writeSlow(const uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::TMemoryBuffer
writeString	protocol/TBinaryProtocol.tcc	/^uint32_t TBinaryProtocolT<Transport_, ByteOrder_>::writeString(const StrType& str) {$/;"	f	class:apache::thrift::protocol::TBinaryProtocolT
writeString	protocol/TCompactProtocol.tcc	/^uint32_t TCompactProtocolT<Transport_>::writeString(const std::string& str) {$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
writeString	protocol/TDebugProtocol.cpp	/^uint32_t TDebugProtocol::writeString(const string& str) {$/;"	f	class:apache::thrift::protocol::TDebugProtocol
writeString	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::writeString(const std::string& str) {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
writeString	protocol/TProtocol.h	/^  uint32_t writeString(const std::string& str) {$/;"	f	class:apache::thrift::protocol::TProtocol
writeString	protocol/TVirtualProtocol.h	/^  uint32_t writeString(const std::string& str) {$/;"	f	class:apache::thrift::protocol::TProtocolDefaults
writeString_virt	protocol/TProtocolDecorator.h	/^  virtual uint32_t writeString_virt(const std::string& str) { return protocol->writeString(str); }$/;"	f	class:apache::thrift::protocol::TProtocolDecorator
writeString_virt	protocol/TVirtualProtocol.h	/^  virtual uint32_t writeString_virt(const std::string& str) {$/;"	f	class:apache::thrift::protocol::TVirtualProtocol
writeStructBegin	protocol/TBinaryProtocol.tcc	/^uint32_t TBinaryProtocolT<Transport_, ByteOrder_>::writeStructBegin(const char* name) {$/;"	f	class:apache::thrift::protocol::TBinaryProtocolT
writeStructBegin	protocol/TCompactProtocol.tcc	/^uint32_t TCompactProtocolT<Transport_>::writeStructBegin(const char* name) {$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
writeStructBegin	protocol/TDebugProtocol.cpp	/^uint32_t TDebugProtocol::writeStructBegin(const char* name) {$/;"	f	class:apache::thrift::protocol::TDebugProtocol
writeStructBegin	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::writeStructBegin(const char* name) {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
writeStructBegin	protocol/TProtocol.h	/^  uint32_t writeStructBegin(const char* name) { \/\/写结构体开始$/;"	f	class:apache::thrift::protocol::TProtocol
writeStructBegin	protocol/TVirtualProtocol.h	/^  uint32_t writeStructBegin(const char* name) {$/;"	f	class:apache::thrift::protocol::TProtocolDefaults
writeStructBegin_virt	protocol/TProtocolDecorator.h	/^  virtual uint32_t writeStructBegin_virt(const char* name) {$/;"	f	class:apache::thrift::protocol::TProtocolDecorator
writeStructBegin_virt	protocol/TVirtualProtocol.h	/^  virtual uint32_t writeStructBegin_virt(const char* name) {$/;"	f	class:apache::thrift::protocol::TVirtualProtocol
writeStructEnd	protocol/TBinaryProtocol.tcc	/^uint32_t TBinaryProtocolT<Transport_, ByteOrder_>::writeStructEnd() {$/;"	f	class:apache::thrift::protocol::TBinaryProtocolT
writeStructEnd	protocol/TCompactProtocol.tcc	/^uint32_t TCompactProtocolT<Transport_>::writeStructEnd() {$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
writeStructEnd	protocol/TDebugProtocol.cpp	/^uint32_t TDebugProtocol::writeStructEnd() {$/;"	f	class:apache::thrift::protocol::TDebugProtocol
writeStructEnd	protocol/TJSONProtocol.cpp	/^uint32_t TJSONProtocol::writeStructEnd() {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
writeStructEnd	protocol/TProtocol.h	/^  uint32_t writeStructEnd() { \/\/写结构体结束$/;"	f	class:apache::thrift::protocol::TProtocol
writeStructEnd	protocol/TVirtualProtocol.h	/^  uint32_t writeStructEnd() {$/;"	f	class:apache::thrift::protocol::TProtocolDefaults
writeStructEnd_virt	protocol/TProtocolDecorator.h	/^  virtual uint32_t writeStructEnd_virt() { return protocol->writeStructEnd(); }$/;"	f	class:apache::thrift::protocol::TProtocolDecorator
writeStructEnd_virt	protocol/TVirtualProtocol.h	/^  virtual uint32_t writeStructEnd_virt() { return static_cast<Protocol_*>(this)->writeStructEnd(); }$/;"	f	class:apache::thrift::protocol::TVirtualProtocol
writeVarint32	protocol/TCompactProtocol.tcc	/^uint32_t TCompactProtocolT<Transport_>::writeVarint32(uint32_t n) {$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
writeVarint64	protocol/TCompactProtocol.tcc	/^uint32_t TCompactProtocolT<Transport_>::writeVarint64(uint64_t n) {$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
write_event_	transport/TPipe.cpp	/^  TManualResetEvent write_event_;$/;"	m	class:apache::thrift::transport::TNamedPipeImpl	file:
write_event_	transport/TPipe.cpp	/^  TManualResetEvent write_event_;$/;"	m	class:apache::thrift::transport::TWaitableNamedPipeImpl	file:
write_partial	qt/TQIODeviceTransport.cpp	/^uint32_t TQIODeviceTransport::write_partial(const uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::TQIODeviceTransport
write_partial	transport/TSocket.cpp	/^uint32_t TSocket::write_partial(const uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::TSocket
write_state_	protocol/TDebugProtocol.h	/^  std::vector<write_state_t> write_state_;$/;"	m	class:apache::thrift::protocol::TDebugProtocol
write_state_t	protocol/TDebugProtocol.h	/^  enum write_state_t { UNINIT, STRUCT, LIST, SET, MAP_KEY, MAP_VALUE };$/;"	g	class:apache::thrift::protocol::TDebugProtocol
write_virt	transport/TFileTransport.h	/^  virtual void write_virt(const uint8_t* buf, uint32_t len) { this->write(buf, len); }$/;"	f	class:apache::thrift::transport::TFileTransport
write_virt	transport/TTransport.h	/^  virtual void write_virt(const uint8_t* \/* buf *\/, uint32_t \/* len *\/) {$/;"	f	class:apache::thrift::transport::TTransport
write_virt	transport/TTransportUtils.h	/^  virtual void write_virt(const uint8_t* buf, uint32_t len) { this->write(buf, len); }$/;"	f	class:apache::thrift::transport::TPipedFileReaderTransport
write_virt	transport/TTransportUtils.h	/^  virtual void write_virt(const uint8_t* buf, uint32_t len) { this->write(buf, len); }$/;"	f	class:apache::thrift::transport::TPipedTransport
write_virt	transport/TVirtualTransport.h	/^  virtual void write_virt(const uint8_t* buf, uint32_t len) {$/;"	f	class:apache::thrift::transport::TVirtualTransport
writerThread	transport/TFileTransport.cpp	/^void TFileTransport::writerThread() {$/;"	f	class:apache::thrift::transport::TFileTransport
writerThreadIOErrorSleepTime_	transport/TFileTransport.h	/^  uint32_t writerThreadIOErrorSleepTime_;$/;"	m	class:apache::thrift::transport::TFileTransport
writerThread_	transport/TFileTransport.h	/^  boost::shared_ptr<apache::thrift::concurrency::Thread> writerThread_;$/;"	m	class:apache::thrift::transport::TFileTransport
writerWaiting_	concurrency/Mutex.h	/^  mutable volatile bool writerWaiting_;$/;"	m	class:apache::thrift::concurrency::NoStarveReadWriteMutex
wroteBytes	transport/TBufferTransports.cpp	/^void TMemoryBuffer::wroteBytes(uint32_t len) {$/;"	f	class:apache::thrift::transport::TMemoryBuffer
wstream_	transport/TZlibTransport.h	/^  struct z_stream_s* wstream_;$/;"	m	class:apache::thrift::transport::TZlibTransport	typeref:struct:apache::thrift::transport::TZlibTransport::z_stream_s
zigzagToI32	protocol/TCompactProtocol.tcc	/^int32_t TCompactProtocolT<Transport_>::zigzagToI32(uint32_t n) {$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
zigzagToI64	protocol/TCompactProtocol.tcc	/^int64_t TCompactProtocolT<Transport_>::zigzagToI64(uint64_t n) {$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
zlib_msg_	transport/TZlibTransport.h	/^  std::string zlib_msg_;$/;"	m	class:apache::thrift::transport::TZlibTransportException
zlib_status_	transport/TZlibTransport.h	/^  int zlib_status_;$/;"	m	class:apache::thrift::transport::TZlibTransportException
~AccessManager	transport/TSSLSocket.h	/^  virtual ~AccessManager() {}$/;"	f	class:apache::thrift::transport::AccessManager
~BoostThread	concurrency/BoostThreadFactory.cpp	/^  ~BoostThread() {$/;"	f	class:apache::thrift::concurrency::BoostThread
~Dispatcher	concurrency/TimerManager.cpp	/^  ~Dispatcher() {}$/;"	f	class:apache::thrift::concurrency::TimerManager::Dispatcher
~FacebookServiceIf	gen-cpp-fb-s/FacebookService.h	/^  virtual ~FacebookServiceIf() {}$/;"	f	class:facebook::fb303::FacebookServiceIf
~FacebookServiceIf	gen-cpp-fb/FacebookService.h	/^  virtual ~FacebookServiceIf() {}$/;"	f	class:facebook::fb303::FacebookServiceIf
~FacebookServiceIfFactory	gen-cpp-fb-s/FacebookService.h	/^  virtual ~FacebookServiceIfFactory() {}$/;"	f	class:facebook::fb303::FacebookServiceIfFactory
~FacebookServiceIfFactory	gen-cpp-fb/FacebookService.h	/^  virtual ~FacebookServiceIfFactory() {}$/;"	f	class:facebook::fb303::FacebookServiceIfFactory
~FacebookServiceIfSingletonFactory	gen-cpp-fb-s/FacebookService.h	/^  virtual ~FacebookServiceIfSingletonFactory() {}$/;"	f	class:facebook::fb303::FacebookServiceIfSingletonFactory
~FacebookServiceIfSingletonFactory	gen-cpp-fb/FacebookService.h	/^  virtual ~FacebookServiceIfSingletonFactory() {}$/;"	f	class:facebook::fb303::FacebookServiceIfSingletonFactory
~FacebookServiceMultiface	gen-cpp-fb-s/FacebookService.h	/^  virtual ~FacebookServiceMultiface() {}$/;"	f	class:facebook::fb303::FacebookServiceMultiface
~FacebookServiceMultiface	gen-cpp-fb/FacebookService.h	/^  virtual ~FacebookServiceMultiface() {}$/;"	f	class:facebook::fb303::FacebookServiceMultiface
~FacebookServiceNull	gen-cpp-fb-s/FacebookService.h	/^  virtual ~FacebookServiceNull() {}$/;"	f	class:facebook::fb303::FacebookServiceNull
~FacebookServiceNull	gen-cpp-fb/FacebookService.h	/^  virtual ~FacebookServiceNull() {}$/;"	f	class:facebook::fb303::FacebookServiceNull
~FacebookServiceProcessor	gen-cpp-fb-s/FacebookService.h	/^  virtual ~FacebookServiceProcessor() {}$/;"	f	class:facebook::fb303::FacebookServiceProcessor
~FacebookServiceProcessor	gen-cpp-fb/FacebookService.h	/^  virtual ~FacebookServiceProcessor() {}$/;"	f	class:facebook::fb303::FacebookServiceProcessor
~FacebookService_aliveSince_args	gen-cpp-fb/FacebookService.cpp	/^FacebookService_aliveSince_args::~FacebookService_aliveSince_args() throw() {$/;"	f	class:facebook::fb303::FacebookService_aliveSince_args
~FacebookService_aliveSince_pargs	gen-cpp-fb/FacebookService.cpp	/^FacebookService_aliveSince_pargs::~FacebookService_aliveSince_pargs() throw() {$/;"	f	class:facebook::fb303::FacebookService_aliveSince_pargs
~FacebookService_aliveSince_presult	gen-cpp-fb/FacebookService.cpp	/^FacebookService_aliveSince_presult::~FacebookService_aliveSince_presult() throw() {$/;"	f	class:facebook::fb303::FacebookService_aliveSince_presult
~FacebookService_aliveSince_result	gen-cpp-fb/FacebookService.cpp	/^FacebookService_aliveSince_result::~FacebookService_aliveSince_result() throw() {$/;"	f	class:facebook::fb303::FacebookService_aliveSince_result
~FacebookService_getCounter_args	gen-cpp-fb/FacebookService.cpp	/^FacebookService_getCounter_args::~FacebookService_getCounter_args() throw() {$/;"	f	class:facebook::fb303::FacebookService_getCounter_args
~FacebookService_getCounter_pargs	gen-cpp-fb/FacebookService.cpp	/^FacebookService_getCounter_pargs::~FacebookService_getCounter_pargs() throw() {$/;"	f	class:facebook::fb303::FacebookService_getCounter_pargs
~FacebookService_getCounter_presult	gen-cpp-fb/FacebookService.cpp	/^FacebookService_getCounter_presult::~FacebookService_getCounter_presult() throw() {$/;"	f	class:facebook::fb303::FacebookService_getCounter_presult
~FacebookService_getCounter_result	gen-cpp-fb/FacebookService.cpp	/^FacebookService_getCounter_result::~FacebookService_getCounter_result() throw() {$/;"	f	class:facebook::fb303::FacebookService_getCounter_result
~FacebookService_getCounters_args	gen-cpp-fb/FacebookService.cpp	/^FacebookService_getCounters_args::~FacebookService_getCounters_args() throw() {$/;"	f	class:facebook::fb303::FacebookService_getCounters_args
~FacebookService_getCounters_pargs	gen-cpp-fb/FacebookService.cpp	/^FacebookService_getCounters_pargs::~FacebookService_getCounters_pargs() throw() {$/;"	f	class:facebook::fb303::FacebookService_getCounters_pargs
~FacebookService_getCounters_presult	gen-cpp-fb/FacebookService.cpp	/^FacebookService_getCounters_presult::~FacebookService_getCounters_presult() throw() {$/;"	f	class:facebook::fb303::FacebookService_getCounters_presult
~FacebookService_getCounters_result	gen-cpp-fb/FacebookService.cpp	/^FacebookService_getCounters_result::~FacebookService_getCounters_result() throw() {$/;"	f	class:facebook::fb303::FacebookService_getCounters_result
~FacebookService_getCpuProfile_args	gen-cpp-fb/FacebookService.cpp	/^FacebookService_getCpuProfile_args::~FacebookService_getCpuProfile_args() throw() {$/;"	f	class:facebook::fb303::FacebookService_getCpuProfile_args
~FacebookService_getCpuProfile_pargs	gen-cpp-fb/FacebookService.cpp	/^FacebookService_getCpuProfile_pargs::~FacebookService_getCpuProfile_pargs() throw() {$/;"	f	class:facebook::fb303::FacebookService_getCpuProfile_pargs
~FacebookService_getCpuProfile_presult	gen-cpp-fb/FacebookService.cpp	/^FacebookService_getCpuProfile_presult::~FacebookService_getCpuProfile_presult() throw() {$/;"	f	class:facebook::fb303::FacebookService_getCpuProfile_presult
~FacebookService_getCpuProfile_result	gen-cpp-fb/FacebookService.cpp	/^FacebookService_getCpuProfile_result::~FacebookService_getCpuProfile_result() throw() {$/;"	f	class:facebook::fb303::FacebookService_getCpuProfile_result
~FacebookService_getName_args	gen-cpp-fb-s/FacebookService.cpp	/^FacebookService_getName_args::~FacebookService_getName_args() throw() {$/;"	f	class:facebook::fb303::FacebookService_getName_args
~FacebookService_getName_args	gen-cpp-fb/FacebookService.cpp	/^FacebookService_getName_args::~FacebookService_getName_args() throw() {$/;"	f	class:facebook::fb303::FacebookService_getName_args
~FacebookService_getName_pargs	gen-cpp-fb-s/FacebookService.cpp	/^FacebookService_getName_pargs::~FacebookService_getName_pargs() throw() {$/;"	f	class:facebook::fb303::FacebookService_getName_pargs
~FacebookService_getName_pargs	gen-cpp-fb/FacebookService.cpp	/^FacebookService_getName_pargs::~FacebookService_getName_pargs() throw() {$/;"	f	class:facebook::fb303::FacebookService_getName_pargs
~FacebookService_getName_presult	gen-cpp-fb-s/FacebookService.cpp	/^FacebookService_getName_presult::~FacebookService_getName_presult() throw() {$/;"	f	class:facebook::fb303::FacebookService_getName_presult
~FacebookService_getName_presult	gen-cpp-fb/FacebookService.cpp	/^FacebookService_getName_presult::~FacebookService_getName_presult() throw() {$/;"	f	class:facebook::fb303::FacebookService_getName_presult
~FacebookService_getName_result	gen-cpp-fb-s/FacebookService.cpp	/^FacebookService_getName_result::~FacebookService_getName_result() throw() {$/;"	f	class:facebook::fb303::FacebookService_getName_result
~FacebookService_getName_result	gen-cpp-fb/FacebookService.cpp	/^FacebookService_getName_result::~FacebookService_getName_result() throw() {$/;"	f	class:facebook::fb303::FacebookService_getName_result
~FacebookService_getOption_args	gen-cpp-fb/FacebookService.cpp	/^FacebookService_getOption_args::~FacebookService_getOption_args() throw() {$/;"	f	class:facebook::fb303::FacebookService_getOption_args
~FacebookService_getOption_pargs	gen-cpp-fb/FacebookService.cpp	/^FacebookService_getOption_pargs::~FacebookService_getOption_pargs() throw() {$/;"	f	class:facebook::fb303::FacebookService_getOption_pargs
~FacebookService_getOption_presult	gen-cpp-fb/FacebookService.cpp	/^FacebookService_getOption_presult::~FacebookService_getOption_presult() throw() {$/;"	f	class:facebook::fb303::FacebookService_getOption_presult
~FacebookService_getOption_result	gen-cpp-fb/FacebookService.cpp	/^FacebookService_getOption_result::~FacebookService_getOption_result() throw() {$/;"	f	class:facebook::fb303::FacebookService_getOption_result
~FacebookService_getOptions_args	gen-cpp-fb/FacebookService.cpp	/^FacebookService_getOptions_args::~FacebookService_getOptions_args() throw() {$/;"	f	class:facebook::fb303::FacebookService_getOptions_args
~FacebookService_getOptions_pargs	gen-cpp-fb/FacebookService.cpp	/^FacebookService_getOptions_pargs::~FacebookService_getOptions_pargs() throw() {$/;"	f	class:facebook::fb303::FacebookService_getOptions_pargs
~FacebookService_getOptions_presult	gen-cpp-fb/FacebookService.cpp	/^FacebookService_getOptions_presult::~FacebookService_getOptions_presult() throw() {$/;"	f	class:facebook::fb303::FacebookService_getOptions_presult
~FacebookService_getOptions_result	gen-cpp-fb/FacebookService.cpp	/^FacebookService_getOptions_result::~FacebookService_getOptions_result() throw() {$/;"	f	class:facebook::fb303::FacebookService_getOptions_result
~FacebookService_getStatusDetails_args	gen-cpp-fb/FacebookService.cpp	/^FacebookService_getStatusDetails_args::~FacebookService_getStatusDetails_args() throw() {$/;"	f	class:facebook::fb303::FacebookService_getStatusDetails_args
~FacebookService_getStatusDetails_pargs	gen-cpp-fb/FacebookService.cpp	/^FacebookService_getStatusDetails_pargs::~FacebookService_getStatusDetails_pargs() throw() {$/;"	f	class:facebook::fb303::FacebookService_getStatusDetails_pargs
~FacebookService_getStatusDetails_presult	gen-cpp-fb/FacebookService.cpp	/^FacebookService_getStatusDetails_presult::~FacebookService_getStatusDetails_presult() throw() {$/;"	f	class:facebook::fb303::FacebookService_getStatusDetails_presult
~FacebookService_getStatusDetails_result	gen-cpp-fb/FacebookService.cpp	/^FacebookService_getStatusDetails_result::~FacebookService_getStatusDetails_result() throw() {$/;"	f	class:facebook::fb303::FacebookService_getStatusDetails_result
~FacebookService_getStatus_args	gen-cpp-fb/FacebookService.cpp	/^FacebookService_getStatus_args::~FacebookService_getStatus_args() throw() {$/;"	f	class:facebook::fb303::FacebookService_getStatus_args
~FacebookService_getStatus_pargs	gen-cpp-fb/FacebookService.cpp	/^FacebookService_getStatus_pargs::~FacebookService_getStatus_pargs() throw() {$/;"	f	class:facebook::fb303::FacebookService_getStatus_pargs
~FacebookService_getStatus_presult	gen-cpp-fb/FacebookService.cpp	/^FacebookService_getStatus_presult::~FacebookService_getStatus_presult() throw() {$/;"	f	class:facebook::fb303::FacebookService_getStatus_presult
~FacebookService_getStatus_result	gen-cpp-fb/FacebookService.cpp	/^FacebookService_getStatus_result::~FacebookService_getStatus_result() throw() {$/;"	f	class:facebook::fb303::FacebookService_getStatus_result
~FacebookService_getVersion_args	gen-cpp-fb/FacebookService.cpp	/^FacebookService_getVersion_args::~FacebookService_getVersion_args() throw() {$/;"	f	class:facebook::fb303::FacebookService_getVersion_args
~FacebookService_getVersion_pargs	gen-cpp-fb/FacebookService.cpp	/^FacebookService_getVersion_pargs::~FacebookService_getVersion_pargs() throw() {$/;"	f	class:facebook::fb303::FacebookService_getVersion_pargs
~FacebookService_getVersion_presult	gen-cpp-fb/FacebookService.cpp	/^FacebookService_getVersion_presult::~FacebookService_getVersion_presult() throw() {$/;"	f	class:facebook::fb303::FacebookService_getVersion_presult
~FacebookService_getVersion_result	gen-cpp-fb/FacebookService.cpp	/^FacebookService_getVersion_result::~FacebookService_getVersion_result() throw() {$/;"	f	class:facebook::fb303::FacebookService_getVersion_result
~FacebookService_reinitialize_args	gen-cpp-fb/FacebookService.cpp	/^FacebookService_reinitialize_args::~FacebookService_reinitialize_args() throw() {$/;"	f	class:facebook::fb303::FacebookService_reinitialize_args
~FacebookService_reinitialize_pargs	gen-cpp-fb/FacebookService.cpp	/^FacebookService_reinitialize_pargs::~FacebookService_reinitialize_pargs() throw() {$/;"	f	class:facebook::fb303::FacebookService_reinitialize_pargs
~FacebookService_setOption_args	gen-cpp-fb-s/FacebookService.cpp	/^FacebookService_setOption_args::~FacebookService_setOption_args() throw() {$/;"	f	class:facebook::fb303::FacebookService_setOption_args
~FacebookService_setOption_args	gen-cpp-fb/FacebookService.cpp	/^FacebookService_setOption_args::~FacebookService_setOption_args() throw() {$/;"	f	class:facebook::fb303::FacebookService_setOption_args
~FacebookService_setOption_pargs	gen-cpp-fb-s/FacebookService.cpp	/^FacebookService_setOption_pargs::~FacebookService_setOption_pargs() throw() {$/;"	f	class:facebook::fb303::FacebookService_setOption_pargs
~FacebookService_setOption_pargs	gen-cpp-fb/FacebookService.cpp	/^FacebookService_setOption_pargs::~FacebookService_setOption_pargs() throw() {$/;"	f	class:facebook::fb303::FacebookService_setOption_pargs
~FacebookService_setOption_presult	gen-cpp-fb-s/FacebookService.cpp	/^FacebookService_setOption_presult::~FacebookService_setOption_presult() throw() {$/;"	f	class:facebook::fb303::FacebookService_setOption_presult
~FacebookService_setOption_presult	gen-cpp-fb/FacebookService.cpp	/^FacebookService_setOption_presult::~FacebookService_setOption_presult() throw() {$/;"	f	class:facebook::fb303::FacebookService_setOption_presult
~FacebookService_setOption_result	gen-cpp-fb-s/FacebookService.cpp	/^FacebookService_setOption_result::~FacebookService_setOption_result() throw() {$/;"	f	class:facebook::fb303::FacebookService_setOption_result
~FacebookService_setOption_result	gen-cpp-fb/FacebookService.cpp	/^FacebookService_setOption_result::~FacebookService_setOption_result() throw() {$/;"	f	class:facebook::fb303::FacebookService_setOption_result
~FacebookService_shutdown_args	gen-cpp-fb-s/FacebookService.cpp	/^FacebookService_shutdown_args::~FacebookService_shutdown_args() throw() {$/;"	f	class:facebook::fb303::FacebookService_shutdown_args
~FacebookService_shutdown_args	gen-cpp-fb/FacebookService.cpp	/^FacebookService_shutdown_args::~FacebookService_shutdown_args() throw() {$/;"	f	class:facebook::fb303::FacebookService_shutdown_args
~FacebookService_shutdown_pargs	gen-cpp-fb-s/FacebookService.cpp	/^FacebookService_shutdown_pargs::~FacebookService_shutdown_pargs() throw() {$/;"	f	class:facebook::fb303::FacebookService_shutdown_pargs
~FacebookService_shutdown_pargs	gen-cpp-fb/FacebookService.cpp	/^FacebookService_shutdown_pargs::~FacebookService_shutdown_pargs() throw() {$/;"	f	class:facebook::fb303::FacebookService_shutdown_pargs
~Guard	concurrency/Mutex.h	/^  ~Guard() {$/;"	f	class:apache::thrift::concurrency::Guard
~Impl	concurrency/Monitor.cpp	/^  ~Impl() { cleanup(); }$/;"	f	class:apache::thrift::concurrency::Monitor::Impl
~Impl	concurrency/ThreadManager.cpp	/^  ~Impl() { stop(); }$/;"	f	class:apache::thrift::concurrency::ThreadManager::Impl
~Monitor	concurrency/BoostMonitor.cpp	/^Monitor::~Monitor() {$/;"	f	class:apache::thrift::concurrency::Monitor
~Monitor	concurrency/Monitor.cpp	/^Monitor::~Monitor() {$/;"	f	class:apache::thrift::concurrency::Monitor
~Monitor	concurrency/StdMonitor.cpp	/^Monitor::~Monitor() {$/;"	f	class:apache::thrift::concurrency::Monitor
~Mutex	concurrency/Mutex.h	/^  virtual ~Mutex() {}$/;"	f	class:apache::thrift::concurrency::Mutex
~PeekProcessor	processor/PeekProcessor.cpp	/^PeekProcessor::~PeekProcessor() {$/;"	f	class:apache::thrift::processor::PeekProcessor
~PthreadThread	concurrency/PosixThreadFactory.cpp	/^  ~PthreadThread() {$/;"	f	class:apache::thrift::concurrency::PthreadThread
~RWGuard	concurrency/Mutex.h	/^  ~RWGuard() { rw_mutex_.release(); }$/;"	f	class:apache::thrift::concurrency::RWGuard
~ReadWriteMutex	concurrency/Mutex.h	/^  virtual ~ReadWriteMutex() {}$/;"	f	class:apache::thrift::concurrency::ReadWriteMutex
~Runnable	concurrency/Thread.h	/^  virtual ~Runnable(){};$/;"	f	class:apache::thrift::concurrency::Runnable
~SSLContext	transport/TSSLSocket.cpp	/^SSLContext::~SSLContext() {$/;"	f	class:apache::thrift::transport::SSLContext
~StatsProcessor	processor/StatsProcessor.h	/^  virtual ~StatsProcessor(){};$/;"	f	class:apache::thrift::processor::StatsProcessor
~StdThread	concurrency/StdThreadFactory.cpp	/^  ~StdThread() {$/;"	f	class:apache::thrift::concurrency::StdThread
~TAnonPipeImpl	transport/TPipe.cpp	/^  virtual ~TAnonPipeImpl() {}$/;"	f	class:apache::thrift::transport::TAnonPipeImpl
~TAnonPipeServer	transport/TPipeServer.cpp	/^  virtual ~TAnonPipeServer() {$/;"	f	class:apache::thrift::transport::TAnonPipeServer
~TApplicationException	TApplicationException.h	/^  virtual ~TApplicationException() throw() {}$/;"	f	class:apache::thrift::TApplicationException
~TAsyncBufferProcessor	async/TAsyncBufferProcessor.h	/^  virtual ~TAsyncBufferProcessor() {}$/;"	f	class:apache::thrift::async::TAsyncBufferProcessor
~TAsyncChannel	async/TAsyncChannel.h	/^  virtual ~TAsyncChannel() {}$/;"	f	class:apache::thrift::async::TAsyncChannel
~TAsyncProcessor	async/TAsyncProcessor.h	/^  virtual ~TAsyncProcessor() {}$/;"	f	class:apache::thrift::async::TAsyncProcessor
~TAsyncProcessorFactory	async/TAsyncProcessor.h	/^  virtual ~TAsyncProcessorFactory() {}$/;"	f	class:apache::thrift::async::TAsyncProcessorFactory
~TAsyncProtocolProcessor	async/TAsyncProtocolProcessor.h	/^  virtual ~TAsyncProtocolProcessor() {}$/;"	f	class:apache::thrift::async::TAsyncProtocolProcessor
~TAutoCrit	windows/Sync.h	/^  ~TAutoCrit() { LeaveCriticalSection(cs_); }$/;"	f	class:apache::thrift::TAutoCrit
~TAutoHandle	windows/Sync.h	/^  ~TAutoHandle() {$/;"	f	struct:apache::thrift::TAutoHandle
~TAutoOverlapThread	windows/OverlappedSubmissionThread.h	/^  ~TAutoOverlapThread() { TOverlappedSubmissionThread::release_instance(); }$/;"	f	class:apache::thrift::transport::TAutoOverlapThread
~TAutoResetEvent	windows/Sync.h	/^  ~TAutoResetEvent() { CloseHandle(h); }$/;"	f	struct:apache::thrift::TAutoResetEvent
~TBinaryProtocolFactoryT	protocol/TBinaryProtocol.h	/^  virtual ~TBinaryProtocolFactoryT() {}$/;"	f	class:apache::thrift::protocol::TBinaryProtocolFactoryT
~TBufferBase	transport/TBufferTransports.h	/^  virtual ~TBufferBase() {}$/;"	f	class:apache::thrift::transport::TBufferBase
~TBufferedTransportFactory	transport/TBufferTransports.h	/^  virtual ~TBufferedTransportFactory() {}$/;"	f	class:apache::thrift::transport::TBufferedTransportFactory
~TCompactProtocolFactoryT	protocol/TCompactProtocol.h	/^  virtual ~TCompactProtocolFactoryT() {}$/;"	f	class:apache::thrift::protocol::TCompactProtocolFactoryT
~TCompactProtocolT	protocol/TCompactProtocol.h	/^  ~TCompactProtocolT() { free(string_buf_); }$/;"	f	class:apache::thrift::protocol::TCompactProtocolT
~TConcurrentRecvSentry	async/TConcurrentClientSyncInfo.cpp	/^TConcurrentRecvSentry::~TConcurrentRecvSentry()$/;"	f	class:apache::thrift::async::TConcurrentRecvSentry
~TConcurrentSendSentry	async/TConcurrentClientSyncInfo.cpp	/^TConcurrentSendSentry::~TConcurrentSendSentry()$/;"	f	class:apache::thrift::async::TConcurrentSendSentry
~TConnectedClient	server/TConnectedClient.cpp	/^TConnectedClient::~TConnectedClient() {$/;"	f	class:apache::thrift::server::TConnectedClient
~TConnection	server/TNonblockingServer.cpp	/^  ~TConnection() { std::free(readBuffer_); }$/;"	f	class:apache::thrift::server::TNonblockingServer::TConnection
~TCriticalSection	windows/Sync.h	/^  ~TCriticalSection() { DeleteCriticalSection(&cs); }$/;"	f	struct:apache::thrift::TCriticalSection
~TDebugProtocolFactory	protocol/TDebugProtocol.h	/^  virtual ~TDebugProtocolFactory() {}$/;"	f	class:apache::thrift::protocol::TDebugProtocolFactory
~TDelayedException	Thrift.h	/^  virtual ~TDelayedException(){};$/;"	f	class:apache::thrift::TDelayedException
~TEvhttpClientChannel	async/TEvhttpClientChannel.cpp	/^TEvhttpClientChannel::~TEvhttpClientChannel() {$/;"	f	class:apache::thrift::async::TEvhttpClientChannel
~TEvhttpServer	async/TEvhttpServer.cpp	/^TEvhttpServer::~TEvhttpServer() {$/;"	f	class:apache::thrift::async::TEvhttpServer
~TException	Thrift.h	/^  virtual ~TException() throw() {}$/;"	f	class:apache::thrift::TException
~TFDTransport	transport/TFDTransport.h	/^  ~TFDTransport() {$/;"	f	class:apache::thrift::transport::TFDTransport
~TFileTransport	transport/TFileTransport.cpp	/^TFileTransport::~TFileTransport() {$/;"	f	class:apache::thrift::transport::TFileTransport
~TFileTransportBuffer	transport/TFileTransport.cpp	/^TFileTransportBuffer::~TFileTransportBuffer() {$/;"	f	class:apache::thrift::transport::TFileTransportBuffer
~TFramedTransportFactory	transport/TBufferTransports.h	/^  virtual ~TFramedTransportFactory() {}$/;"	f	class:apache::thrift::transport::TFramedTransportFactory
~THttpClient	transport/THttpClient.cpp	/^THttpClient::~THttpClient() {$/;"	f	class:apache::thrift::transport::THttpClient
~THttpServer	transport/THttpServer.cpp	/^THttpServer::~THttpServer() {$/;"	f	class:apache::thrift::transport::THttpServer
~THttpServerTransportFactory	transport/THttpServer.h	/^  virtual ~THttpServerTransportFactory() {}$/;"	f	class:apache::thrift::transport::THttpServerTransportFactory
~THttpTransport	transport/THttpTransport.cpp	/^THttpTransport::~THttpTransport() {$/;"	f	class:apache::thrift::transport::THttpTransport
~TInputRecursionTracker	protocol/TProtocol.h	/^  ~TInputRecursionTracker() {$/;"	f	struct:apache::thrift::protocol::TInputRecursionTracker
~TJSONContext	protocol/TJSONProtocol.cpp	/^  virtual ~TJSONContext(){};$/;"	f	class:apache::thrift::protocol::TJSONContext
~TJSONProtocol	protocol/TJSONProtocol.cpp	/^TJSONProtocol::~TJSONProtocol() {$/;"	f	class:apache::thrift::protocol::TJSONProtocol
~TJSONProtocolFactory	protocol/TJSONProtocol.h	/^  virtual ~TJSONProtocolFactory() {}$/;"	f	class:apache::thrift::protocol::TJSONProtocolFactory
~TManualResetEvent	windows/Sync.h	/^  ~TManualResetEvent() { CloseHandle(h); }$/;"	f	struct:apache::thrift::TManualResetEvent
~TMemoryBuffer	transport/TBufferTransports.h	/^  ~TMemoryBuffer() {$/;"	f	class:apache::thrift::transport::TMemoryBuffer
~TMultiplexedProtocol	protocol/TMultiplexedProtocol.h	/^  virtual ~TMultiplexedProtocol() {}$/;"	f	class:apache::thrift::protocol::TMultiplexedProtocol
~TNamedPipeImpl	transport/TPipe.cpp	/^  virtual ~TNamedPipeImpl() {}$/;"	f	class:apache::thrift::transport::TNamedPipeImpl
~TNamedPipeServer	transport/TPipeServer.cpp	/^  virtual ~TNamedPipeServer() {}$/;"	f	class:apache::thrift::transport::TNamedPipeServer
~TNonblockingIOThread	server/TNonblockingServer.cpp	/^TNonblockingIOThread::~TNonblockingIOThread() {$/;"	f	class:apache::thrift::server::TNonblockingIOThread
~TNonblockingServer	server/TNonblockingServer.cpp	/^TNonblockingServer::~TNonblockingServer() {$/;"	f	class:apache::thrift::server::TNonblockingServer
~TNullTransport	transport/TTransportUtils.h	/^  ~TNullTransport() {}$/;"	f	class:apache::thrift::transport::TNullTransport
~TOutputRecursionTracker	protocol/TProtocol.h	/^  ~TOutputRecursionTracker() {$/;"	f	struct:apache::thrift::protocol::TOutputRecursionTracker
~TOverlappedSubmissionThread	windows/OverlappedSubmissionThread.cpp	/^TOverlappedSubmissionThread::~TOverlappedSubmissionThread() {$/;"	f	class:apache::thrift::transport::TOverlappedSubmissionThread
~TPipe	transport/TPipe.cpp	/^TPipe::~TPipe() {$/;"	f	class:apache::thrift::transport::TPipe
~TPipeServer	transport/TPipeServer.cpp	/^TPipeServer::~TPipeServer() {}$/;"	f	class:apache::thrift::transport::TPipeServer
~TPipedFileReaderTransport	transport/TTransportUtils.cpp	/^TPipedFileReaderTransport::~TPipedFileReaderTransport() {$/;"	f	class:apache::thrift::transport::TPipedFileReaderTransport
~TPipedFileReaderTransportFactory	transport/TTransportUtils.h	/^  virtual ~TPipedFileReaderTransportFactory() {}$/;"	f	class:apache::thrift::transport::TPipedFileReaderTransportFactory
~TPipedTransport	transport/TTransportUtils.h	/^  ~TPipedTransport() {$/;"	f	class:apache::thrift::transport::TPipedTransport
~TPipedTransportFactory	transport/TTransportUtils.h	/^  virtual ~TPipedTransportFactory() {}$/;"	f	class:apache::thrift::transport::TPipedTransportFactory
~TProcessor	TProcessor.h	/^  virtual ~TProcessor() {}$/;"	f	class:apache::thrift::TProcessor
~TProcessorContextFreer	TProcessor.h	/^  ~TProcessorContextFreer() {$/;"	f	class:apache::thrift::TProcessorContextFreer
~TProcessorEventHandler	TProcessor.h	/^  virtual ~TProcessorEventHandler() {}$/;"	f	class:apache::thrift::TProcessorEventHandler
~TProcessorFactory	TProcessor.h	/^  virtual ~TProcessorFactory() {}$/;"	f	class:apache::thrift::TProcessorFactory
~TProtocol	protocol/TProtocol.cpp	/^TProtocol::~TProtocol() {}$/;"	f	class:apache::thrift::protocol::TProtocol
~TProtocolDecorator	protocol/TProtocolDecorator.h	/^  virtual ~TProtocolDecorator() {}$/;"	f	class:apache::thrift::protocol::TProtocolDecorator
~TProtocolException	protocol/TProtocolException.h	/^  virtual ~TProtocolException() throw() {}$/;"	f	class:apache::thrift::protocol::TProtocolException
~TProtocolFactory	protocol/TProtocol.cpp	/^TProtocolFactory::~TProtocolFactory() {}$/;"	f	class:apache::thrift::protocol::TProtocolFactory
~TQIODeviceTransport	qt/TQIODeviceTransport.cpp	/^TQIODeviceTransport::~TQIODeviceTransport() {$/;"	f	class:apache::thrift::transport::TQIODeviceTransport
~TQTcpServer	qt/TQTcpServer.cpp	/^TQTcpServer::~TQTcpServer() {$/;"	f	class:apache::thrift::async::TQTcpServer
~TSSLSocket	transport/TSSLSocket.cpp	/^TSSLSocket::~TSSLSocket() {$/;"	f	class:apache::thrift::transport::TSSLSocket
~TSSLSocketFactory	transport/TSSLSocket.cpp	/^TSSLSocketFactory::~TSSLSocketFactory() {$/;"	f	class:apache::thrift::transport::TSSLSocketFactory
~TServer	server/TServer.h	/^  virtual ~TServer() {}$/;"	f	class:apache::thrift::server::TServer
~TServerEventHandler	server/TServer.h	/^  virtual ~TServerEventHandler() {}$/;"	f	class:apache::thrift::server::TServerEventHandler
~TServerFramework	server/TServerFramework.cpp	/^TServerFramework::~TServerFramework() {$/;"	f	class:apache::thrift::server::TServerFramework
~TServerSocket	transport/TServerSocket.cpp	/^TServerSocket::~TServerSocket() {$/;"	f	class:apache::thrift::transport::TServerSocket
~TServerTransport	transport/TServerTransport.h	/^  virtual ~TServerTransport() {}$/;"	f	class:apache::thrift::transport::TServerTransport
~TSimpleServer	server/TSimpleServer.cpp	/^TSimpleServer::~TSimpleServer() {$/;"	f	class:apache::thrift::server::TSimpleServer
~TSocket	transport/TSocket.cpp	/^TSocket::~TSocket() {$/;"	f	class:apache::thrift::transport::TSocket
~TSocketPool	transport/TSocketPool.cpp	/^TSocketPool::~TSocketPool() {$/;"	f	class:apache::thrift::transport::TSocketPool
~TThreadPoolServer	server/TThreadPoolServer.cpp	/^TThreadPoolServer::~TThreadPoolServer() {$/;"	f	class:apache::thrift::server::TThreadPoolServer
~TThreadedServer	server/TThreadedServer.cpp	/^TThreadedServer::~TThreadedServer() {$/;"	f	class:apache::thrift::server::TThreadedServer
~TTransport	transport/TTransport.h	/^  virtual ~TTransport() {}$/;"	f	class:apache::thrift::transport::TTransport
~TTransportException	transport/TTransportException.h	/^  virtual ~TTransportException() throw() {}$/;"	f	class:apache::thrift::transport::TTransportException
~TTransportFactory	transport/TTransport.h	/^  virtual ~TTransportFactory() {}$/;"	f	class:apache::thrift::transport::TTransportFactory
~TWaitableNamedPipeImpl	transport/TPipe.cpp	/^  virtual ~TWaitableNamedPipeImpl() {$/;"	f	class:apache::thrift::transport::TWaitableNamedPipeImpl
~TWinsockSingleton	windows/TWinsockSingleton.cpp	/^TWinsockSingleton::~TWinsockSingleton(void) {$/;"	f	class:apache::thrift::transport::TWinsockSingleton
~TZlibTransport	transport/TZlibTransport.cpp	/^TZlibTransport::~TZlibTransport() {$/;"	f	class:apache::thrift::transport::TZlibTransport
~TZlibTransportException	transport/TZlibTransport.h	/^  virtual ~TZlibTransportException() throw() {}$/;"	f	class:apache::thrift::transport::TZlibTransportException
~TZlibTransportFactory	transport/TZlibTransport.h	/^  virtual ~TZlibTransportFactory() {}$/;"	f	class:apache::thrift::transport::TZlibTransportFactory
~Task	concurrency/ThreadManager.cpp	/^  ~Task() {}$/;"	f	class:apache::thrift::concurrency::ThreadManager::Task
~Task	concurrency/TimerManager.cpp	/^  ~Task() {}$/;"	f	class:apache::thrift::concurrency::TimerManager::Task
~Thread	concurrency/Thread.h	/^  virtual ~Thread(){};$/;"	f	class:apache::thrift::concurrency::Thread
~ThreadFactory	concurrency/Thread.h	/^  virtual ~ThreadFactory() {}$/;"	f	class:apache::thrift::concurrency::ThreadFactory
~ThreadManager	concurrency/ThreadManager.h	/^  virtual ~ThreadManager() {}$/;"	f	class:apache::thrift::concurrency::ThreadManager
~TimerManager	concurrency/TimerManager.cpp	/^TimerManager::~TimerManager() {$/;"	f	class:apache::thrift::concurrency::TimerManager
~Worker	concurrency/ThreadManager.cpp	/^  ~Worker() {}$/;"	f	class:apache::thrift::concurrency::ThreadManager::Worker
~eventInfo	transport/TFileTransport.h	/^  ~eventInfo() {$/;"	f	struct:apache::thrift::transport::eventInfo
~impl	concurrency/Mutex.cpp	/^  ~impl() {$/;"	f	class:apache::thrift::concurrency::Mutex::impl
~impl	concurrency/Mutex.cpp	/^  ~impl() {$/;"	f	class:apache::thrift::concurrency::ReadWriteMutex::impl
~readState	transport/TFileTransport.h	/^  ~readState() {$/;"	f	struct:apache::thrift::transport::readState
